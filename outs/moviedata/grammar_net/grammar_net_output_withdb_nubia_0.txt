{"index": 0, "beams": [{"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.10990817512356443, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": true, "beam_nubia_score": 0.9665545066675658, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were not deceased on 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.20671756605588598, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.46978018173449687, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people who were not deceased on 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.3500147503145854, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.9665545066675658, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_day),person.birth_day))", "inferred_question": "What are the birth days of people who were not deceased on 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.44682414124690695, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.46978018173449687, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were not deceased on 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.4685091417559306, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.9665545066675658, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_place),person.birth_day))", "inferred_question": "What are the birth days of people who were not deceased on 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.5349297331922571, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.5523375428526793, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>=,1998-05-14), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were deceased after 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.5441288952060859, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.483928594280183, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),movie.release_date))", "inferred_question": "What are the release dates of people who were not deceased on 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.5653185326882522, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.46978018173449687, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_place),person.death_day))", "inferred_question": "What are the death days of people who were not deceased on 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.5874919699781458, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.5523375428526793, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1998-05-14), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were deceased after 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.6190938655563514, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.4888653690720922, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),movie.runtime))", "inferred_question": "What are the runtimes of people who were not deceased on 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.6273833554514567, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.9665545066675658, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.name),person.birth_day))", "inferred_question": "What are the birth days of people who were not deceased on 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.6317391241245787, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.2963341398136745, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>=,1998-05-14), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people who were deceased after 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.6354857491605799, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6245269980736255, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,1998-05-14), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were deceased before 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.6431026164718787, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.3262661562109568, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.death_place))", "inferred_question": "What are the death places of people who were not deceased on 1998-05-14?"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "score": -0.6459572952517192, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.9665545066675658, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), movie.release_date),person.birth_day))", "inferred_question": "What are the birth days of people who were not deceased on 1998-05-14?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 1, "beams": [{"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.14512323523676476, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.711714656071402, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),oscar.category))", "inferred_question": "How many categories of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.14521771686940596, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.711714656071402, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.category),oscar.category))", "inferred_question": "How many categories of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.22185743658499044, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6631249722112493, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.22195191821763163, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6631249722112493, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.category),oscar.number))", "inferred_question": "How many numbers of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.2521393952073558, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.711714656071402, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.category),oscar.category))", "inferred_question": "How many categories of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.2700564925614357, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.711714656071402, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.sub_category),oscar.category))", "inferred_question": "How many categories of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.3170255285472793, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.711714656071402, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), person.birth_place),oscar.category))", "inferred_question": "How many categories of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.34191876023435935, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6631249722112493, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.category),oscar.number))", "inferred_question": "How many numbers of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.3467906939096614, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6631249722112493, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.sub_category),oscar.number))", "inferred_question": "How many numbers of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.3581417448106558, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6991165840763053, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.358236226443297, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6991165840763053, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were deceased after 2000-05-26 won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.3605945193594246, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.47353076816742057, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),person.birth_place))", "inferred_question": "How many birth places of people who were deceased after 2000-05-26 who won oscars for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.3606890009920658, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.47353076816742057, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.category),person.birth_place))", "inferred_question": "How many birth places of people who were deceased after 2000-05-26 who won oscars for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.3767142567353213, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.movie_id),person.death_day,>=,2000-05-26),oscar.id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),oscar.category))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "score": -0.38383950608015877, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.movie_id),person.death_day,>=,2000-05-26),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),oscar.category))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 2, "beams": [{"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.009287766148190713, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": true, "beam_nubia_score": 0.9095940239264835, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.5958927881110867, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.14310715602200919, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.budget))", "inferred_question": "What are the budgets of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.6681994220380147, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9095940239264835, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.popularity),movie.release_date))", "inferred_question": "What are the release dates of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.70934367386144, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9095940239264835, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.budget),movie.release_date))", "inferred_question": "What are the release dates of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.765230121291097, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9095940239264835, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), person.birth_day),movie.release_date))", "inferred_question": "What are the release dates of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.7679661634283548, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5601328190165016, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Post Production), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.7680979391698202, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9095940239264835, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.release_date))", "inferred_question": "What are the release dates of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.7725409280647, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.19302418510340702, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.popularity))", "inferred_question": "What are the popularities of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.7747764011983236, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9095940239264835, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.release_date))", "inferred_question": "What are the release dates of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.8331766846495157, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.7750928843111172, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Post Production), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.8464605819572171, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.7048309329881608, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),person.birth_day))", "inferred_question": "What are the birth days of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.8498103043202718, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9095940239264835, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), crew.movie_id),movie.release_date))", "inferred_question": "What are the release dates of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.8538529288161953, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.3626958294391138, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.title))", "inferred_question": "What are the names of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.855426133810397, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5991786272251063, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.runtime))", "inferred_question": "What are the runtimes of movies whose status is Post Production?"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "score": -0.8599619289998373, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9095940239264835, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.status),movie.release_date))", "inferred_question": "What are the release dates of movies whose status is Post Production?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 3, "beams": [{"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.10104927918013579, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.22811301290849517, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.24223211301115408, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.27697972668454135, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>=,1980-07-12), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.2798167792762414, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,oscar.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.28153734935795244, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.3084341494802251, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1980-07-12),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.31136249391166937, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.runtime),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.3185443561526509, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.3272396690875336, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5230736358742515, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.3276005343851981, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.33614850893965814, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.3426310372273869, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.34895060929734456, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>=,1980-07-12),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "score": -0.3498973120291549, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7477460885542977, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>=,1980-07-12), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1980-07-12 won oscars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 4, "beams": [{"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.02927616184388171, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "inferred_question": "How many original languages of movies with a budget of more than 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.35274499228034983, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>=,140000000), movie.original_language),movie.original_language))", "inferred_question": "How many original languages of movies with a budget of at least 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.5729083972219087, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7786900468948821, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,!=,140000000), movie.original_language),movie.original_language))", "inferred_question": "How many original languages of movies with a budget other than 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.7108771630264528, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.revenue),movie.original_language))", "inferred_question": "How many original languages of movies with a budget of more than 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.7271596301980026, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6817230363096776, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.budget))", "inferred_question": "How many budgets of movies with a budget of more than 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.7307536114640243, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5541765020689553, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.title))", "inferred_question": "How many names of movies with a budget of more than 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.737423939321161, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.popularity),movie.original_language))", "inferred_question": "How many original languages of movies with a budget of more than 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.7610581346489198, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), language.name),movie.original_language))", "inferred_question": "How many original languages of movies with a budget of more than 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.7679642504663207, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of more than 140000000 dollars?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.7706384171433456, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5541765020689553, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),genre.name))", "inferred_question": "How many names of movies with a budget of more than 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.7823908767131798, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,>,140000000), movie.original_language),movie.original_language))", "inferred_question": "-"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.7828160633034713, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5541765020689553, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),language.name))", "inferred_question": "How many names of movies with a budget of more than 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.7933351835636131, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,>,140000000), movie.original_language),movie.original_language))", "inferred_question": "-"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.8052477197888948, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.4294818409334985, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,<,140000000), movie.original_language),movie.original_language))", "inferred_question": "How many original languages of movies with a budget of less than 140000000 dollars are there?"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "score": -0.8109454950717918, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7841174845017431, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,140000000), movie.original_language),movie.original_language))", "inferred_question": "How many original languages of movies with a revenue of more than 140000000 dollars are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 5, "beams": [{"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.06796742811296412, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.19119812114094625, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": true, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Paramount Pictures), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.195720290714685, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": true, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.34661788151711004, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.title),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.3529182872807766, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_average),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.3688190978528254, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Paramount Pictures), movie.vote_count),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.37080930004091467, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id),merge(getData(movie),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.3835382910186351, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(merge(merge(filter(getData(company),company.name,=,Paramount Pictures),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.38637343172319866, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.runtime),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.391010342281424, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.42377469452832134, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(merge(getData(production_company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.4241814109593459, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.8766960180251875, "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_average)", "inferred_question": "What is the average vote average of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.426528909887742, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.3620277469426788, "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.4365584199539986, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),movie.title,movie.id), movie.vote_count),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "score": -0.4366895198050821, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9186736561837334, "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.movie_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_count)", "inferred_question": "What is the average vote count of all movies which were produced by companies whose name is Paramount Pictures?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 6, "beams": [{"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.009684334618214052, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of less than 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.4246315202835831, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7298521958455985, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,83), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of at most 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.7800406408423441, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.44044033955075335, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),language.name))", "inferred_question": "What are the names of movies with a runtime of less than 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.7974233768109116, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.8337933950565934, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,83), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.8187492986835423, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.popularity),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of less than 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.8191670118758339, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7824299056022113, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,83), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of less than 83?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.832499255768198, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of less than 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.8454513690594467, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5872601457102441, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,83), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of more than 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.8653875184172648, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.44044033955075335, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.title))", "inferred_question": "What are the names of movies with a runtime of less than 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.8679513526076335, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.2553411483674327, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of less than 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.875850219737913, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.2748619372288784, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.budget))", "inferred_question": "What are the budgets of movies with a runtime of less than 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.8759216567195836, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.budget),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of less than 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.8824902673877659, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.revenue),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of less than 83 minutes?"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.8880945383498329, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<,83), movie.original_language),movie.original_language))", "inferred_question": "-"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "score": -0.8937251708630356, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,83), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime other than 83 minutes?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 7, "beams": [{"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.13551074213319225, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.12331625525463186, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.name),person.name))", "inferred_question": "What are the names of people who were deceased in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.22920221037202282, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": true, "beam_nubia_score": 0.7205047648728018, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.name),person.name))", "inferred_question": "What are the names of people who were born in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.34074336237245006, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.1567071891188051, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.name),person.birth_place))", "inferred_question": "What are the birth places of people who were deceased in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.3765719546281616, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.12331625525463186, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.birth_day),person.name))", "inferred_question": "What are the names of people who were deceased in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.43443483061128063, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.4802783509305921, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.name),person.birth_place))", "inferred_question": "What are the birth places of people who were born in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.4645777339392225, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.16177927462545816, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.name),person.birth_day))", "inferred_question": "What are the birth days of people who were deceased in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.4702634228669922, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7205047648728018, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.birth_day),person.name))", "inferred_question": "What are the names of people who were born in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.4971692575418274, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.12331625525463186, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.birth_place),person.name))", "inferred_question": "What are the names of people who were deceased in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.5178052926712553, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.27940782593046776, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Zehner, Saskatchewan), person.name),person.name))", "inferred_question": "What are the names of people whose gender is Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.5412245387487928, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.08949391948591967, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.name),person.death_day))", "inferred_question": "What are the death days of people who were deceased in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.5582692021780531, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.47003251206857966, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.name),person.birth_day))", "inferred_question": "What are the birth days of people who were born in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.5818045748674194, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.1567071891188051, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.birth_day),person.birth_place))", "inferred_question": "What are the birth places of people who were deceased in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.590860725780658, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7205047648728018, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.birth_place),person.name))", "inferred_question": "What are the names of people who were born in Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.6283712828808348, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.4184723148326863, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Zehner, Saskatchewan), person.name),person.name))", "inferred_question": "What are the names of people whose name is Zehner, Saskatchewan?"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "score": -0.6349160069876234, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.18204449128293887, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.name),person.death_day))", "inferred_question": "What are the death days of people who were born in Zehner, Saskatchewan?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 8, "beams": [{"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.15431266661645607, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.44301932135122557, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "inferred_question": "Are there any names of genres comprising movies whose original language is ps?"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.23529421829443922, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.44301932135122557, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "Are there any names of genres comprising movies whose original language is ps?"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.2425593842412505, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.5979438303937642, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),language.name,=,ps), genre.name),genre.name))", "inferred_question": "Are there any names of genres comprising movies?"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.2907538030691385, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(movie),language.name,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.2929914176747494, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(language),language.name,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.31691573359761777, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.2661684273108279, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),genre.name,=,ps), genre.name),genre.name))", "inferred_question": "Are there any names of genres whose name is ps comprising movies?"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.3409440343208992, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.33317157342542403, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,!=,ps), genre.name),genre.name))", "inferred_question": "Are there any names of genres comprising movies whose original language is not ps?"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.3618591756647953, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,ps),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.37006834945157985, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(movie),language.name,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),language.name,=,ps), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.37230596405719074, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(language),language.name,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),language.name,=,ps), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.387001467540257, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.44301932135122557, "inferred_code": "isEmpty(distinct(extractValues(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps),genre.name), genre.name))", "inferred_question": "Are there any names of genres comprising movies whose original language is ps?"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.38788337063659567, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,<,ps), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.3930868860828748, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.39728535301525053, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.1792005169209001, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(movie),movie.original_language,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "inferred_question": "Are there any names of genres comprising movies whose original language is ps and whose original language is ps?"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "score": -0.4061200947386622, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.44301932135122557, "inferred_code": "isEmpty(distinct(extractValues(merge(merge(filter(getData(movie),movie.original_language,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),genre.name), genre.name))", "inferred_question": "Are there any names of genres comprising movies whose original language is ps?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 9, "beams": [{"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.022315082363345073, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.7548078986646287, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose original language is nl were produced are there?"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.29303575660004666, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.7548078986646287, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,=,nl),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose original language is nl were produced are there?"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.30355270672958967, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.7548078986646287, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,nl), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose original language is nl were produced are there?"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.32947824557097555, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7548078986646287, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose original language is nl were produced are there?"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.3824491406610801, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),person.birth_place))", "inferred_question": "-"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.38335044413543584, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),production_country.iso_3166_1))", "inferred_question": "-"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.38992608578230564, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),oscar.category))", "inferred_question": "-"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.3913332405597749, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7506586609577082, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),movie.status))", "inferred_question": "How many statuses of movies whose original language is nl which were produced in countries are there?"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.39680594526166335, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7548078986646287, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), movie.status),country.name))", "inferred_question": "How many names of countries in which movies whose original language is nl were produced are there?"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.39902760210585103, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.7548078986646287, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose original language is nl were produced are there?"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.4020129300626835, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),oscar.sub_category))", "inferred_question": "-"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.4172345809092575, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(oscar_winner),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.4177165009328591, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7548078986646287, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),oscar_winner.oscar_id,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose original language is nl were produced are there?"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.42034516851361325, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.6254050514136265, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose original language is nl were produced in which those movies were produced are there?"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "score": -0.42494745482031016, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),production_country.movie_id))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 10, "beams": [{"orig_question": "What are the birthdays of all non male persons?", "score": -0.07930691393994493, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": true, "beam_nubia_score": 0.554598467372711, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people whose gender is not m?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.22318978088878794, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.500523739222056, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,m), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people whose name is not m?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.5136287174464087, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,>,m), person.birth_day),person.birth_day))", "inferred_question": "-"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.5323682559246663, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": true, "beam_nubia_score": 0.554598467372711, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.birth_day), person.birth_day))", "inferred_question": "What are the birth days of people whose gender is not m?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.6538975892181043, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.500523739222056, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,!=,m),person.birth_day), person.birth_day))", "inferred_question": "What are the birth days of people whose name is not m?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.6575115843952517, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,>,m), person.birth_day),person.birth_day))", "inferred_question": "-"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.6590236143019865, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.554598467372711, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_day),person.birth_day))", "inferred_question": "What are the birth days of people whose gender is not m?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.6621767826654832, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.5857586706949229, "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.popularity,!=,m), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.685519544807903, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.19465598165791964, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),movie.release_date))", "inferred_question": "What are the release dates of people whose gender is not m?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.6930909104921739, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.4885986794649402, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,m), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were not born on m?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.7172280833401601, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.12314702479370299, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people whose gender is not m?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.7255428097487311, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,>=,m), person.birth_day),person.birth_day))", "inferred_question": "-"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.7606199643851141, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.3067052420363505, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people whose gender is m?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.7793151423611562, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.09148881547285959, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),movie.runtime))", "inferred_question": "What are the runtimes of people whose gender is not m?"}, {"orig_question": "What are the birthdays of all non male persons?", "score": -0.801475019827194, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.554598467372711, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), movie.runtime),person.birth_day))", "inferred_question": "What are the birth days of people whose gender is not m?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 11, "beams": [{"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.04005298057211973, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.8350900207953827, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a budget other than 17500000 dollars?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.23351513784483388, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.5095903723753377, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies whose original language is not 17500000?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.25491054276318625, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6791956906887981, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies whose name is not 17500000?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.27679278481635394, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.5458311061243865, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),genre.name,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres whose name is not 17500000 comprising movies?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.2805521144842239, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7157524970125723, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies who were not released on 17500000?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.30511962215522725, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.8350900207953827, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a budget other than 17500000 dollars?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.3099583788365776, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.8350900207953827, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),genre.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a budget other than 17500000 dollars?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.3453616407664131, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.3591128128741991, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),person.death_place))", "inferred_question": "-"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.3741757521628297, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.5225805518739282, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,>,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a budget of more than 17500000 dollars?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.3836409277249537, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6548930170971402, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.revenue,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a revenue other than 17500000 dollars?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.3943649186451461, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.37729970336019303, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),has_genre.genre_id,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.41672706272313714, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.8350900207953827, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),language.iso_639_1,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a budget other than 17500000 dollars?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.41851805373640544, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.8350900207953827, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,has_genre.movie_id),movie.budget,!=,17500000), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a budget other than 17500000 dollars?"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "score": -0.4236447247403051, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.8350900207953827, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), person.death_place),genre.name))", "inferred_question": "What are the names of genres comprising movies with a budget other than 17500000 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 12, "beams": [{"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.0935490712581668, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 0.928149901103808, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of at most 5.3?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.09997575581655838, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of less than 5.3?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.5997452314181705, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7356717894611953, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of at most 5.3 in which languages is spoken?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.6107486889690144, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7489374654418073, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,5.3), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of less than 5.3 in which languages is spoken?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.6388907194195781, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.9303079679754769, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.3), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of 5.3?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.6491075118010895, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7489374654418073, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of less than 5.3 in which languages is spoken?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.6601304088138374, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7489374654418073, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of less than 5.3 in which languages is spoken?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.7296135363706269, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "inferred_question": "-"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.7307220889779273, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5800558495314156, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),language.name))", "inferred_question": "What are the names of movies with a vote average of at most 5.3?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.7371487735363189, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5862679670665191, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.original_language),language.name))", "inferred_question": "What are the names of movies with a vote average of less than 5.3?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.7406364378135166, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "inferred_question": "-"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.7688302159367595, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.8835468326547067, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,5.3), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average other than 5.3?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.820534906728426, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.8921857881884735, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,5.3), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote count of at most 5.3?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.8269615912868176, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,5.3), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote count of less than 5.3?"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "score": -0.840333594736876, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.928149901103808, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of at most 5.3?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 13, "beams": [{"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.08763003838248551, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": true, "beam_nubia_score": 0.9842640529858346, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.40913319517858326, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,6.2), movie.release_date),movie.release_date))", "inferred_question": "-"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.42316699703224003, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.835863265482138, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),person.birth_day))", "inferred_question": "What are the birth days of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.42574849096126854, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9842640529858346, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.budget),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.4439080294687301, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9842640529858346, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.runtime),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.4511542257387191, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9842640529858346, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.title),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.4672836728859693, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.19651387377404272, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.5355558332521468, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9842640529858346, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), person.birth_day),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.5532162257004529, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.6645244389490426, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.5633136013057083, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9409249053096163, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.2), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of at most 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.5863645665813237, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.8126572430824996, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,6.2), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.6118247576523572, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.27677843962616, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.6398552891332656, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9842640529858346, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.popularity),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.6651195522863418, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9842640529858346, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), crew.movie_id),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of at least 6.2?"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "score": -0.6735917564947158, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.9842640529858346, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), person.birth_place),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of at least 6.2?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 14, "beams": [{"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.15296004846823053, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.9144032968753255, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.2805344481021835, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.30219469132320026, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.3395234908201489, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who worked in movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.34667225112217265, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.3611837340411656, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who worked in movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.3675172995336082, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,crew.movie_id),getData(person),oscar_winner.person_id,person.id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.37394706539360906, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who starred in movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.37733811737959866, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.3826113239391747, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.3868561030237582, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.39422385401166266, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.40331604292813283, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.40427153725673476, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "score": -0.41068381274413956, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6993190843763402, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who won oscars for their contribution to movies with a vote average of more than 2.3?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 15, "beams": [{"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.22070212121575286, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6899121551140202, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies in which languages is spoken with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.22548883396076588, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6899121551140202, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies in which languages is spoken with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.22823348963624265, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6899121551140202, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies in which languages is spoken with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.2502794361218859, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 0.8280531333535089, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.26987756591466616, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6899121551140202, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,spoken_language.iso_639_1), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies in which languages is spoken with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.2938952097332114, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6899121551140202, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies in which languages is spoken with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.3033659872798123, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6899121551140202, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies in which languages is spoken with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.31273685100119625, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 0.8280531333535089, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.3172153206362696, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 0.8280531333535089, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.3204523804934339, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(spoken_language),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "inferred_question": "-"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.3293878012889554, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6899121551140202, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies in which languages is spoken with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.32957034321697576, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "inferred_question": "-"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.33515918673912415, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6899121551140202, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies in which languages is spoken with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.35397700887716443, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6899121551140202, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies in which languages is spoken with keywords whose name is suicide bombing?"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "score": -0.37429193167767333, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6899121551140202, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_keyword.keyword_id),keyword.name,=,suicide bombing), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies in which languages is spoken with keywords whose name is suicide bombing?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 16, "beams": [{"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.10471069468076877, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,es), country.name),country.name))", "inferred_question": "What are the names of countries in which movies whose original language is es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.11361049179595305, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "What are the names of countries in which movies whose original language is es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.11706304992934938, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "inferred_question": "What are the names of countries in which movies whose original language is es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.2502751570148942, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,es), country.name),country.name))", "inferred_question": "What are the names of countries in which movies whose original language is es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.369623422064878, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.732189992437881, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_average,=,es), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a vote average of es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.400300560344201, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,has_genre.movie_id),movie.original_language,=,es), country.name),country.name))", "inferred_question": "What are the names of countries in which movies whose original language is es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.40042304490270725, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,spoken_language.movie_id),movie.original_language,=,es), country.name),country.name))", "inferred_question": "What are the names of countries in which movies whose original language is es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.4118910354860672, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,es), country.name),production_country.iso_3166_1))", "inferred_question": "-"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.41635252323601557, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id),movie.original_language,=,es), country.name),country.name))", "inferred_question": "What are the names of countries in which movies whose original language is es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.4222150013281442, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7671450240102947, "inferred_code": "done(extractValues(distinct(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "inferred_question": "What are the names of countries in which movies were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.4256911911171762, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.original_language,=,es), country.name),country.name))", "inferred_question": "What are the names of countries in which movies whose original language is es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.4302787429801474, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.9093347603250951, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,=,es), country.name),country.name))", "inferred_question": "What are the names of countries in which movies whose name is es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.43254335319037457, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),production_country.iso_3166_1))", "inferred_question": "-"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.4376344085414168, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.8403934837421553, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,es), country.name),country.name))", "inferred_question": "What are the names of countries in which movies whose status is es were produced?"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "score": -0.4465389598887221, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 17, "beams": [{"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.35690918030715146, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.40132730967480085, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4282756535918844, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),genre.name,=,My Lucky Star), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4309211127249874, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.death_day),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4414390754739597, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.name,=,My Lucky Star), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4416178892845424, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.death_day))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4423218077941901, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,=,My Lucky Star), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4505276668687468, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.2420009754144984, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,My Lucky Star), person.name),person.name))", "inferred_question": "What are the names of people whose name is My Lucky Star who won oscars for their contribution to movies?"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4550124360907291, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4667064530588388, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.18377127777773294, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.name))", "inferred_question": "What are the names of people who won oscars for their contribution to movies?"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4723577434190109, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.death_day,=,My Lucky Star), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4726937829595338, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),genre.name,=,My Lucky Star), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.47291212470968796, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.oscar_id,person.id),language.name,=,My Lucky Star), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.4753391845007944, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.death_day),person.name))", "inferred_question": "-"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "score": -0.48585714724976664, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),person.name,=,My Lucky Star), person.name),person.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 18, "beams": [{"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.028735502377305648, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9377238502002472, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose name is Tiny Furniture?"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.5269851754051429, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9377238502002472, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose name is Tiny Furniture?"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.6302677696899674, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9282536215943907, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies whose name is Tiny Furniture?"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.6366892073667931, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9377238502002472, "inferred_code": "avg(filter(getData(movie),movie.title,=,Tiny Furniture),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose name is Tiny Furniture?"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.6973820518807942, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,=,Tiny Furniture),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.714785653696179, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.title,=,Tiny Furniture), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.7155543133339961, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": true, "beam_nubia_score": 0.9424375174998479, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies whose name is Tiny Furniture?"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.7408080236232926, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,=,Tiny Furniture),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,oscar_winner.movie_id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.7497091234129849, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,=,Tiny Furniture),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.757997088943483, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.7399753901456964, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies whose name is Tiny Furniture?"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.7855022259748576, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,=,Tiny Furniture),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,oscar_nominee.movie_id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.8158318447435696, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(filter(getData(movie),movie.title,>=,Tiny Furniture),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.8328990505342472, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.35313809356176573, "inferred_code": "avg(distinct(filter(getData(movie),company.name,=,Tiny Furniture), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies?"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.8720786023232687, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.6591751553477102, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies whose name is Tiny Furniture?"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "score": -0.8749077851675463, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.5504587864589154, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.id),oscar.year)", "inferred_question": "What is the average year of all movies whose name is Tiny Furniture?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 19, "beams": [{"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.08949618910660598, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.4700774605207756, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies for which people won oscars whose sub-category is special achievement award (sound effects editing)?"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.1752122001612356, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.23739071638307993, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(cast),movie.id,movie.id),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.24251522394322228, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.4498602673200057, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies starring people for which those people won oscars whose sub-category is special achievement award (sound effects editing)?"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.26017986893393397, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.46874500138051167, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,Castle Rock, Colorado), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies for which people won oscars whose category is Castle Rock, Colorado?"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.27343646025166407, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),movie.id,cast.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.2745971195109622, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.277865661804286, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),movie.id,movie.id),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.2920226597004731, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(movie),oscar_winner.person_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.2955744821653098, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.33064602223577483, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.47073551690043536, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.number,=,Castle Rock, Colorado), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies for which people won oscars with a number of Castle Rock, Colorado?"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.33071794995464016, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,cast.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.3319870272159137, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.6577674875193574, "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)),oscar.category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies for which people won oscars whose sub-category is special achievement award (sound effects editing) and whose category is special achievement award (sound effects editing)?"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.35746424797344417, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.4700774605207756, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies for which people won oscars whose sub-category is special achievement award (sound effects editing)?"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "score": -0.37366533390997736, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,<,special achievement award (sound effects editing)), movie.budget),movie.budget))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 20, "beams": [{"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.07904163209054305, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.8212860247312209, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime other than 119 minutes?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.1017128746933558, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.8212860247312209, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime other than 119 minutes?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.1985626112548777, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.8212860247312209, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,!=,119), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime other than 119 minutes?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.24633310706320702, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.7647495262063667, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a runtime other than 119 minutes?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.2925960392962849, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5452175700199227, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>=,119), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime of at least 119 minutes?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.3778617580639171, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.7647495262063667, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a runtime other than 119 minutes?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.38269370891179466, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5937105477231571, "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119),movie.title,!=,119), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime other than 119 minutes and whose name is not 119?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.39733503931417063, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5452175700199227, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,>=,119), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime of at least 119 minutes?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.4139840667646615, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5452175700199227, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime of at least 119 minutes?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.41412470016667813, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.8212860247312209, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,!=,119),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime other than 119 minutes?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.43375955998068033, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),person.death_place))", "inferred_question": "-"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.43645709099965874, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),person.birth_place))", "inferred_question": "-"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.43847873182813274, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.8212860247312209, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.runtime,!=,119),getData(company),production_company.company_id,company.id), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime other than 119 minutes?"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.4453119830345067, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),person.death_place))", "inferred_question": "-"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "score": -0.45363151391728396, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.4711542489908819, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,=,119), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime of 119 minutes?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 21, "beams": [{"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.018838322888768744, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": true, "beam_nubia_score": 0.9479119027912204, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies who were released on 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.44645532796130283, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.6615268288426224, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,1984-05-01), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies whose status is 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.5080948157046805, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5824484339709698, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,1984-05-01), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity of 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.6230790267509292, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9479119027912204, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), person.death_day),movie.revenue))", "inferred_question": "What are the revenues of movies who were released on 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.6371099931930075, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.44011700768749806, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,1984-05-01), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.6384020922050695, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.4515393513522462, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies who were released on 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.6557830820602248, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9479119027912204, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies who were released on 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.6904365219452302, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.27455140576326587, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,1984-05-01), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies who were not released on 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.7397995469436864, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.2927984887499251, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies who were released on 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.7527691600189428, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.565005012615281, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.budget))", "inferred_question": "What are the budgets of movies who were released on 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.7576586482391576, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.2031814543512881, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.original_language))", "inferred_question": "What are the original languages of movies who were released on 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.7626782533989171, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.20684158271758712, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),cast.person_id))", "inferred_question": "What are the person_ids of movies who were released on 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.7654923595764558, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.4747491240592667, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1984-05-01), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies who were released before 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.7839138386116247, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.18150591307908248, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),person.death_day))", "inferred_question": "What are the death days of movies who were released on 1984-05-01?"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "score": -0.7858855523445527, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.39787903749011444, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1984-05-01), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies who were released after 1984-05-01?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 22, "beams": [{"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.15291656603981363, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.19253974095549775, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.2098161412718713, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.537704493158971, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.death_day),person.name))", "inferred_question": "What are the names of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.23100943426429144, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.19253974095549775, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.name),person.death_day))", "inferred_question": "What are the death days of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.23408080722316107, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.1899823072281246, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.death_day),person.death_place))", "inferred_question": "What are the death places of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.28551354658358497, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.19253974095549775, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,oscar.id),oscar.category,=,documentary (short subject)), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.2879090094963491, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.537704493158971, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.name),person.name))", "inferred_question": "What are the names of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.31217367544763885, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.1899823072281246, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.3212745731920955, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.19253974095549775, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.32477870122309577, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.19253974095549775, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.oscar_id,person.id),oscar.category,=,documentary (short subject)), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.3424131218156426, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.537704493158971, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,oscar.id),oscar.category,=,documentary (short subject)), person.death_day),person.name))", "inferred_question": "What are the names of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.3566525713410155, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.19253974095549775, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.3594487500542208, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.19253974095549775, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), movie.revenue),person.death_day))", "inferred_question": "What are the death days of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.3636064148080628, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.19253974095549775, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,oscar.id),oscar.category,=,documentary (short subject)), person.name),person.death_day))", "inferred_question": "What are the death days of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.3666777877669324, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.1899823072281246, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,oscar.id),oscar.category,=,documentary (short subject)), person.death_day),person.death_place))", "inferred_question": "What are the death places of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "score": -0.37817414842415314, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.537704493158971, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.birth_day),person.name))", "inferred_question": "What are the names of people who won oscars whose category is documentary (short subject) for their contribution to movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 23, "beams": [{"orig_question": "What is gender of Mark Tallman?", "score": -0.05810669828497339, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "inferred_question": "What are the genders of people whose name is Mark Tallman?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.255039433206548, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9201280128494204, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Mark Tallman), person.gender),person.gender))", "inferred_question": "What are the genders of people whose gender is Mark Tallman?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.5063700933969812, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.birth_place),person.gender))", "inferred_question": "What are the genders of people whose name is Mark Tallman?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.5964268690004246, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.7390754187849661, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Mark Tallman), person.gender),person.gender))", "inferred_question": "What are the genders of people who were born in Mark Tallman?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.6245963540422963, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.10253160959729501, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Mark Tallman), person.gender),person.gender))", "inferred_question": "What are the genders of movies?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.6276432370296762, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Mark Tallman),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.6337601386039751, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.18640287310330483, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.birth_place))", "inferred_question": "What are the birth places of people whose name is Mark Tallman?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.6427330022706883, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.46562550968457095, "inferred_code": "done(extractValues(distinct(filter(getData(person),country.name,=,Mark Tallman), person.gender),person.gender))", "inferred_question": "What are the genders of people?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.6566647366508236, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Mark Tallman),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.6796698232210474, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.birth_day),person.gender))", "inferred_question": "What are the genders of people whose name is Mark Tallman?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.6951539760484593, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.3704792390088033, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Mark Tallman), person.gender),person.gender))", "inferred_question": "What are the genders of people who were deceased in Mark Tallman?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.7033028283185558, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9201280128494204, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Mark Tallman), person.birth_place),person.gender))", "inferred_question": "What are the genders of people whose gender is Mark Tallman?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.7063733182876604, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.1593128876657488, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.death_place))", "inferred_question": "What are the death places of people whose name is Mark Tallman?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.7285136424034135, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.16350602204393871, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),movie.release_date))", "inferred_question": "What are the release dates of people whose name is Mark Tallman?"}, {"orig_question": "What is gender of Mark Tallman?", "score": -0.754042888249387, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.6333057031438806, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Mark Tallman), person.gender),person.gender))", "inferred_question": "What are the genders of people who were born on Mark Tallman?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 24, "beams": [{"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.1028199951868689, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.6277078120368469, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "What are the names of people who were nominated for oscars for their contribution to movies whose original language is hi?"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.22065195018281808, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(language),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.2536382095739222, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(movie),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.2787471198816416, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.6277078120368469, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.oscar_id,person.id), person.name),person.name))", "inferred_question": "What are the names of people who were nominated for oscars for their contribution to movies whose original language is hi?"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.279065984870219, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),language.name,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.2913503060407458, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.6277078120368469, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.movie_id,person.id), person.name),person.name))", "inferred_question": "What are the names of people who were nominated for oscars for their contribution to movies whose original language is hi?"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.29830543764721096, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.6277078120368469, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,hi),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "What are the names of people who were nominated for oscars for their contribution to movies whose original language is hi?"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.3051274808654065, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3457856023038477, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "What are the names of people who were nominated for oscars for their contribution to movies with a popularity of hi?"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.3172141263431743, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.32453258539374835, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,<=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.3247212646973291, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.6277078120368469, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,hi),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.name),person.name))", "inferred_question": "What are the names of people who were nominated for oscars for their contribution to movies whose original language is hi?"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.3302300904386632, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3153431493904042, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "What are the names of people who were nominated for oscars for their contribution to movies with a revenue of hi dollars?"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.3531117655436573, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.40844576631875884, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "What are the names of people who were nominated for oscars for their contribution to movies whose homepage is hi?"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.37552011268389124, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),filter(getData(language),language.name,=,hi),oscar_nominee.person_id,person.id), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "score": -0.3800726946281291, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),language.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 25, "beams": [{"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.1681187994805844, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.49809977479106105, "inferred_code": "sum(distinct(filter(getData(person),person.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all people whose name is not Leehom Wang?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.24621995341210937, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.14792470515037637, "inferred_code": "sum(distinct(filter(getData(person),language.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all people?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.40329324805985917, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": true, "beam_nubia_score": 0.8958240026253232, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all movies for which people whose name is not Leehom Wang were nominated for oscars?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.4521368181750198, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.8958240026253232, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all movies for which people whose name is not Leehom Wang were nominated for oscars?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.45359625144982996, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.6329041098075558, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),language.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all movies for which people were nominated for oscars?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.4685912291911305, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.35833665794207237, "inferred_code": "sum(distinct(filter(getData(oscar),person.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all oscars?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.4812853029545378, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.2892886829659077, "inferred_code": "sum(distinct(filter(getData(person),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all people who were not deceased on Leehom Wang?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.4912646202347632, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.6329041098075558, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),language.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all movies for which people were nominated for oscars?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.4964476888674691, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": true, "beam_nubia_score": 0.8958240026253232, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all movies for which people whose name is not Leehom Wang were nominated for oscars?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.5024398217067686, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.6329041098075558, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id),language.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all movies for which people were nominated for oscars?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.515265463664433, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.3237504158995109, "inferred_code": "sum(distinct(filter(getData(person),person.gender,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all people whose gender is not Leehom Wang?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.523558698623307, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.8958240026253232, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all movies for which people whose name is not Leehom Wang were nominated for oscars?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.5461697763932133, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.39979814162405714, "inferred_code": "sum(distinct(filter(getData(person),person.name,=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all people whose name is Leehom Wang?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.5466923831226554, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.35833665794207237, "inferred_code": "sum(distinct(filter(getData(oscar),language.name,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all oscars?"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "score": -0.5480540305916303, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.31954237006711095, "inferred_code": "sum(distinct(filter(getData(person),person.death_place,!=,Leehom Wang), movie.id),movie.budget)", "inferred_question": "What is the total budget of all people who were not deceased in Leehom Wang?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 26, "beams": [{"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.07522798507793006, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6986899693272373, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born in London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.16848098436288203, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5890587437766902, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people whose name is London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.21000920380699803, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5141778336573015, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people whose gender is London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.24563413535407727, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.654470219298382, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born on London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.25600881845927026, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4206852299018651, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased in London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.301185456108799, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6875044056269053, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "inferred_question": "What is the average name of all movies for which people who were born in London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.30631520868699924, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6986899693272373, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_place,=,London, England,),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born in London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.3377782657342736, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),oscar.category,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.39860981768749804, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),country.name,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.4021784691999864, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6079204550956423, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "inferred_question": "What is the average name of all movies for which people whose name is London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.4076860612779104, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),crew.person_id,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.42254596594201327, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6600217621980209, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "inferred_question": "What is the average name of all movies for which people who were born on London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.4324811491178686, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.31186611383141993, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.budget)", "inferred_question": "What is the average budget of all movies for which people who were born in London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.45287478099226014, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5141778336573015, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,London, England,),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people whose gender is London, England, were nominated for oscars?"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "score": -0.46608037989643303, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),company.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 27, "beams": [{"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.015942057998472592, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a revenue of at most 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.633558564059058, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,14661007), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a revenue of at least 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.6642298625629337, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.72827317325288, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,14661007), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a revenue of less than 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.7779328423166589, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,14661007), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a vote count of at most 14661007?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.7930456639114709, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.title),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a revenue of at most 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.7962957220697717, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9568558956567377, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,14661007), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a budget of at most 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.8077244089763553, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,14661007), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a revenue of 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.8102367759529443, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a revenue of at most 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.8105050429985567, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a revenue of at most 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.8315673709694238, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), keyword.name),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a revenue of at most 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.8338324828619079, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6355564298743243, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.title))", "inferred_question": "What are the names of movies with a revenue of at most 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.8424489737335534, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_average),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a revenue of at most 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.8614323335314111, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.7186919744856861, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_day,<=,14661007), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.8763039513105468, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.7827326480935521, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.revenue))", "inferred_question": "What are the revenues of movies with a revenue of at most 14661007 dollars?"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "score": -0.8872468218578433, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.4132547637153633, "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of people?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 28, "beams": [{"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.018738878945441684, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": true, "beam_nubia_score": 0.9143459752240406, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average other than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.5159583955828566, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7726238051169733, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "inferred_question": "How many budgets of movies with a vote average other than 6.1 are there?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.6458862799299823, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.9143459752240406, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.release_date),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average other than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.6684379550242738, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.8164960371298737, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of more than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.6793789046896563, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.9143459752240406, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.revenue),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average other than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.7322063452411385, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.1977314923976441, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.title))", "inferred_question": "What are the names of movies with a vote average other than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.7491104382170306, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.9143459752240406, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.original_language),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average other than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.7570890194583626, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.13541602267909947, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),person.death_place))", "inferred_question": "What are the death places of movies with a vote average other than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.7879426854742633, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.9143459752240406, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), person.death_place),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average other than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.7884309264445619, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.9635413100690975, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.1), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of less than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.7941368001593219, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.9143459752240406, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.title),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average other than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.8119740492511482, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.1087215344242144, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average other than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.8181541568446846, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.5242267247828487, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average other than 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.83777039969209, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7595705504256749, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.1), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of at least 6.1?"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "score": -0.8412206179309578, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.20748567358314407, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average other than 6.1?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 29, "beams": [{"orig_question": "What is the total duration of Mother and Child?", "score": -0.3663516153099416, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.057443656063677295, "inferred_code": "sum(distinct(filter(getData(movie),person.gender,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "What is the total number of all movies?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.3812357458717421, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.4460880536900792, "inferred_code": "sum(distinct(filter(getData(person),person.gender,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "What is the total number of all people whose gender is Mother and Child?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.451552663831617, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "What is the total number of all oscars which people whose name is Mother and Child won for their contribution to movies?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.4569015917448877, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "What is the total number of all oscars which people whose name is Mother and Child won for their contribution to movies?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.47503948534061075, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "-"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.4803884132538814, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "-"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.4883904126715993, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0810694148485025, "inferred_code": "sum(distinct(filter(getData(movie),person.gender,=,Mother and Child), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.4924317309882684, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "What is the total number of all oscars which people whose name is Mother and Child won for their contribution to movies?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.4977806589015391, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "What is the total number of all oscars which people whose name is Mother and Child won for their contribution to movies?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.5032745432333998, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5454946978219232, "inferred_code": "sum(distinct(filter(getData(person),person.gender,=,Mother and Child), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all people whose gender is Mother and Child?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.5071317098989887, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "What is the total number of all oscars which people whose name is Mother and Child won for their contribution to movies?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.5124806718389802, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "What is the total number of all oscars which people whose name is Mother and Child won for their contribution to movies?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.5134072602773635, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "What is the total number of all oscars which people whose name is Mother and Child won for their contribution to movies?"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.5159185615710543, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "-"}, {"orig_question": "What is the total duration of Mother and Child?", "score": -0.5388440508798321, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.36436228513880864, "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,Mother and Child), movie.id),oscar.number)", "inferred_question": "What is the total number of all movies whose original language is Mother and Child?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 30, "beams": [{"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.104078100902425, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5174647053794716, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,<,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a vote count of less than 2007-10-17?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.14910947263882562, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6573636042661772, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,=,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a vote count of 2007-10-17?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.25593279346332126, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,<,2007-10-17), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.26014934476855234, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5368516575855037, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,<=,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a vote count of at most 2007-10-17?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.2787971447759704, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,<,2007-10-17), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.28600860036369746, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6241921666970781, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),person.death_day,<,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.2873969713402384, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6241921666970781, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),keyword.name,<,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.3009641651997219, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,=,2007-10-17), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.323828516512371, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6558848484193367, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,=,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose original language is 2007-10-17?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.3310399721000981, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6241921666970781, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),person.death_day,=,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.33242834307663904, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6241921666970781, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),keyword.name,=,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.34025582759226447, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5447849328905825, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a revenue of less than 2007-10-17 dollars?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.3852871993286651, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6645090060298475, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,=,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a revenue of 2007-10-17 dollars?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.39527074522065925, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6241921666970781, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),person.death_place,<,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies?"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "score": -0.39615503695077803, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6241921666970781, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),language.name,<,2007-10-17), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 31, "beams": [{"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.184326507794137, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.20865507410971695, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.22640462049223148, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.2271439250620624, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.2514724913776423, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.26273489514265186, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.budget,<=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.2746570365172025, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.budget,<=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.2870634614582318, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),movie.budget,<=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.3027785740935872, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.35150657047763845, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_place,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "Are there any budgets of movies for which people who were deceased in 150000 were nominated for oscars?"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.3055523124105773, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),movie.budget,<=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.3140863513701788, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.32710714040916716, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.35150657047763845, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),person.death_place,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "Are there any budgets of movies for which people who were deceased in 150000 were nominated for oscars?"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.32988089700049184, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),movie.budget,<=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.3384149268229261, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.movie_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "score": -0.34559600049867994, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.35150657047763845, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),person.death_place,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "inferred_question": "Are there any budgets of movies for which people who were deceased in 150000 were nominated for oscars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 32, "beams": [{"orig_question": "Find the date of death of the male personalties.", "score": -0.26153524702385766, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.37995134204586467, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.2858736712296377, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.10260396215231415, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.29088981186941965, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": true, "beam_nubia_score": 0.37995134204586467, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "inferred_question": "What are the death days of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.3152282360751997, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.10260396215231415, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.birth_day))", "inferred_question": "What are the birth days of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.35394497698143823, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.3254247737461239, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.death_place))", "inferred_question": "What are the death places of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.37793775385216577, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.08781148191644772, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),movie.release_date))", "inferred_question": "What are the release dates of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.3832995418270002, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.3254247737461239, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_place))", "inferred_question": "What are the death places of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.40729231869772775, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.08781148191644772, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.release_date))", "inferred_question": "What are the release dates of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.4897923666794668, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.06459041248800335, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),movie.budget))", "inferred_question": "What are the budgets of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.5191469315250288, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.06459041248800335, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.budget))", "inferred_question": "What are the budgets of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.5349756676514517, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.06719990262909126, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),movie.revenue))", "inferred_question": "What are the revenues of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.5460176367123495, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.08676444909627645, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.gender))", "inferred_question": "What are the genders of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.5643302324970136, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.06719990262909126, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.revenue))", "inferred_question": "What are the revenues of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.5753722015579115, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.08676444909627645, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.gender))", "inferred_question": "What are the genders of people whose gender is m?"}, {"orig_question": "Find the date of death of the male personalties.", "score": -0.6035777229626547, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.1267912777102982, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),oscar_nominee.person_id))", "inferred_question": "What are the person_ids of people whose gender is m?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 33, "beams": [{"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.17637786538386216, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": true, "beam_nubia_score": 0.9559474846301176, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a popularity of at most 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.22510477334339302, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.48602297244805936, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,6.00342), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a popularity of less than 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.34913295426122554, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9373305462822666, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.00342), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a popularity of 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.3664219574934218, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9485400777724072, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with a popularity of at most 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.41514886545295265, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.4391088752847455, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,6.00342), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with a popularity of less than 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.5193591907874633, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.6044148190446997, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity of at most 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.5391770463707852, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9103715441260392, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.00342), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with a popularity of 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.5471469128748153, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9944126680769032, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,6.00342), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a popularity of at least 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.5678219439825578, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.5074424720320296, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,!=,6.00342), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a popularity other than 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.5680860987469941, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.393064257184764, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,6.00342), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity of less than 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.6461535793780762, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.96714169287802, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>,6.00342), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a popularity of more than 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.6547607437532861, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.7002406795100486, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.vote_average),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a popularity of at most 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.6749160357083958, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9559474846301176, "inferred_code": "avg(filter(getData(movie),movie.popularity,<=,6.00342),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a popularity of at most 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.6921142796648267, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.5953252189775965, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.00342), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity of 6.00342?"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "score": -0.6960604538035113, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.7002406795100486, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a popularity of at most 6.00342?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 34, "beams": [{"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.05683519467951541, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "How many names of keywords for movies with a runtime of at least 199 minutes for those movies are there?"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.20043512348091028, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.9477541074781759, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,<=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "How many names of keywords for movies with a runtime of at most 199 minutes for those movies are there?"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.27864757013225266, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,199),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "How many names of keywords for movies with a runtime of at least 199 minutes are there?"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.28955204745095886, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),company.name))", "inferred_question": "-"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.3049788548720845, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(merge(getData(movie),getData(movie),oscar_nominee.movie_id,movie.id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.30592725147916694, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.6657341762717006, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "How many names of keywords for movies with a runtime of at least 199 minutes for which people were nominated for oscars are there?"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.30648325219792505, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.30766902089252185, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.3088306813452878, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.3205181186474386, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),oscar.sub_category))", "inferred_question": "-"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.32282894838644, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,company.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "How many names of keywords for movies with a runtime of at least 199 minutes for those movies are there?"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.3408655845995666, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,oscar_nominee.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "How many names of keywords for movies with a runtime of at least 199 minutes for those movies are there?"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.3440094638002345, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),has_keyword.keyword_id))", "inferred_question": "-"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.34403710494456186, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "score": -0.34554369955030034, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(oscar),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 35, "beams": [{"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.08992526408509546, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": true, "beam_nubia_score": 0.8402746202655953, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose original language is not cs?"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.1010294375617331, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": true, "beam_nubia_score": 0.8402746202655953, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose original language is not cs?"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.2587510373756457, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": true, "beam_nubia_score": 0.8402746202655953, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,cs),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose original language is not cs?"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.2672390652034033, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.6294647666311683, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.title,!=,cs), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose name is not cs?"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.33478719574160665, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": true, "beam_nubia_score": 0.8402746202655953, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.original_language,!=,cs),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose original language is not cs?"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.35491055162924373, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.37254792881142124, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.8402746202655953, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,spoken_language.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose original language is not cs?"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.3893175486123563, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.40241484262329835, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(spoken_language),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.41186726602245716, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.8402746202655953, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose original language is not cs?"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.42061911647583006, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.8402746202655953, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,spoken_language.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose original language is not cs?"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.422424901497464, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.42567210569779235, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.8402746202655953, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,has_keyword.movie_id), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose original language is not cs?"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.4316143569444194, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.46262022277216697, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_average,!=,cs), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies with a vote average other than cs?"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "score": -0.4346700339349401, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.8402746202655953, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,oscar_nominee.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose original language is not cs?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 36, "beams": [{"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.11939422327002908, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.17326054814241967, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.18516862438362366, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.5452392754439163, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is Rainbow Film Company, The were produced?"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.21430036316382858, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.23388433748808413, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.23903494925601426, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.5452392754439163, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is Rainbow Film Company, The were produced?"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.24251672765509344, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.company_id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.2567435313531018, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.2681666880362192, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.iso_3166_1), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.27367764596194843, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(has_keyword),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.27912400392584125, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_country.iso_3166_1),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.2798467631623953, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.name), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.28007476427742317, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.5452392754439163, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.movie_id), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is Rainbow Film Company, The were produced?"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.2818938442918524, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(has_genre),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "score": -0.29638305252748404, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.company_id,production_country.iso_3166_1), country.name),country.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 37, "beams": [{"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.07177687090942034, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.128404565219436, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.24903912942435827, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.2973544057769938, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.runtime),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.3299601102836729, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<=,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.37186414109821136, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<,1962-03-17), movie.runtime),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.394020343719852, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.39882179530676864, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.3992354977071214, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5722676119645713, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were deceased before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.4196212364577042, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,person.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.42433400803030785, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5096094059057343, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people who were born before 1962-03-17 won oscars?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.4392836857930996, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.443473867192683, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,person.id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.4439845123562692, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies starring people who were born before 1962-03-17?"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "score": -0.4448486236946625, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born before 1962-03-17 working in them?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 38, "beams": [{"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.041850793171761325, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6342829510054395, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of more than 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.21559818368041306, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of less than 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.4771245894917229, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8366614595613311, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,185), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of at least 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.523891824293969, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,185), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime other than 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.5373137770184258, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,185), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of at most 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.7174613298811892, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6342829510054395, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of more than 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.7508264360913017, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,null,185), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.791579571839975, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.43988465140825406, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.vote_count),movie.title))", "inferred_question": "What are the names of movies with a runtime of more than 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.8547689495571831, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9651443280262234, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,185), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.8573068203368166, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6342829510054395, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.title),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of more than 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.8581986846365908, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6342829510054395, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), person.death_day),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of more than 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.8767004298824759, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5249721710085657, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,185), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a vote average of more than 185?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.8912087203898409, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of less than 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.9134268583693483, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6342829510054395, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.vote_average),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of more than 185 minutes?"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "score": -0.9143026148049103, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6075079401005333, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.vote_count),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a runtime of more than 185 minutes?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 39, "beams": [{"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.03427870350725956, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.8723057962799236, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of at most 64572262 dollars are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.23924993739975836, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.8723057962799236, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,64572262),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of at most 64572262 dollars are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.33843855158267455, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5054483926711486, "inferred_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(movie),movie.revenue,<=,64572262),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of at most 64572262 dollars and with a revenue of at most 64572262 dollars are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.35543336127478325, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.8723057962799236, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,oscar_nominee.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of at most 64572262 dollars are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.36445972050024056, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),person.birth_place))", "inferred_question": "-"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.3811964534447336, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.9092449130619639, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,>=,64572262), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of at least 64572262 dollars are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.38351692748690336, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.3942395716440103, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.39781366697995585, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6769475637499407, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<,64572262), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of less than 64572262 dollars are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.4115398054643702, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.8912687534500398, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,=,64572262), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of 64572262 dollars are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.41196316932824634, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.8723057962799236, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of at most 64572262 dollars are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.4179112053946718, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.7589745245499222, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(production_company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of at most 64572262 dollars which produced those movies are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.41868687904833607, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.8723057962799236, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), person.birth_place),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of at most 64572262 dollars are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.4362013293262494, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.7801973951515713, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),movie.title))", "inferred_question": "How many names of movies with a revenue of at most 64572262 dollars which were produced by companies are there?"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "score": -0.4362946648327708, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.8723057962799236, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,has_genre.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of at most 64572262 dollars are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 40, "beams": [{"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.03308423271664651, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of more than 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.2450362391609815, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,2998), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of at least 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.7371720445880783, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.7101224034510039, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a vote count of more than 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.740227872862306, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8251793523891552, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2998), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count other than 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.7698150647411239, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.7299353302348188, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.title))", "inferred_question": "What are the names of movies with a vote count of more than 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.7928418464798597, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.9509862380894488, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2998), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of at most 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.7982954926628736, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.4184140727542137, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,2998), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of less than 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.85580231872882, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.id),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of more than 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.856180248556484, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>,2998), movie.runtime),movie.runtime))", "inferred_question": "-"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.8593145224222098, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), person.birth_day),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of more than 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.8659745070108329, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.vote_average),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of more than 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.8797435708183912, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,2998), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.8911457605499891, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,null,2998), movie.runtime),movie.runtime))", "inferred_question": "-"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.8992458356151474, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.721713799177989, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a vote count of more than 2998?"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "score": -0.929611382780422, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6845676269543116, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,2998), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a revenue of more than 2998 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 41, "beams": [{"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.014917369917384349, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": true, "beam_nubia_score": 0.9611509663879054, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "inferred_question": "Are there any statuses of movies whose name is Topsy-Turvy?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.5035700760636246, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.9611509663879054, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.popularity),movie.status))", "inferred_question": "Are there any statuses of movies whose name is Topsy-Turvy?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.6398577529325848, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.5443807313062449, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "inferred_question": "Are there any statuses of movies who were released on Topsy-Turvy?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.7185898262396222, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.5358917406055004, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,=,Topsy-Turvy), movie.status),movie.status))", "inferred_question": "Are there any statuses of movies with a budget of Topsy-Turvy dollars?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.7208792616002029, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.4631402068082078, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.popularity))", "inferred_question": "Are there any popularities of movies whose name is Topsy-Turvy?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.7374396759405499, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.5765438740126656, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,=,Topsy-Turvy), movie.status),movie.status))", "inferred_question": "Are there any statuses of movies with a runtime of Topsy-Turvy minutes?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.7423572800908005, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.9611509663879054, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.release_date),movie.status))", "inferred_question": "Are there any statuses of movies whose name is Topsy-Turvy?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.7774437330517685, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.9611509663879054, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.vote_average),movie.status))", "inferred_question": "Are there any statuses of movies whose name is Topsy-Turvy?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.7972429059300339, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.9611509663879054, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.runtime),movie.status))", "inferred_question": "Are there any statuses of movies whose name is Topsy-Turvy?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.797363848585519, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.06065573423832904, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "inferred_question": "Are there any statuses of people?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.8104654293347267, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.8970067103698308, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "inferred_question": "What are the statuses of movies whose name is Topsy-Turvy?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.8216682858619606, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,<=,Topsy-Turvy), movie.status),movie.status))", "inferred_question": "-"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.8220796249661362, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.9611509663879054, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), country.name),movie.status))", "inferred_question": "Are there any statuses of movies whose name is Topsy-Turvy?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.8285523701779312, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.3741924383185137, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.vote_average))", "inferred_question": "Are there any vote averages of movies whose name is Topsy-Turvy?"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "score": -0.8298114586941665, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.3179120312368068, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),production_country.iso_3166_1))", "inferred_question": "Are there any iso_3166_1s of movies whose name is Topsy-Turvy?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 42, "beams": [{"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.12691921332474915, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.13063422828491014, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": true, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.1988681406396933, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": true, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,>,2006), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.22343925419946387, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": true, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.23180627540120197, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,>=,2006), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.26231820901873215, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.3504156829195074, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6109571821681441, "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,>,2006),oscar.year,>,2006), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 and who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.3577700789010048, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006),getData(person),oscar_winner.movie_id,person.id), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.358573397895616, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6109571821681441, "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,>=,2006),oscar.year,>,2006), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 and who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.3614850938611658, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006),getData(person),oscar_winner.movie_id,person.id), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.38879839686432305, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": true, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>,2006),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.41145211418554206, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.45105857581951403, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,!=,2006),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were not awarded on 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.4166746310634619, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006),getData(person),oscar_winner.oscar_id,person.id), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.41995429793416184, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006),getData(movie),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "score": -0.4203896550915692, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6268552101051674, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006),getData(person),oscar_winner.oscar_id,person.id), person.birth_day),person.birth_day))", "inferred_question": "Are there any birth days of people who won oscars who were awarded after 2006 for their contribution to movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 43, "beams": [{"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.14446559493715425, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.5322725284240984, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.21753212124715415, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.5286170082476042, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.title)", "inferred_question": "What is the total name of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.2498522961624303, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.4404319035834636, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.budget)", "inferred_question": "What is the total budget of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.3990560315951889, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9420858460114762, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "inferred_question": "What is the total vote average of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.40282087237058595, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.6703413672130807, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),oscar.number)", "inferred_question": "What is the total number of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.5154509147915656, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.6287827557858017, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.5422043128930631, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.7760002022056086, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.5511054502586473, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.3314998785947425, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.release_date)", "inferred_question": "What is the total release date of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.5819282346563156, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.6852616980378724, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),production_company.movie_id)", "inferred_question": "What is the total movie_id of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.6062709184814186, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.690051235503724, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.status)", "inferred_question": "What is the total status of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.6223438901548173, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.4239201261975628, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.homepage)", "inferred_question": "What is the total homepage of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.6928290991409392, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.6852616980378724, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),oscar_nominee.movie_id)", "inferred_question": "What is the total movie_id of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.7070157403824634, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.4900348465271255, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.7401022213955119, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.36108110015821415, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.tagline)", "inferred_question": "What is the total tag line of all movies whose status is Rumored?"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "score": -0.7626597354516595, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.6852616980378724, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),crew.movie_id)", "inferred_question": "What is the total movie_id of all movies whose status is Rumored?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 44, "beams": [{"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.23122598982403747, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.46556154649144277, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,=,Italiano), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies in which languages whose name is Italiano is spoken?"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.2600146732670858, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id),language.name,None,Italiano), None),None))", "inferred_question": "-"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.26287417904765065, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,None,Italiano), None),None))", "inferred_question": "-"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.2830850567035804, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.46556154649144277, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),language.name,=,Italiano), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies in which languages whose name is Italiano is spoken?"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.30803040808297033, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(distinct(extractValues(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,None,Italiano),None), None))", "inferred_question": "-"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.30928090324280016, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,=,Italiano), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.31205797247408956, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.15357452508472846, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Italiano),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),language.name,=,Italiano), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies in which languages whose name is Italiano and whose name is Italiano is spoken?"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.3170168085535559, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.46556154649144277, "inferred_code": "isEmpty(distinct(extractValues(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,=,Italiano),company.name), company.name))", "inferred_question": "Are there any names of companies which produced movies in which languages whose name is Italiano is spoken?"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.322409846869166, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.46556154649144277, "inferred_code": "isEmpty(distinct(extractValues(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),company.name), company.name))", "inferred_question": "Are there any names of companies which produced movies in which languages whose name is Italiano is spoken?"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.32309401010128735, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.46556154649144277, "inferred_code": "isEmpty(distinct(extractValues(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id),company.name), company.name))", "inferred_question": "Are there any names of companies which produced movies in which languages whose name is Italiano is spoken?"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.3354684195162175, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.48111915368220926, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),movie.original_language,=,Italiano), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose original language is Italiano in which languages is spoken?"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.3369611612737963, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.48111915368220926, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.original_language,=,Italiano), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose original language is Italiano in which languages is spoken?"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.3459466258412793, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.original_language,None,Italiano), None),None))", "inferred_question": "-"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.35351780034408337, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.46556154649144277, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id),language.name,=,Italiano), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies in which languages whose name is Italiano is spoken?"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "score": -0.354305906648065, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(distinct(extractValues(filter(merge(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,=,Italiano),company.name), company.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 45, "beams": [{"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.039119264729402026, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.22612941426729996, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,brain scan), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.30139148477132516, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.budget),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.314086750872486, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5665413239486827, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.vote_count))", "inferred_question": "How many vote counts of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.34879277660770336, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,keyword.id),keyword.name,=,brain scan), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.3514729414711065, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,has_keyword.keyword_id),keyword.name,=,brain scan), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.356862547512641, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.vote_count),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.37227543975566024, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.3877839514148055, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.budget))", "inferred_question": "How many budgets of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.37387585115951444, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), company.name),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.3764166260435758, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), oscar.number),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.38393701368835753, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.keyword_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.3879938512545211, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(keyword),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.3939144765804329, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.movie_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.40253438594624913, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(language),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "score": -0.40498850864252267, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6943503422241002, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),oscar.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is brain scan are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 46, "beams": [{"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.018534813683800166, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": true, "beam_nubia_score": 0.7568639336937839, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote average of 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.5406611097532732, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.4578610040693345, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average of 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.5998808873373491, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6036035017893955, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a vote average of 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.6013420523631794, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7258918033547022, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,2.6), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote average of at most 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.6161392630565388, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.5020562921460145, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2.6), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote average other than 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.6840986790157331, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.9751601961661464, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,2.6), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a popularity of 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.7115045917707903, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.3521594044788807, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.7145430738128198, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7568639336937839, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote average of 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.7179318965900165, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7945616241180734, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,2.6), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote average of at least 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.7281098069179279, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6076221767644355, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.6), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote average of less than 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.7662017526126874, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.4755920372038023, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,2.6), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies whose original language is 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.7947049868780596, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.28966906282963356, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.8010223092533124, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7764710767574913, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,2.6), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.8018863928991777, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7122217817089199, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.status))", "inferred_question": "What are the statuses of movies with a vote average of 2.6?"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "score": -0.8067280185896379, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6486773980171436, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.id))", "inferred_question": "What are the ids of movies with a vote average of 2.6?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 47, "beams": [{"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.025466109174885787, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": true, "beam_nubia_score": 0.9716209254435252, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.2830051216442371, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9716209254435252, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2007-06-22), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.5500541469227755, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.23466537818978028, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.5757979890477145, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.4663689741719039, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.budget))", "inferred_question": "What are the budgets of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.7167193279747153, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9716209254435252, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), person.death_day),movie.revenue))", "inferred_question": "What are the revenues of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.7348765120987082, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9716209254435252, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.vote_count),movie.revenue))", "inferred_question": "What are the revenues of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.7581802592758322, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9716209254435252, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.budget),movie.revenue))", "inferred_question": "What are the revenues of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.7717790743481601, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.19055002189712755, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),person.death_day))", "inferred_question": "What are the death days of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.8044938179809833, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.6580052474447107, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2007-06-22), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies who were released on 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.8075931593921268, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.23466537818978028, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2007-06-22), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.8333370015170658, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.4663689741719039, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2007-06-22), movie.revenue),movie.budget))", "inferred_question": "What are the budgets of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.8510641786415363, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.45996967681811396, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-06-22), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies who were released after 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.8626162549626315, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.41665489479235784, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies who were released before 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.8635271712701069, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5080209198015428, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,2007-06-22), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity of less than 2007-06-22?"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "score": -0.8676314279000508, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5420678421194198, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,<,2007-06-22), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 48, "beams": [{"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.06333613335430716, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": true, "beam_nubia_score": 0.8360651542182059, "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people whose name is not Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.17628419886622793, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.6199769785110036, "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people who were not deceased on Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.27322459208540323, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.8360651542182059, "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.popularity),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people whose name is not Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.2750654546919265, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.8360651542182059, "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people whose name is not Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.32346683396011133, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(person),oscar.year,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "inferred_question": "-"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.333067160176959, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(person),language.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "inferred_question": "-"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.3612999742549252, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.651110185391744, "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people who were not deceased in Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.3777747823836362, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(language),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "inferred_question": "-"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.3787272799014309, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.8360651542182059, "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),language.iso_639_1,oscar_nominee.person_id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people whose name is not Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.386172657597324, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.6199769785110036, "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.popularity),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people who were not deceased on Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.3880135202038473, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.6199769785110036, "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people who were not deceased on Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.3928379704513262, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.8360651542182059, "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.person_id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people whose name is not Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.39335241675628163, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.8360651542182059, "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.movie_id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people whose name is not Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.3954192987363429, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.5470912605279741, "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies for which people whose name is not Jim Pearson were nominated for oscars?"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "score": -0.41758446087933115, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.8360651542182059, "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.revenue),movie.popularity)", "inferred_question": "What is the total popularity of all movies for which people whose name is not Jim Pearson were nominated for oscars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 49, "beams": [{"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.020179756116704084, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.43600493589474354, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.38037362480881554, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.5181341163261095, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7954929610265059, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.5342979739798466, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of at least 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.5778119046153734, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.6836672417266527, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.3123664806043368, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.782228588257567, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.830345898839138, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.8014442011153733, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.9171106824732137, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.popularity))", "inferred_question": "Are there any popularities of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.803863632856519, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,738), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote average of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.8154262016905705, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.83049580256339, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,738), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count other than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.8232453457458178, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6519105122080828, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.id))", "inferred_question": "What are the ids of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.832081266111345, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.vote_average),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.8347239572467515, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.id),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.8408533326728502, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.19695832412557646, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote count of more than 738?"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "score": -0.8437394577922532, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.release_date),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of more than 738?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 50, "beams": [{"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.022987423428563105, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": true, "beam_nubia_score": 0.894349914526186, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies whose status is Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.5750628327340254, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.894349914526186, "inferred_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.vote_count)", "inferred_question": "What is the average vote count of all movies whose status is Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.6400114920210256, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.2955592961289034, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies whose status is Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.6604057193962306, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.815567896209233, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose status is Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.6777577508298983, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9398552419953597, "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,Rumored), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a vote average of Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.7098152333372598, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.8113428359734733, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,Rumored), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a popularity of Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.7716633111405552, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.6889515032434652, "inferred_code": "avg(distinct(filter(getData(movie),country.name,=,Rumored), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.7719846229307551, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.5894061591643183, "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,Rumored), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies whose original language is Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.8022018515777556, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,<,Rumored), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.8046738753468284, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.2409298255450255, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,!=,Rumored), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies whose status is not Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.823768678840752, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.39150278562607954, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies whose status is Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.8428277356111193, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.2180618567991659, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies whose status is Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.843666775250952, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,<=,Rumored), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.8451531857535696, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.859518270185488, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Rumored), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies whose name is Rumored?"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "score": -0.888036855026464, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.3461389218687819, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.title)", "inferred_question": "What is the average name of all movies whose status is Rumored?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 51, "beams": [{"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.08361037363647483, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of at least 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.11450235833763145, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8094381757109753, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,738), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of at most 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.6212106003367808, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of more than 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.6912821827863809, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.5473201289777685, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of at least 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.7032169174344745, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of at least 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.713377620180836, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.9057872179171524, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,738), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.7221741674875375, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.496566419810229, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,738), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of at most 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.7341089021356311, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8094381757109753, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,738), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of at most 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.75250530950143, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.vote_average),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of at least 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.7620490489935037, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.35464351638723746, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),person.gender))", "inferred_question": "What are the genders of movies with a vote count of at least 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.7833972942025866, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8094381757109753, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,738), movie.vote_average),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of at most 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.7929410336946603, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.3410732615823586, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,738), movie.popularity),person.gender))", "inferred_question": "What are the genders of movies with a vote count of at most 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.8152767120336648, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8575872426342099, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of at least 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.8207391797041055, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.2756682468088083, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote count of at least 738?"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "score": -0.8213116182887461, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.41645458257577583, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,738), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of less than 738?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 52, "beams": [{"orig_question": "What is the total runtime of unreleased movies?", "score": -0.1681836520842305, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.33494721840816033, "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,=,Released), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with a runtime of Released minutes?"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.20939493901182382, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.3692814470766861, "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,>=,Released), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with a runtime of at least Released minutes?"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.3235740940147704, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.34066651440085816, "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,>,Released), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with a runtime of more than Released minutes?"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.4158133147090223, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.36531195422354523, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Released), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies whose status is Released?"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.4237924949382794, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.25344742030144596, "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,Released), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with a vote average of Released?"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.4570246016366156, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,>=,Released), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.46500378186587277, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.2778406030824302, "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,>=,Released), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with a vote average of at least Released?"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.465599739069033, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.29927530526675494, "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,!=,Released), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with a runtime other than Released minutes?"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.5249837500431535, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.3187032905666075, "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Released), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies whose name is Released?"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.5661950369707467, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(getData(movie),movie.title,>=,Released), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.5712037566395621, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(getData(movie),movie.status,>,Released), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.5791829368688194, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.22954904093389006, "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,>,Released), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with a vote average of more than Released?"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.6298017788422843, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.305020488799137, "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,<=,Released), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with a runtime of at most Released minutes?"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.6803742081026255, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(getData(movie),movie.title,>,Released), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total runtime of unreleased movies?", "score": -0.7826956786098551, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.3692814470766861, "inferred_code": "sum(filter(getData(movie),movie.runtime,>=,Released),movie.runtime)", "inferred_question": "What is the total runtime of all movies with a runtime of at least Released minutes?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 53, "beams": [{"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.008348173752892762, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": true, "beam_nubia_score": 0.9799380018249647, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies whose original language is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.6257972783059813, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.510194741285549, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.title))", "inferred_question": "What are the names of movies whose original language is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.631883118127007, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.9799380018249647, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.release_date),movie.runtime))", "inferred_question": "What are the runtimes of movies whose original language is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.6672262019128539, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.3501652975913482, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose original language is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.6895917719812132, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.7107754344152, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.release_date))", "inferred_question": "What are the release dates of movies whose original language is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.710525069211144, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.9799380018249647, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), person.birth_day),movie.runtime))", "inferred_question": "What are the runtimes of movies whose original language is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.7230670785647817, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.9799380018249647, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.id),movie.runtime))", "inferred_question": "What are the runtimes of movies whose original language is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.793234248412773, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.30959281724651366, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,ja), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies whose original language is not ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.7984690999728628, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.9799380018249647, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.title),movie.runtime))", "inferred_question": "What are the runtimes of movies whose original language is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.8452347448910587, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5051451753086786, "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,=,ja), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.8492429784382693, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.4488953385425172, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,ja), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote average of ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.8714600137318484, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6256749287699594, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,ja), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies whose name is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.8735496467561461, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5281712560345697, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),person.birth_day))", "inferred_question": "What are the birth days of movies whose original language is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.8778622812242247, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.424111196626347, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),oscar_nominee.movie_id))", "inferred_question": "What are the movie_ids of movies whose original language is ja?"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "score": -0.8833915784489363, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,ja), movie.runtime),movie.runtime))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 54, "beams": [{"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.04081072181083576, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": true, "beam_nubia_score": 0.786104538339822, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies with keywords whose name is blind date?"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.20217911493750906, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.786104538339822, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.budget),movie.budget)", "inferred_question": "What is the average budget of all movies with keywords whose name is blind date?"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.3317440841640382, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.786104538339822, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.budget)", "inferred_question": "What is the average budget of all movies with keywords whose name is blind date?"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.3327750575079237, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.786104538339822, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies with keywords whose name is blind date?"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.3632220689122873, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.786104538339822, "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,blind date),getData(movie),has_keyword.movie_id,movie.id), movie.budget),movie.budget)", "inferred_question": "What is the average budget of all movies with keywords whose name is blind date?"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.37737131054110656, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.3812493767382875, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(oscar_nominee),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.400534161373288, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(spoken_language),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.401791488464717, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": true, "beam_nubia_score": 0.786104538339822, "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,blind date),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies with keywords whose name is blind date?"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.40725959419708857, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,<=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.41724067927747227, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.786104538339822, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies with keywords whose name is blind date?"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.4177873259189518, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.786104538339822, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.movie_id), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies with keywords whose name is blind date?"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.42630952966629165, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(company),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.4298790143382364, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(genre),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "score": -0.4304909342963735, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.786104538339822, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies with keywords whose name is blind date?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 55, "beams": [{"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.04570233741833363, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of more than 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.25753641048504505, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7200685314534506, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,105000000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a revenue of more than 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.5359424605412642, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.3890980660140617, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,105000000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of less than 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.5573868706269423, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7489941665169002, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,105000000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget other than 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.5937607578380266, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>,105000000), movie.original_language),movie.original_language))", "inferred_question": "-"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.6309176572976867, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.vote_average),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of more than 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.6587262108369032, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,105000000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of at least 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.6845451287372271, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6355478454022588, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,105000000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote count of more than 105000000?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.6896147617517272, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.popularity),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of more than 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.696372063672983, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.9673071364761555, "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language)", "inferred_question": "What is the average original language of all movies with a budget of more than 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.7148554810701171, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of more than 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.7296529702289263, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.4693630201327743, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,105000000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies who were released after 105000000?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.7477765487419674, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.39712143789475274, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,105000000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a revenue of less than 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.7547614411596442, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5227964140824091, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.title))", "inferred_question": "What are the names of movies with a budget of more than 105000000 dollars?"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "score": -0.7692209588276455, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5668958037819772, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,105000000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a revenue other than 105000000 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 56, "beams": [{"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.10671075777388982, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.25401396840886714, "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "What are the names of movies which were produced in countries whose name is not Cambodia?"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.11695271383290048, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.20936084974629177, "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "What are the names of movies which were produced in countries whose name is Cambodia?"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.18938319419217658, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.19962515025118727, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.30356237107403594, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.3138043271330466, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),country.name,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.34470297748269807, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),oscar.category,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.35494493354170875, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),oscar.category,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.36854131538996965, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.3753316248323867, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Cambodia), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.37878327144898033, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),country.name,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.37959438582114585, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.38172533377967605, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.25401396840886714, "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Cambodia), movie.title),movie.title))", "inferred_question": "What are the names of movies which were produced in countries whose name is not Cambodia?"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.38633100774307066, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),movie.status,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have not been produced in Cambodia?", "score": -0.3898363418801565, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),country.name,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 57, "beams": [{"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.09048333174723666, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6088078882256938, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people whose name is Serge Houde?"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.2947055973781971, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.19654040194176314, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people whose name is Serge Houde?"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.37430849454540294, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.26038897093754176, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Serge Houde), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were deceased in Serge Houde?"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.4326967277302174, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6088078882256938, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.death_day),person.birth_day))", "inferred_question": "What are the birth days of people whose name is Serge Houde?"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.45838734290737193, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.46442756796082696, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.name))", "inferred_question": "What are the names of people whose name is Serge Houde?"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.4706926232797904, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Serge Houde), person.birth_day),person.birth_day))", "inferred_question": "-"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.5195642390026478, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.5005320636494813, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Serge Houde), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were born in Serge Houde?"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.5379284896625904, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.5655271228493606, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.birth_place))", "inferred_question": "What are the birth places of people whose name is Serge Houde?"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.5549325481921825, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Serge Houde),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.birth_day),person.birth_day))", "inferred_question": "-"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.5766083453985342, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Serge Houde), person.birth_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.5785307601763634, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.14363728133611942, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Serge Houde), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people who were deceased in Serge Houde?"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.6064733543171315, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.23517910881808146, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),movie.runtime))", "inferred_question": "What are the runtimes of people whose name is Serge Houde?"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.6083765902294545, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.4398204623895816, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),oscar.year))", "inferred_question": "What are the years of people whose name is Serge Houde?"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.6101383728278483, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Serge Houde),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,spoken_language.iso_639_1), person.birth_day),person.birth_day))", "inferred_question": "-"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "score": -0.6159421807848388, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Serge Houde),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.birth_day),person.birth_day))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 58, "beams": [{"orig_question": "How many persons died in Oxnard?", "score": -0.0713716359459795, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.5450362763197857, "inferred_code": "count(extractValues(distinct(filter(getData(person),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "How many names of people who were deceased in Oxnard are there?"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.3012606511954059, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.3453044885878158, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.3951744007511092, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),person.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.39994557067984715, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.35191714643551253, "inferred_code": "count(extractValues(distinct(filter(getData(person),person.death_place,=,Oxnard), person.name),person.death_day))", "inferred_question": "How many death days of people who were deceased in Oxnard are there?"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.4034286440019235, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(filter(getData(person),person.death_place,=,Oxnard),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.40551696597459125, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,oscar_winner.person_id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.42774389770278615, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.person_id),getData(person),cast.person_id,person.id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.448224243226933, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.449670530615882, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(person),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.45329898130436164, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.4553868671066797, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),person.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,oscar_winner.person_id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.46178238589743764, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.person_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.476691948890261, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Oxnard), person.name),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many persons died in Oxnard?", "score": -0.4926542997088029, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.death_day))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 59, "beams": [{"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.029200727614806965, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.popularity))", "inferred_question": "Are there any popularities of movies with a revenue of less than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.4090326405421365, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": true, "beam_nubia_score": 0.6294058061178511, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "inferred_question": "Are there any popularities of movies with a revenue of more than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.6496423459902871, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8576999178299936, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<=,347325802), movie.popularity),movie.popularity))", "inferred_question": "Are there any popularities of movies with a revenue of at most 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.7192005492106546, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8499004849806138, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.revenue))", "inferred_question": "Are there any revenues of movies with a revenue of less than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.7242637735616881, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.revenue),movie.popularity))", "inferred_question": "Are there any popularities of movies with a revenue of less than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.7255272384791169, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8695131161823595, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,<,347325802), movie.popularity),movie.popularity))", "inferred_question": "Are there any popularities of movies with a budget of less than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.7269577957049478, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6855261766871865, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.release_date))", "inferred_question": "Are there any release dates of movies with a revenue of less than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.7343797064677346, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7808948998203176, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.id))", "inferred_question": "Are there any ids of movies with a revenue of less than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.7383158918528352, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7807784303024238, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,<,347325802), movie.popularity),movie.popularity))", "inferred_question": "Are there any popularities of movies with a vote count of less than 347325802?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.7796664811030496, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,!=,347325802), movie.popularity),movie.popularity))", "inferred_question": "Are there any popularities of movies with a revenue other than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.8042414165392984, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8662940446239928, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.status))", "inferred_question": "Are there any statuses of movies with a revenue of less than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.8110630627779756, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.9208349345651994, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,<,347325802), movie.popularity),movie.popularity))", "inferred_question": "Are there any popularities of movies with a popularity of less than 347325802?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.8216315484896768, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6750473873844784, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.vote_average))", "inferred_question": "Are there any vote averages of movies with a revenue of less than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.8418121796858031, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.release_date),movie.popularity))", "inferred_question": "Are there any popularities of movies with a revenue of less than 347325802 dollars?"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "score": -0.8631500464689452, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.vote_average),movie.popularity))", "inferred_question": "Are there any popularities of movies with a revenue of less than 347325802 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 60, "beams": [{"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.10411270042823162, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": true, "beam_nubia_score": 0.7942496797618731, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.257269308771356, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.7942496797618731, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1930-09-08), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.43616493498848286, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.6846256676126521, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_place))", "inferred_question": "What are the death places of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.4425074056343874, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.13885039636433694, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),movie.budget))", "inferred_question": "What are the budgets of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.45445223605202045, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.384812428222539, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.birth_day))", "inferred_question": "What are the birth days of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.48570908220426645, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.7942496797618731, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_place),person.death_day))", "inferred_question": "What are the death days of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.5125200346665224, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.2737694239591366, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),movie.release_date))", "inferred_question": "What are the release dates of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.5182137013034662, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<,1930-09-08), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.5302163472952088, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.7942496797618731, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.5709347621159395, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.1978177113149936, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),oscar_nominee.person_id))", "inferred_question": "What are the person_ids of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.5879197240428766, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,<,1930-09-08), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.5893215433316072, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.6846256676126521, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1930-09-08), person.death_day),person.death_place))", "inferred_question": "What are the death places of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.5956640139775118, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.13885039636433694, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1930-09-08), person.death_day),movie.budget))", "inferred_question": "What are the budgets of people who were born before 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.5976446725981077, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.7351904151017037, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1930-09-08), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were born on 1930-09-08?"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "score": -0.6076088443951448, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.384812428222539, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1930-09-08), person.death_day),person.birth_day))", "inferred_question": "What are the birth days of people who were born before 1930-09-08?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 61, "beams": [{"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.12247128751272972, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": true, "beam_nubia_score": 0.8740609559287679, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars for which people who were born before 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.16707781308752026, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.8740609559287679, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars for which people who were born before 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.2211167915363258, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7649418311513632, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were born before 1948-06-03 won for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.23352456082118478, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.8627562157240323, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars for which people who were born on 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.26572331711111635, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7649418311513632, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1948-06-03),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were born before 1948-06-03 won for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.30421643427422845, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.8740609559287679, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars for which people who were born before 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.3321700648447809, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.750425620869031, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,1948-06-03),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were born on 1948-06-03 won for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.33532666708529196, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7071448758146059, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.number))", "inferred_question": "How many numbers of oscars for which people who were born before 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.348822959849019, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.8740609559287679, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars for which people who were born before 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.3552146224017926, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": true, "beam_nubia_score": 0.8740609559287679, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1948-06-03),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars for which people who were born before 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.3556286410352767, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7695457958956237, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars for which people who were born after 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.3564480550010865, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.6480488617010469, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_day,<,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars for which people who were deceased before 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.3652201647932618, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.8740609559287679, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.year),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars for which people who were born before 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.3799331926600825, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7071448758146059, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.number))", "inferred_question": "How many numbers of oscars for which people who were born before 1948-06-03 were nominated for their contribution to movies are there?"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "score": -0.383812202052977, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_nominee),getData(person),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 62, "beams": [{"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.05578113378250654, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": true, "beam_nubia_score": 0.9575655289990485, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies which were produced by companies whose name is 3Mark Entertainment?"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.19485255686025327, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": true, "beam_nubia_score": 0.9575655289990485, "inferred_code": "sum(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,3Mark Entertainment), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies which were produced by companies whose name is 3Mark Entertainment?"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.232831258945093, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9575655289990485, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.vote_count),movie.vote_count)", "inferred_question": "What is the total vote count of all movies which were produced by companies whose name is 3Mark Entertainment?"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.3459732758116721, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": true, "beam_nubia_score": 0.9575655289990485, "inferred_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,3Mark Entertainment), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies which were produced by companies whose name is 3Mark Entertainment?"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.36646822682821956, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9575655289990485, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),oscar_nominee.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies which were produced by companies whose name is 3Mark Entertainment?"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.39927468161271634, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(genre),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.4014890164023028, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(company),movie.title,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.4213604957113383, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9575655289990485, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),has_keyword.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies which were produced by companies whose name is 3Mark Entertainment?"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.42879245355211937, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(country),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.4297828072340945, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.7766021614763892, "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,3Mark Entertainment), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies which were produced by companies whose name is 3Mark Entertainment?"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.4336748376943657, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9575655289990485, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_country.iso_3166_1), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies which were produced by companies whose name is 3Mark Entertainment?"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.43511749806428884, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9575655289990485, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies which were produced by companies whose name is 3Mark Entertainment?"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.4425569916717721, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(production_company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.4431504568125705, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(company),production_company.company_id,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "score": -0.4438831751738587, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.9575655289990485, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),has_genre.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies which were produced by companies whose name is 3Mark Entertainment?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 63, "beams": [{"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.020123442765907384, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": true, "beam_nubia_score": 0.9784838901114444, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average of more than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.5167677580757299, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.972965917033537, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.1), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average of at least 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.6279094993515173, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5580644878512011, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average other than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.6396871648175875, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5957120522348593, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a vote average of more than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.6545631548833626, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.7728147822618221, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "inferred_question": "Are there any revenues of movies with a vote average of more than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.6687092028005281, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.30259910253478683, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of more than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.6966315267054597, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9784838901114444, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average of more than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.7429333768232027, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.6117266755865209, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote average of more than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.7949445393896895, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9347113727097904, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,6.1), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of more than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.7951156079216162, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.2950178511873489, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.1), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average of less than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.8063653885765234, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.8944890850321462, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,6.1), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average of 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.816346391235129, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.2364893416270628, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),person.death_day))", "inferred_question": "What are the death days of movies with a vote average of more than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.837835534606711, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5972788934412622, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),language.name))", "inferred_question": "What are the names of movies with a vote average of more than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.8384255609853426, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5893810988589361, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of more than 6.1?"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "score": -0.8480955205304781, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.3790787759608172, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),spoken_language.iso_639_1))", "inferred_question": "What are the iso_639_1s of movies with a vote average of more than 6.1?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 64, "beams": [{"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.2380851745411248, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,killer robot), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.2671717438244, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.2890875632910219, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.6535644839488198, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,killer robot),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,has_keyword.keyword_id), person.birth_place),person.birth_place))", "inferred_question": "What are the birth places of people who starred in movies with keywords whose name is killer robot?"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.3205797651347966, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,killer robot), person.birth_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.32654009445406884, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,killer robot),merge(getData(has_keyword),getData(movie),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.death_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.3266932895781168, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.3287608293755686, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.6535644839488198, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,killer robot),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "inferred_question": "What are the birth places of people who starred in movies with keywords whose name is killer robot?"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.32878736464700054, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.3288350702019623, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.6535644839488198, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,killer robot),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,has_keyword.keyword_id), person.birth_place),person.birth_place))", "inferred_question": "What are the birth places of people who starred in movies with keywords whose name is killer robot?"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.33016450027210303, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.3403363143120069, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_nominee.person_id,person.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.3421095263088281, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,killer robot),merge(getData(has_keyword),getData(movie),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.34728345470156086, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.28271873846848394, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,killer robot),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,has_keyword.keyword_id), person.birth_place),person.death_place))", "inferred_question": "What are the death places of people who starred in movies with keywords whose name is killer robot?"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.35861246876830855, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,killer robot),merge(getData(has_keyword),getData(movie),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), company.name),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "score": -0.3594957715750968, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "is_correct_ot": false, "beam_nubia_score": 0.6535644839488198, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,killer robot),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,has_keyword.keyword_id), person.death_place),person.birth_place))", "inferred_question": "What are the birth places of people who starred in movies with keywords whose name is killer robot?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 65, "beams": [{"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.05373539193206385, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.1722700790243988, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.311446943318559, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),oscar_nominee.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.31739239647391493, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.84265626544012, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,<,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average of less than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.3198420347592239, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.32365857199478626, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.33321899888665835, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.3378844343025177, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.movie_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.34540759770797613, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6885589330403807, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who starred in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.348120887571734, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), genre.name),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.3588054679511107, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.36114185381639147, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,has_genre.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.37548743813666724, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.person_id),getData(person),crew.person_id,person.id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.3759619230445372, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "score": -0.3793197694910391, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7515408138961779, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "inferred_question": "What are the death places of people who worked in movies with a vote average other than 2?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 66, "beams": [{"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.15896395441542346, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.20270867033042528, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": true, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.25056490174999946, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1975-08-12),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.2551012818636975, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.28964593091309715, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1975-08-12),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.number),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.2910339786797551, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": true, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1975-08-12),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.29717198369546627, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": true, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1975-08-12),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.31512546984576245, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar_nominee.oscar_id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.33711350149871194, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<=,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.35071683441785156, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1975-08-12),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.36729189235482423, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.7939639613087837, "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<=,1975-08-12),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.number),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.3762515921524675, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "-"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.4058405757634498, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),crew.movie_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "-"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.4066266438009695, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.45956067814721324, "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),merge(getData(movie),getData(oscar_nominee),person.id,oscar_nominee.movie_id),oscar_nominee.movie_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the total number of all oscars for which people who were born before 1975-08-12 were nominated for their contribution to movies for which those people were nominated for their contribution to those movies?"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "score": -0.41230536832471515, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar_nominee.person_id), oscar.number),oscar.number)", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 67, "beams": [{"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.07265591153554851, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": true, "beam_nubia_score": 0.7265452138657186, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "inferred_question": "What are the names of people who were deceased in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.2785307047670358, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.5312231539871968, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.death_place))", "inferred_question": "What are the death places of people who were deceased in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.408023106843757, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3451890533851959, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.death_day))", "inferred_question": "What are the death days of people who were deceased in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.4414322860320681, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.6561623611870717, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Encino, Kalifornien, USA), person.name),person.name))", "inferred_question": "What are the names of people who were deceased on Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.46544037663989, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7265452138657186, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.birth_place),person.name))", "inferred_question": "What are the names of people who were deceased in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.5281861303155893, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.31052563779849873, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.birth_place))", "inferred_question": "What are the birth places of people who were deceased in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.5309772332911962, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7265452138657186, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.death_place),person.name))", "inferred_question": "What are the names of people who were deceased in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.5313885053401464, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7265452138657186, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.death_day),person.name))", "inferred_question": "What are the names of people who were deceased in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.6267763131545507, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.23820760780684602, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Encino, Kalifornien, USA), person.name),person.name))", "inferred_question": "What are the names of people who were not deceased in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.6473070792635554, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.43361737414993073, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Encino, Kalifornien, USA), person.name),person.death_place))", "inferred_question": "What are the death places of people who were deceased on Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.6713151698713773, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.5312231539871968, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.birth_place),person.death_place))", "inferred_question": "What are the death places of people who were deceased in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.6819946011310094, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7265452138657186, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.birth_day),person.name))", "inferred_question": "What are the names of people who were deceased in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.6880382054732763, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,<,Encino, Kalifornien, USA), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.6900621242602938, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.1565692100041517, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Encino, Kalifornien, USA), person.name),person.name))", "inferred_question": "What are the names of people who were born in Encino, Kalifornien, USA?"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "score": -0.7001475533252233, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7265452138657186, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.gender),person.name))", "inferred_question": "What are the names of people who were deceased in Encino, Kalifornien, USA?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 68, "beams": [{"orig_question": "When did Nancy Graham Tanen die?", "score": -0.06917792945750989, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": true, "beam_nubia_score": 0.6261916828608066, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "inferred_question": "What are the death days of people whose name is Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.3815639560634736, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.42903421728494906, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Nancy Graham Tanen), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were deceased on Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.40490860692807473, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.10891400194794076, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.name))", "inferred_question": "What are the names of people whose name is Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.4691960254276637, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.6261916828608066, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.name),person.death_day))", "inferred_question": "What are the death days of people whose name is Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.48955609850236215, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.44740874708779077, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Nancy Graham Tanen), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were deceased in Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.5515600183571223, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.32038690638070344, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Nancy Graham Tanen), person.death_day),person.death_day))", "inferred_question": "What are the death days of people whose name is not Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.5585150161350612, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.6261916828608066, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people whose name is Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.5649891832435969, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<=,Nancy Graham Tanen), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.5983809625322465, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.4423378192967432, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_place))", "inferred_question": "What are the death places of people whose name is Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.6304166113550309, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.09207305653689457, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),movie.revenue))", "inferred_question": "What are the revenues of people whose name is Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.636982897442067, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.11653457097035758, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),oscar.year))", "inferred_question": "What are the years of people whose name is Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.6407989656145219, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.09092018545202807, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),movie.vote_count))", "inferred_question": "What are the vote counts of people whose name is Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.6721617916191462, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<,Nancy Graham Tanen), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.6969740727508906, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.6261916828608066, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), movie.revenue),person.death_day))", "inferred_question": "What are the death days of people whose name is Nancy Graham Tanen?"}, {"orig_question": "When did Nancy Graham Tanen die?", "score": -0.7130969949357677, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.058536564235157296, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "inferred_question": "What are the death days of movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 69, "beams": [{"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.20855768775800243, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.5756286860895482, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.name), person.name))", "inferred_question": "Are there any names of people who were born after 1938-03-04?"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.26471214747289196, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.5756286860895482, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>=,1938-03-04),person.name), person.name))", "inferred_question": "Are there any names of people who were born after 1938-03-04?"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.39953685994260013, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.5756286860895482, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>,1938-03-04), person.name),person.name))", "inferred_question": "Are there any names of people who were born after 1938-03-04?"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.4523074739263393, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,>,1938-03-04),person.name), person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.4916222803876735, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_place,>,1938-03-04),person.name), person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.49721536791184917, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.5060202135836556, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,!=,1938-03-04),person.name), person.name))", "inferred_question": "Are there any names of people who were not born on 1938-03-04?"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.5084619336412288, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,>=,1938-03-04),person.name), person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.5191761336755008, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.5756286860895482, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>=,1938-03-04), person.name),person.name))", "inferred_question": "Are there any names of people who were born after 1938-03-04?"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.547776740102563, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_place,>=,1938-03-04),person.name), person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.5895681493566372, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,>,1938-03-04),person.name), person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.589785099728033, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,>,1938-03-04), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.6457226090715267, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,>=,1938-03-04),person.name), person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.6835318962694146, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.5756286860895482, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.name), oscar.year))", "inferred_question": "Are there any names of people who were born after 1938-03-04?"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.6963199099991471, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.5060202135836556, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,!=,1938-03-04), person.name),person.name))", "inferred_question": "Are there any names of people who were not born on 1938-03-04?"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "score": -0.7094242630992085, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,>=,1938-03-04), person.name),person.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 70, "beams": [{"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.15618894303557215, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7254287875921994, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.movie_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies for which people won oscars whose category is sound?"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.1668948696128711, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7254287875921994, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies for which people won oscars whose category is sound?"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.18005012992114516, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.21607774035552685, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7254287875921994, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,oscar_winner.movie_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies for which people won oscars whose category is sound?"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.2267836669328258, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7254287875921994, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,oscar_winner.oscar_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies for which people won oscars whose category is sound?"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.22859213902029082, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.movie_id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.22966849118995133, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.23073415798065441, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.23460794916850117, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.7254287875921994, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies for which people won oscars whose category is sound?"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.2355261353367606, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(genre),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.2378797402637962, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6943221398498842, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.number,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.movie_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies for which people won oscars with a number of sound?"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.24197263307090477, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(genre),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.24858566684109518, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6943221398498842, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.number,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies for which people won oscars with a number of sound?"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.28434816751313113, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7254287875921994, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,production_country.movie_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies for which people won oscars whose category is sound?"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "score": -0.2869942724875476, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7396995071791497, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.movie_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies for which people won oscars whose sub-category is sound?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 71, "beams": [{"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.07980938200489618, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.8468448988206463, "inferred_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.name),person.name))", "inferred_question": "How many names of people whose name is Christopher J. Wood are there?"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.39855891224578954, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.28326037949376137, "inferred_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.name),person.death_day))", "inferred_question": "How many death days of people whose name is Christopher J. Wood are there?"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.40027364474372007, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.446097068650528, "inferred_code": "count(extractValues(distinct(filter(getData(person),person.death_place,=,Christopher J. Wood), person.name),person.name))", "inferred_question": "How many names of people who were deceased in Christopher J. Wood are there?"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.4148078294272454, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Christopher J. Wood), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.4195071509971851, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Christopher J. Wood), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.4226269362552557, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.4228590111634918, "inferred_code": "count(extractValues(distinct(filter(getData(person),person.death_day,=,Christopher J. Wood), person.name),person.name))", "inferred_question": "How many names of people who were deceased on Christopher J. Wood are there?"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.4386261187281252, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.name,=,Christopher J. Wood), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.4433254402980649, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.name,=,Christopher J. Wood), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.48035204168991186, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.487370267425819, "inferred_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.name),oscar.year))", "inferred_question": "How many years of people whose name is Christopher J. Wood are there?"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.5004852318840922, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.522775309665505, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,oscar.id),person.id,cast.person_id),person.name,=,Christopher J. Wood), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.5250254216398952, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.5477338186732802, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.name))", "inferred_question": "-"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.54906674605445, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.6163374709799516, "inferred_code": "count(extractValues(distinct(filter(getData(person),person.birth_place,=,Christopher J. Wood), person.name),person.name))", "inferred_question": "How many names of people who were born in Christopher J. Wood are there?"}, {"orig_question": "How many persons are called Christopher J. Wood?", "score": -0.5512431598735593, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.name),person.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 72, "beams": [{"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.39165767089434667, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.6049019220147589, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.popularity),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of 14.4037?"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.4022406543881516, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.6049019220147589, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of 14.4037?"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.4113826359898667, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.6049019220147589, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), person.birth_day),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of 14.4037?"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.41144444600649877, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.6049019220147589, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.runtime),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of 14.4037?"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.4656481798083405, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.4221663677603994, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.popularity),movie.runtime))", "inferred_question": "What are the runtimes of movies with a popularity of 14.4037?"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.47623116330214543, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.4221663677603994, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.release_date),movie.runtime))", "inferred_question": "What are the runtimes of movies with a popularity of 14.4037?"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.4853731449038605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.4221663677603994, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), person.birth_day),movie.runtime))", "inferred_question": "What are the runtimes of movies with a popularity of 14.4037?"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.4854349549204926, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.4221663677603994, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a popularity of 14.4037?"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.5670303437309973, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),production_country.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,14.4037), person.birth_day),movie.release_date))", "inferred_question": "-"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.5735232657715147, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,14.4037), person.birth_day),movie.release_date))", "inferred_question": "-"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.5786488777292679, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,14.4037), person.birth_day),movie.release_date))", "inferred_question": "-"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.5864215702519967, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),production_country.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,14.4037), movie.runtime),movie.release_date))", "inferred_question": "-"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.592914461281522, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,14.4037), movie.runtime),movie.release_date))", "inferred_question": "-"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.5975352763098931, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),production_country.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,14.4037), movie.popularity),movie.release_date))", "inferred_question": "-"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "score": -0.5980400732392753, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,14.4037), movie.runtime),movie.release_date))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 73, "beams": [{"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.03067394298255842, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5702822312027618, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which had people whose gender is m working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.2241664108124659, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.4687311141987659, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which had people whose gender is not m working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.2859283505126885, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5702822312027618, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.runtime),movie.runtime)", "inferred_question": "What is the total runtime of all movies which had people whose gender is m working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.3245584618256033, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.3752540367738624, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.name,=,m), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which had people whose name is m working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.33419298291192356, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,<,m), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.3640543388135414, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5355784141651968, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies starring people whose gender is m?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.37874081081745564, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5702822312027618, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),cast.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which had people whose gender is m working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.3831387466117693, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5702822312027618, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,person.id),person.gender,=,m), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which had people whose gender is m working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.3852764730751227, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,>=,m), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.39517700825900726, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5702822312027618, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.release_date),movie.runtime)", "inferred_question": "What is the total runtime of all movies which had people whose gender is m working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.416894042742915, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.40786773016108735, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.popularity,=,m), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with a popularity of m which had people working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.4208701784862249, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.3934728501598702, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,=,m), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which had people who were born on m working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.42505676297565254, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5702822312027618, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,crew.person_id),person.gender,=,m), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which had people whose gender is m working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.4282430391437224, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5702822312027618, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.movie_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which had people whose gender is m working in them?"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "score": -0.4322940737958811, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(person),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 74, "beams": [{"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.16503000421366096, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8016584492463678, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "How many categories of oscars which people won for their contribution to movies with genres whose name is Thriller are there?"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.24647885524955643, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(production_country),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "-"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.2561186229887684, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "-"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.2705283773667313, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8016584492463678, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.category),oscar.category))", "inferred_question": "How many categories of oscars which people won for their contribution to movies with genres whose name is Thriller are there?"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.2708756053790373, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(oscar_nominee),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "-"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.27301965325132355, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(oscar_winner),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "-"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.2797551795179075, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(production_company),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "-"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.28590428692971376, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.7197622176595646, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with genres whose name is Thriller are there?"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.287708027849388, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_keyword),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "-"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.29460058536115336, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8016584492463678, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "How many categories of oscars which people won for their contribution to movies with genres whose name is Thriller are there?"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.2989891917252837, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8016584492463678, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.number),oscar.category))", "inferred_question": "How many categories of oscars which people won for their contribution to movies with genres whose name is Thriller are there?"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.30553749311306744, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8016584492463678, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar_winner.person_id), oscar.category),oscar.category))", "inferred_question": "How many categories of oscars which people won for their contribution to movies with genres whose name is Thriller are there?"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.3057450873160768, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8016584492463678, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "How many categories of oscars which people won for their contribution to movies with genres whose name is Thriller are there?"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.3136637021415503, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8016584492463678, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,production_company.company_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "How many categories of oscars which people won for their contribution to movies with genres whose name is Thriller are there?"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "score": -0.3161814419729825, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8016584492463678, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "How many categories of oscars which people won for their contribution to movies with genres whose name is Thriller are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 75, "beams": [{"orig_question": "Are there male persons?", "score": -0.19083133630920202, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3074383254593326, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.name), person.name))", "inferred_question": "Are there any names of people whose gender is not m?"}, {"orig_question": "Are there male persons?", "score": -0.34138921566773206, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3129648387259466, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,m),person.name), person.name))", "inferred_question": "Are there any names of people whose name is not m?"}, {"orig_question": "Are there male persons?", "score": -0.39196148805785924, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3074383254593326, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.name), person.gender))", "inferred_question": "Are there any names of people whose gender is not m?"}, {"orig_question": "Are there male persons?", "score": -0.485889597912319, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": true, "beam_nubia_score": 0.5802798589022259, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "inferred_question": "Are there any names of people whose gender is m?"}, {"orig_question": "Are there male persons?", "score": -0.5049597203033045, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3074383254593326, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.name), person.birth_day))", "inferred_question": "Are there any names of people whose gender is not m?"}, {"orig_question": "Are there male persons?", "score": -0.5236544270301238, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3074383254593326, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.name),person.name))", "inferred_question": "Are there any names of people whose gender is not m?"}, {"orig_question": "Are there male persons?", "score": -0.5425193674163893, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3129648387259466, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,m),person.name), person.gender))", "inferred_question": "Are there any names of people whose name is not m?"}, {"orig_question": "Are there male persons?", "score": -0.5613320051925257, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3074383254593326, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.name), person.id))", "inferred_question": "Are there any names of people whose gender is not m?"}, {"orig_question": "Are there male persons?", "score": -0.5884132740320638, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3176983655144474, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.gender), person.name))", "inferred_question": "Are there any genders of people whose gender is not m?"}, {"orig_question": "Are there male persons?", "score": -0.5938874027924612, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,>,m),person.name), person.name))", "inferred_question": "-"}, {"orig_question": "Are there male persons?", "score": -0.6123654601396993, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.1653619733474111, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.birth_day), person.name))", "inferred_question": "Are there any birth days of people whose gender is not m?"}, {"orig_question": "Are there male persons?", "score": -0.636447477270849, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.5334621442938763, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,=,m),person.name), person.name))", "inferred_question": "Are there any names of people whose name is m?"}, {"orig_question": "Are there male persons?", "score": -0.6555175996618345, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3129648387259466, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,m),person.name), person.birth_day))", "inferred_question": "Are there any names of people whose name is not m?"}, {"orig_question": "Are there male persons?", "score": -0.6870197496609762, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.5802798589022259, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.gender))", "inferred_question": "Are there any names of people whose gender is m?"}, {"orig_question": "Are there male persons?", "score": -0.692870247294195, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "is_correct_ot": false, "beam_nubia_score": 0.3074383254593326, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.name), movie.popularity))", "inferred_question": "Are there any names of people whose gender is not m?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 76, "beams": [{"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.08897555647426394, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.8814364005428591, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,>=,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were deceased after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.17070269698184973, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.8814364005428591, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were deceased after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.24240209900412557, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6195978697468976, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,>=,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were born after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.245516038835957, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6195978697468976, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,>=,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were born after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.30069983432746955, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.8814364005428591, "inferred_code": "avg(distinct(merge(filter(getData(person),person.death_day,>,2000-01-05),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were deceased after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.31160994920197715, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.8814364005428591, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>=,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were deceased after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.32724317934354274, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6195978697468976, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,>,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were born after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.3382808029585846, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6195978697468976, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,>,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were born after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.35218072029398684, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.8814364005428591, "inferred_code": "avg(distinct(merge(filter(getData(person),person.death_day,>=,2000-01-05),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were deceased after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.36393410160206363, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6863544482761208, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,<=,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were deceased before 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.3822260781138521, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.8814364005428591, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,>=,2000-01-05), movie.revenue),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were deceased after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.4074886531564362, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.8814364005428591, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were deceased after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.4177537504199777, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.8814364005428591, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_day,>=,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were deceased after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.4181847993590183, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6494977021053062, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,>=,2000-01-05), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies which had people who were deceased after 2000-01-05 working in them?"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "score": -0.42231680144389544, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.8814364005428591, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),person.death_day,>=,2000-01-05), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which had people who were deceased after 2000-01-05 working in them?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 77, "beams": [{"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.048006372512625385, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6775792114236855, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose name is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.2069498037820435, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6775792114236855, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Angola),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose name is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.24935175061491202, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6775792114236855, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Angola),getData(company),production_company.company_id,company.id), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose name is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.2664803048055224, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5804170772073294, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Angola), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose status is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.3243815431768937, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6775792114236855, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,=,Angola), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose name is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.35819157892119063, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5804170772073294, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,=,Angola),getData(company),production_company.company_id,company.id), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose status is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.37111434788162156, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.37141910591451655, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.37469954030727093, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6775792114236855, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_country.iso_3166_1,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose name is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.3807455886908532, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6775792114236855, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,keyword.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose name is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.38805719815393697, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6775792114236855, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,has_keyword.movie_id),movie.title,=,Angola), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose name is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.3951005779283792, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6775792114236855, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Angola),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose name is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.39755556378412227, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6775792114236855, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,has_genre.movie_id),movie.title,=,Angola), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose name is Angola?"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.3979708613290045, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(keyword),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "Are there companies from Angola that have produced movies?", "score": -0.40598529644114834, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6775792114236855, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),has_keyword.keyword_id,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies whose name is Angola?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 78, "beams": [{"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.06730633472706005, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7170779433542276, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were not deceased in Bangkok, Thailand won oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.12064612716511922, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5975923112136352, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased in Bangkok, Thailand won oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.12946712097331792, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7170779433542276, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were not deceased in Bangkok, Thailand won oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.3255811166123347, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,<,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.36037718663948454, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7170779433542276, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were not deceased in Bangkok, Thailand won oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.38653695466888766, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),person.death_place,!=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.39673130224226155, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.657528077445183, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were not deceased on Bangkok, Thailand won oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.39807437944977153, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.44897228664013733, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.gender,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people whose gender is not Bangkok, Thailand won oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.4137169790775437, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5975923112136352, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased in Bangkok, Thailand won oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.4149480427964495, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7170779433542276, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were not deceased in Bangkok, Thailand won oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.4398767471069468, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),person.death_place,=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.4475549402764675, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6884590335117847, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were not deceased in Bangkok, Thailand were nominated for oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.4575384702108662, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7170779433542276, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_nominee.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were not deceased in Bangkok, Thailand won oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.45876816818770416, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7170779433542276, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),genre.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were not deceased in Bangkok, Thailand won oscars?"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "score": -0.46034769036361045, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5975923112136352, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased in Bangkok, Thailand won oscars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 79, "beams": [{"orig_question": "Which vote counts have the movies without an original language?", "score": -0.021264665956550743, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6743579099298085, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose original language is not no?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.33168698308145395, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": true, "beam_nubia_score": 0.7603485442331148, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose original language is no?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.5026979919870064, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5379860016422926, "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies in which languages whose name is not no is spoken?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.5805640911785304, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>=,no), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.6388360671335249, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6743579099298085, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.vote_average),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose original language is not no?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.6573085835771053, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6220707554049623, "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,!=,no), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.6698515078403964, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5787597350130496, "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,no), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies in which languages whose name is no is spoken?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.7359957804485754, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5379860016422926, "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies in which languages whose name is not no is spoken?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.7448069100137218, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.32772891496065926, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.vote_count),movie.title))", "inferred_question": "What are the names of movies whose original language is not no?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.7483013681703596, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6743579099298085, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose original language is not no?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.754054495737364, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.24394756466939804, "inferred_code": "done(extractValues(distinct(filter(getData(language),movie.original_language,!=,no), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of languages?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.754615564516587, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.688886783750435, "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,no), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose original language is not no in which languages is spoken?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.7683076357570826, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>,no), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.8005828670793562, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6743579099298085, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose original language is not no?"}, {"orig_question": "Which vote counts have the movies without an original language?", "score": -0.8025894856182276, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,no), movie.vote_count),movie.vote_count))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 80, "beams": [{"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.32537051038446, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.33054860180112766, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.3663517475483984, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id),movie.original_language,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.status))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.3665843403906797, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.3673990329090146, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id),movie.original_language,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.37007757336740593, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),getData(oscar_winner),person.id,oscar_winner.oscar_id),country.name,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.status))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.37109507536883596, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),getData(oscar_winner),person.id,oscar_winner.oscar_id),country.name,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.37176243180734736, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.37718546916528506, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),country.iso_3166_1,oscar_winner.oscar_id),movie.original_language,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.status))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.37823266135311945, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),country.iso_3166_1,oscar_winner.oscar_id),movie.original_language,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.38578279150943956, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.status))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.3909608829261072, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.status))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.39324058219841795, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),getData(oscar_winner),person.id,oscar_winner.person_id),country.name,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.status))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.393935778473487, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),country.iso_3166_1,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "score": -0.3942581103478893, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),getData(oscar_winner),person.id,oscar_winner.person_id),country.name,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 81, "beams": [{"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.04656463543688005, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": true, "beam_nubia_score": 0.8343815341796481, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of at most 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.19140177274857706, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of less than 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.5345555474868888, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.8539723529064073, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,6.4), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.6482682918085629, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.5688856126507175, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.title))", "inferred_question": "What are the names of movies with a vote average of at most 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.648549029685455, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.44877224976124985, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of at most 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.7172057230145583, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.8343815341796481, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.release_date),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of at most 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.7931054291202599, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.6246439655820639, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.budget),movie.title))", "inferred_question": "What are the names of movies with a vote average of less than 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.793386166997152, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.4722355918845246, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.budget),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of less than 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.8022818659319455, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.28891998824106413, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of at most 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.8118841845662246, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.8343815341796481, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.title),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of at most 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.8158733179679984, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7810666438765835, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.4), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of at least 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.8620428603262553, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.release_date),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average of less than 6.4?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.8697902562216768, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<=,6.4), movie.budget),movie.budget))", "inferred_question": "-"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.8792329432562838, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7873426751315811, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,6.4), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a runtime of at most 6.4 minutes?"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "score": -0.8872336243166501, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.6359939936373251, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average of at most 6.4?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 82, "beams": [{"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.2535060698286869, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.5290045246610957, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people whose name is Libby Villa won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.27180029136447936, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.5290045246610957, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people whose name is Libby Villa won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.30538551034740236, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.31919947639158186, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.5290045246610957, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people whose name is Libby Villa won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.3236797318831949, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.32933630518737805, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.32939014026966135, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.5290045246610957, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "inferred_question": "How many numbers of oscars which people whose name is Libby Villa won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.3374936979273743, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.5290045246610957, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people whose name is Libby Villa won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.3476305267231705, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.3476843618054538, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.5290045246610957, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "inferred_question": "How many numbers of oscars which people whose name is Libby Villa won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.3710789169102974, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.38121571248003056, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.38126954756231385, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.3839682676157575, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.5290045246610957, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Libby Villa),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people whose name is Libby Villa won for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "score": -0.3983026169008445, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.5290045246610957, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Libby Villa),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people whose name is Libby Villa won for their contribution to movies are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 83, "beams": [{"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.10784668655106905, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7918250476277942, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.23215235006285967, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7918250476277942, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), person.birth_day),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.23601433245045766, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7918250476277942, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.2590954085632127, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.682585950272766, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_average,=,writing (screenplay--original)),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote average of writing (screenplay--original) for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.27071768819463204, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7918250476277942, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), person.birth_day),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.29655523016009483, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (screenplay--original)),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "inferred_question": "-"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.30884343125072783, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8907304715813523, "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)),oscar.sub_category,=,writing (screenplay--original)), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original) and whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.3169351958007719, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.4332849560531278, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.3253059388731664, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7918250476277942, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), movie.runtime),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.3402574494910861, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6987101692954831, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,=,writing (screenplay--original)),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a runtime of writing (screenplay--original) minutes for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.36267251339042866, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7497444557513779, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.3634235717424782, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7918250476277942, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (screenplay--original)), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.37551077948267225, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7918250476277942, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.3911496944785038, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7918250476277942, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), oscar.year),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original)?"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "score": -0.3965654790257173, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8907304715813523, "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)),oscar.sub_category,=,writing (screenplay--original)), person.birth_day),movie.popularity))", "inferred_question": "What are the popularities of movies for which people were nominated for oscars whose sub-category is writing (screenplay--original) and whose sub-category is writing (screenplay--original)?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 84, "beams": [{"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.1449836240575046, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.2289577553443749, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.2374174994687301, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.2457367405276553, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_place,=,Astoria, New York,), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.3003688963896937, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,Astoria, New York,),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.31537997226003617, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.31611787587945933, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.3184053540875942, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.3218766182197179, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.3241348366569351, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.gender,=,Astoria, New York,), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.33407098386987283, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.3434154691198273, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_day,=,Astoria, New York,), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.3451217082801762, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_place,=,Astoria, New York,),person.birth_place,=,Astoria, New York,), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.34902770231220753, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "score": -0.36771170543782994, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 85, "beams": [{"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.034438278642483056, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "inferred_question": "What are the death days of people whose name is not Jason Tobin?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.319384474423714, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.7624713557359133, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,Jason Tobin), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were not deceased on Jason Tobin?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.5579878577264026, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.869807816739369, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Jason Tobin), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were not deceased in Jason Tobin?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.5961220645112917, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.8936370531380025, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_place))", "inferred_question": "What are the death places of people whose name is not Jason Tobin?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.673704553511925, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.5704946060640297, "inferred_code": "done(extractValues(distinct(filter(getData(person),oscar.year,!=,Jason Tobin), person.death_day),person.death_day))", "inferred_question": "What are the death days of people?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.6804649018449709, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.19726393770180628, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),movie.revenue))", "inferred_question": "What are the revenues of people whose name is not Jason Tobin?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.6873225459130481, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.5704946060640297, "inferred_code": "done(extractValues(distinct(filter(getData(person),language.name,!=,Jason Tobin), person.death_day),person.death_day))", "inferred_question": "What are the death days of people?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.7017668670741841, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_place),person.death_day))", "inferred_question": "What are the death days of people whose name is not Jason Tobin?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.7328068079659715, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,>,Jason Tobin), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.7963424386689439, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,>=,Jason Tobin), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.8118490466149524, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.5704946060640297, "inferred_code": "done(extractValues(distinct(filter(getData(person),keyword.name,!=,Jason Tobin), person.death_day),person.death_day))", "inferred_question": "What are the death days of people?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.814187008771114, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), movie.revenue),person.death_day))", "inferred_question": "What are the death days of people whose name is not Jason Tobin?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.8502317852107808, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.name),person.death_day))", "inferred_question": "What are the death days of people whose name is not Jason Tobin?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.861694970051758, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.280068249552229, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.name))", "inferred_question": "What are the names of people whose name is not Jason Tobin?"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "score": -0.8810682602925226, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.6052050648056029, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,Jason Tobin), person.death_day),person.death_place))", "inferred_question": "What are the death places of people who were not deceased on Jason Tobin?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 86, "beams": [{"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.21949225796533434, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.9305428285929598, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies which were produced by companies whose name is Lone Wolf McQuade Associates are there?"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.25795134610229525, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.30520472851990416, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.9305428285929598, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), company.name),movie.title))", "inferred_question": "How many names of movies which were produced by companies whose name is Lone Wolf McQuade Associates are there?"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.3096234116867052, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.3127961152773281, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(company),production_company.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.31606442132644946, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),person.death_place,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.3365304268116047, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.3386877060335019, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.9305428285929598, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Lone Wolf McQuade Associates), movie.budget),movie.title))", "inferred_question": "How many names of movies which were produced by companies whose name is Lone Wolf McQuade Associates are there?"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.3407385766164993, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.34366381665686513, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), company.name),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.35125520341428906, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(company),production_company.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.35452350946341044, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.3827727501010726, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),genre.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.3937476272566445, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.9305428285929598, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,company.id),company.name,=,Lone Wolf McQuade Associates), movie.budget),movie.title))", "inferred_question": "How many names of movies which were produced by companies whose name is Lone Wolf McQuade Associates are there?"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "score": -0.40337748392346984, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Lone Wolf McQuade Associates), movie.budget),movie.title))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 87, "beams": [{"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.15696818259958725, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7778246903467245, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count,<=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people were nominated for their contribution to movies with a vote count of at most 7.4?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.1838493168365095, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": true, "beam_nubia_score": 0.7848120314406388, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people were nominated for their contribution to movies with a vote average of at most 7.4?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.19547104496696632, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7508085629183423, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count,>=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people were nominated for their contribution to movies with a vote count of at least 7.4?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.22235217920388858, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7661650927525195, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_average,>=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people were nominated for their contribution to movies with a vote average of at least 7.4?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.2545816544707906, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": true, "beam_nubia_score": 0.7848120314406388, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people were nominated for their contribution to movies with a vote average of at most 7.4?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.2816619641829888, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.title,<=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "-"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.2829335920647034, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.5652681115049427, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.year,<=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars who were awarded before 7.4 for which people were nominated for their contribution to movies?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.2917830305345154, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7368627365768395, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,<=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people were nominated for their contribution to movies with a runtime of at most 7.4 minutes?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.3033002730389987, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7778246903467245, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people were nominated for their contribution to movies with a vote count of at most 7.4?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.3201648265503679, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.title,>=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "-"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.32143645443208246, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.5816925545886518, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.year,>=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars who were awarded after 7.4 for which people were nominated for their contribution to movies?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.3219216716167865, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7661650927525195, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people were nominated for their contribution to movies with a vote average of at least 7.4?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.32729409414875, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.6898428564774945, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.number,<=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars with a number of at most 7.4 for which people were nominated for their contribution to movies?"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.32802359267096326, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.title,<=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "-"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "score": -0.33028589733203617, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7326417784001737, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,>=,7.4), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people were nominated for their contribution to movies with a runtime of at least 7.4 minutes?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 88, "beams": [{"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.33178431573305406, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.609384982892345, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars who were awarded before 1948?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.3435851456333059, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.609384982892345, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars who were awarded before 1948?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.3564617895544694, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5244643788213672, "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948),oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars who were awarded before 1948 with minimum number?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.3754122097096199, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.609384982892345, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars who were awarded before 1948?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.38146356020709415, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5244643788213672, "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,<,1948),oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars who were awarded before 1948 with minimum number?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.38721303960987175, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.609384982892345, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars who were awarded before 1948?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.3949567441188633, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5244643788213672, "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948),oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars who were awarded before 1948 with minimum number?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.403996809000114, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5484245896334061, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1948),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies for which people won oscars who were awarded after 1948?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.4199585147714881, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5244643788213672, "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,<,1948),oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars who were awarded before 1948 with minimum number?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.4240862189656941, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.609384982892345, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), oscar.year),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars who were awarded before 1948?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.4358870488659459, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.609384982892345, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), oscar.year),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars who were awarded before 1948?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.43952560622508763, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.45164395028175375, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.44042755428506486, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5715346134303435, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people won oscars who were awarded before 1948?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.4413435797390464, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.47459837882507616, "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948),oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people won oscars who were awarded before 1948 with minimum number?"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "score": -0.45132643612533946, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.45164395028175375, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "inferred_question": "What are the release dates of movies for which people were nominated for oscars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 89, "beams": [{"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.017876579935546033, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": true, "beam_nubia_score": 0.9889565183823618, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.47747267135127913, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9063712323299408, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6), movie.vote_count),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a vote average other than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.5289912892476423, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9535595777391516, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_average))", "inferred_question": "Are there any vote averages of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.5802063132141484, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8835516951836448, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6), movie.vote_count),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a vote average of at least 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.5922458013956202, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9889565183823618, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_average),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.6614971599046839, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9889565183823618, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.revenue),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.6918076659057988, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.3212417352500193, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6), movie.vote_count),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a vote average of less than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.7153389892046107, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9889565183823618, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.runtime),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.7744853338663233, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9889565183823618, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), oscar.year),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.7854927850858076, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.798878283559725, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.title))", "inferred_question": "Are there any names of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.7893163634435041, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5935371631353946, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),oscar.year))", "inferred_question": "Are there any years of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.7993120027676923, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6550603337343288, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.runtime))", "inferred_question": "Are there any runtimes of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.8264208508626325, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.44277371361449136, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.revenue))", "inferred_question": "Are there any revenues of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.8606849154894007, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9889565183823618, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.title),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a vote average of more than 6?"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "score": -0.8686570106510771, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8020464046978397, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,6), movie.vote_count),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a runtime of more than 6 minutes?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 90, "beams": [{"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.14456376865457907, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.7274869984311477, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with genres whose name is Documentary?"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.2076330535765719, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.7274869984311477, "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with genres whose name is Documentary?"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.24252065911640414, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7274869984311477, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),cast.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with genres whose name is Documentary?"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.3005039674877452, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.3163374830840684, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7274869984311477, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),person.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with genres whose name is Documentary?"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.3348258042662193, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.34122601040187744, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.3254643801464493, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),company.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with genres?"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.34252009649827037, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.5863998152126235, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.title,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies whose name is Documentary with genres?"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.3446282968417955, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7274869984311477, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),crew.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with genres whose name is Documentary?"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.3585544710230978, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7274869984311477, "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),person.id,has_genre.genre_id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with genres whose name is Documentary?"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.35963112717797585, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.5609352614541347, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.original_language,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies whose original language is Documentary with genres?"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.3656926702288741, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.38071102861255274, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(cast),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.3866595663252792, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7274869984311477, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),movie.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with genres whose name is Documentary?"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "score": -0.39353109018088445, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7274869984311477, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),oscar_nominee.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with genres whose name is Documentary?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 91, "beams": [{"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.3116893194802926, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),person.name,>=,David Kyle), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.32338996004098797, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),person.name,>=,David Kyle), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.33583663690635684, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.9246958655450842, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),person.name,!=,David Kyle), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies which had people whose name is not David Kyle working in them were produced?"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.3362135936074215, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,production_country.movie_id),person.name,>=,David Kyle), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.3429556045882594, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.5514360491535427, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),person.death_day,>=,David Kyle), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies which had people who were deceased after David Kyle working in them were produced?"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.34753727746705215, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.9246958655450842, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),person.name,!=,David Kyle), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies which had people whose name is not David Kyle working in them were produced?"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.3479142341681168, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,country.iso_3166_1),person.name,>=,David Kyle), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.3503409292933404, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1),person.name,>=,David Kyle), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.35385902405334496, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),person.death_place,>=,David Kyle), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.3546562451489547, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.5514360491535427, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),person.death_day,>=,David Kyle), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies which had people who were deceased after David Kyle working in them were produced?"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.3593551789191668, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.person_id),person.name,>=,David Kyle), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.3603608897882021, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.9246958655450842, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,production_country.movie_id),person.name,!=,David Kyle), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies which had people whose name is not David Kyle working in them were produced?"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.364744988066579, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,production_country.movie_id),person.name,>=,David Kyle), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.3655596433687567, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),person.death_place,>=,David Kyle), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "score": -0.447590724462936, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.6235297103762429, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),crew.movie_id,production_country.iso_3166_1),person.death_day,>=,David Kyle), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies which had people who were deceased after David Kyle working in them were produced in which those movies were produced?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 92, "beams": [{"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.29210663384953406, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.3328921045917531, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.33617278845686355, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.movie_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.36230310670380145, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),person.name,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.37454891554474795, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(language),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.3769582591990826, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,=,2.3),getData(movie),oscar_nominee.movie_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.38117222330154427, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.3837773238435017, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),language.name,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.3899045598350499, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.oscar_id,movie.id), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.3905066072356535, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.person_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.40636926131113094, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),person.name,=,2.3),getData(movie),oscar_nominee.movie_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.4127339329636826, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.41533442476517063, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,=,2.3),getData(language),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.41861512192070627, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(language),oscar_nominee.movie_id,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "score": -0.6883386258906754, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),oscar_nominee.movie_id,movie.id), language.name),language.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 93, "beams": [{"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.04447323533167946, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": true, "beam_nubia_score": 0.9761693129841791, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity of at least 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.20440379234423744, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.725268927159022, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,49.3535), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity of at most 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.5993420973645698, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9336835676094402, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,49.3535), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity of more than 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.7317319345420401, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9761693129841791, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), person.death_day),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity of at least 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.7666192855213012, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.3721319058720831, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a popularity of at least 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.7757927671300422, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5834560447450865, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,49.3535), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity other than 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.8028198685024108, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.21721340225376995, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),person.death_day))", "inferred_question": "What are the death days of movies with a popularity of at least 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.8029011321013968, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9761693129841791, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.vote_count),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity of at least 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.8031820263240661, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.6153409266928231, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies with a popularity of at least 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.8449323239728983, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9273624950429871, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,49.3535), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a revenue of at least 49.3535 dollars?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.858284635538439, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9761693129841791, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity of at least 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.8610738891802612, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.8525433292118504, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "inferred_question": "Are there any revenues of movies with a popularity of at least 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.8708712950574409, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.219726432416124, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,49.3535), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity of less than 49.3535?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.8735694947645243, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.4576359162539997, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,>=,49.3535), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies?"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "score": -0.8862408461973246, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,49.3535), movie.revenue),movie.revenue))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 94, "beams": [{"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.08356015413653735, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.582992314154654, "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies in which languages whose name is ????????? ???? is spoken?"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.1203415001816147, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.582992314154654, "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies in which languages whose name is ????????? ???? is spoken?"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.2467153958977807, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(language),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.31041321325738724, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.582992314154654, "inferred_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies in which languages whose name is ????????? ???? is spoken?"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.36729106807440537, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(language),spoken_language.iso_639_1,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.39122726996716295, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.582992314154654, "inferred_code": "sum(distinct(merge(merge(filter(getData(language),language.name,=,????????? ????),getData(spoken_language),movie.id,spoken_language.movie_id),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies in which languages whose name is ????????? ???? is spoken?"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.39193514114745365, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5956412025295036, "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,????????? ????), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies whose original language is ????????? ???? in which languages is spoken?"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.4019208670917977, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.582992314154654, "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies in which languages whose name is ????????? ???? is spoken?"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.40403802553667517, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(movie),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.422045078406922, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.4259495822319101, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.582992314154654, "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,????????? ????), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies in which languages whose name is ????????? ???? is spoken?"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.43279162620614603, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.582992314154654, "inferred_code": "sum(distinct(merge(merge(filter(getData(language),language.name,=,????????? ????),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies in which languages whose name is ????????? ???? is spoken?"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.43946762116318916, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.4460360245432669, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.582992314154654, "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.vote_average),movie.runtime)", "inferred_question": "What is the total runtime of all movies in which languages whose name is ????????? ???? is spoken?"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "score": -0.45269723008851726, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(genre),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 95, "beams": [{"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.2880784002721756, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.2913752054230357, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),person.gender,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.29483814258246055, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.330688750648498, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of movies starring people who were deceased in Fritz Rasp are there?"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.299630735274772, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.49932442226393625, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.gender,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of movies starring people whose gender is Fritz Rasp are there?"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.30834429911082467, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.2875605344343025, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies starring people who were deceased in Fritz Rasp?"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.3483778744832545, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),person.name,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.34847609434216814, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),person.death_place,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.3533123745569871, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.330688750648498, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of movies starring people who were deceased in Fritz Rasp are there?"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.3547861074966164, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),person.death_place,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.35660917970784717, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.49932442226393625, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.gender,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of movies starring people whose gender is Fritz Rasp are there?"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.368342091228561, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.37472977449521644, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),language.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.3830245581195891, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.47608663235295645, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.gender,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies starring people whose gender is Fritz Rasp?"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.3846648142916956, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),genre.name,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "score": -0.3913784952784477, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 96, "beams": [{"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.1756084498774726, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.41107199772831604, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,!=,2014-01-01), person.name),person.name))", "inferred_question": "Are there any names of people whose name is not 2014-01-01?"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.20305865377304144, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.8774963125062879, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,!=,2014-01-01), person.name),person.name))", "inferred_question": "Are there any names of people who were not deceased on 2014-01-01?"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.3972976294171531, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.8266538437474069, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_place,!=,2014-01-01), person.name),person.name))", "inferred_question": "Are there any names of people who were not deceased in 2014-01-01?"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.4443312308867462, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.41107199772831604, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,2014-01-01),person.name), person.name))", "inferred_question": "Are there any names of people whose name is not 2014-01-01?"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.45071015809935877, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.name,!=,2014-01-01),person.name,!=,2014-01-01), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.5021393916686065, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.8774963125062879, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.name), person.name))", "inferred_question": "Are there any names of people who were not deceased on 2014-01-01?"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.5135613545094561, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,!=,2014-01-01), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.5291295813656653, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,spoken_language.iso_639_1),person.name,!=,2014-01-01), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.6169589677336403, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.name,!=,2014-01-01), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.6189548948605079, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.41107199772831604, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,!=,2014-01-01), person.death_day),person.name))", "inferred_question": "Are there any names of people whose name is not 2014-01-01?"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.6301982754240195, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.name,!=,2014-01-01),person.name,>,2014-01-01), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.6324489138205536, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.8266538437474069, "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_place,!=,2014-01-01),person.name), person.name))", "inferred_question": "Are there any names of people who were not deceased in 2014-01-01?"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.6464050987560768, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.8774963125062879, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,!=,2014-01-01), person.death_day),person.name))", "inferred_question": "Are there any names of people who were not deceased on 2014-01-01?"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.6734911504026968, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.31275468518067717, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,!=,2014-01-01), person.name),oscar.year))", "inferred_question": "Are there any years of people whose name is not 2014-01-01?"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "score": -0.6960098243491901, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.name,!=,2014-01-01),person.name,!=,2014-01-01), person.name),oscar.year))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 97, "beams": [{"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.031601506896549836, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": true, "beam_nubia_score": 0.836862846280318, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.4495552858861629, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.836862846280318, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.popularity),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.5016312490737114, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.858955846118837, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.id),movie.release_date)", "inferred_question": "What is the average release date of all movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.6436621335871697, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.15999470321591602, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.6507842919381801, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.836862846280318, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.status),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.6508516117755789, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.7946183171233414, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,6.06387), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of at most 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.6520576669427101, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.44396393586944993, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.popularity))", "inferred_question": "What are the popularities of movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.6775511589874128, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5267116820387181, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.7152918173524085, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.1300772459014291, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.budget))", "inferred_question": "What are the budgets of movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.7426624342624564, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.4178735816611554, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.06387), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of less than 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.7482049509708304, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.8730448504232025, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,6.06387), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of at least 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.7511005593987647, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.40911324915431724, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.status))", "inferred_question": "What are the statuses of movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.7624578258546535, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.836862846280318, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.budget),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.7843053123506252, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.836862846280318, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.id),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of 6.06387?"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "score": -0.8047592928924132, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.6999801711331046, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,6.06387), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a vote average of 6.06387?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 98, "beams": [{"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.037247865890094545, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.47885522921333545, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "inferred_question": "How many budgets of movies with a vote average other than 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.48226256969428505, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": true, "beam_nubia_score": 0.6929692384095956, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote average other than 0.5?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.5599598106564372, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.3547576461324854, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,0.5), movie.budget),movie.budget))", "inferred_question": "How many budgets of movies with a vote average of at least 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.5615123114184826, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.47308227769201205, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,0.5), movie.budget),movie.budget))", "inferred_question": "How many budgets of movies with a vote count other than 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.6108836945713847, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.3208679656698522, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>,0.5), movie.budget),movie.budget))", "inferred_question": "How many budgets of movies with a vote average of more than 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.6646230786209344, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.47885522921333545, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.release_date),movie.budget))", "inferred_question": "How many budgets of movies with a vote average other than 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.7135738598517491, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.24344936898785408, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.title))", "inferred_question": "How many names of movies with a vote average other than 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.7181307277278393, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.3150516063892891, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,0.5), movie.budget),movie.budget))", "inferred_question": "How many budgets of movies whose original language is not 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.7566938864401891, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.1978835872455199, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.release_date))", "inferred_question": "How many release dates of movies with a vote average other than 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.760063585556054, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.47885522921333545, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.title),movie.budget))", "inferred_question": "How many budgets of movies with a vote average other than 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.803730290812382, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.34643908354916764, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,0.5), movie.budget),movie.budget))", "inferred_question": "How many budgets of movies with a vote average of 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.8099141090278863, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.47885522921333545, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.revenue),movie.budget))", "inferred_question": "How many budgets of movies with a vote average other than 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.8710446225813939, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.4105823530115724, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.revenue))", "inferred_question": "How many revenues of movies with a vote average other than 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.8741691081886529, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.47885522921333545, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.id),movie.budget))", "inferred_question": "How many budgets of movies with a vote average other than 0.5 are there?"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "score": -0.8934141861609532, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.1303901727939143, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.original_language))", "inferred_question": "How many original languages of movies with a vote average other than 0.5 are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 99, "beams": [{"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.14754615347699646, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7373709926375434, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars which people whose name is Bob Papenbrook won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.27463019809430844, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7373709926375434, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.year),oscar.number))", "inferred_question": "Are there any numbers of oscars which people whose name is Bob Papenbrook won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.2763287321535368, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7373709926375434, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), person.death_day),oscar.number))", "inferred_question": "Are there any numbers of oscars which people whose name is Bob Papenbrook won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.28291976854291273, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.36544564397090695, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),language.name,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars which people won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.2855138823333838, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6231585536747464, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.year,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars who were awarded on Bob Papenbrook which people won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.310323700482595, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7373709926375434, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars which people whose name is Bob Papenbrook won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.32917242292289123, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7373709926375434, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars which people whose name is Bob Papenbrook won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.37305598923888544, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7373709926375434, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars which people whose name is Bob Papenbrook won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.37345358227611797, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7373709926375434, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), person.name),oscar.number))", "inferred_question": "Are there any numbers of oscars which people whose name is Bob Papenbrook won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.3820334516056673, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7373709926375434, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars which people whose name is Bob Papenbrook won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.3839960680746277, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7373709926375434, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars which people whose name is Bob Papenbrook won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.3904408256142742, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7373709926375434, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),language.iso_639_1,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars which people whose name is Bob Papenbrook won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.3937960798400276, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6660042534122652, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.number,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars with a number of Bob Papenbrook which people won for their contribution to movies?"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.3996439344811526, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "score": -0.4100038131602247, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.36544564397090695, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),language.name,=,Bob Papenbrook), oscar.year),oscar.number))", "inferred_question": "Are there any numbers of oscars which people won for their contribution to movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 100, "beams": [{"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.07224770126777003, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.8800538932271421, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies who were released after 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.4068890223520269, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9259754013949126, "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average)", "inferred_question": "What is the total vote average of all movies who were released after 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.5348068793391576, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.770489637561953, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "inferred_question": "Are there any vote averages of movies who were released after 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.5372426576852231, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9259754013949126, "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.id),movie.vote_average)", "inferred_question": "What is the total vote average of all movies who were released after 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.5655303143794299, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.8800538932271421, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies who were released after 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.635083020933962, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.8184740835867579, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_count))", "inferred_question": "What are the vote counts of movies who were released after 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.7153462903006584, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.7765838848168634, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,2005-03-17), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a popularity of at least 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.7507462345893146, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.5811851630880306, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2005-03-17), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies who were released before 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.7813118485864834, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.8800538932271421, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.runtime),movie.vote_average))", "inferred_question": "What are the vote averages of movies who were released after 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.7862601665910915, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.8800538932271421, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), oscar.year),movie.vote_average))", "inferred_question": "What are the vote averages of movies who were released after 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.8083868038738729, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.4638151310047792, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.runtime))", "inferred_question": "What are the runtimes of movies who were released after 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.816039277742675, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.4568266633223478, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,>=,2005-03-17), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.8490074412329705, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,2005-03-17), movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.8517671613153652, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.8800538932271421, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_count),movie.vote_average))", "inferred_question": "What are the vote averages of movies who were released after 2005-03-17?"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "score": -0.8655186085161404, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.8800538932271421, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.popularity),movie.vote_average))", "inferred_question": "What are the vote averages of movies who were released after 2005-03-17?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 101, "beams": [{"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.04546082099264518, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7191696819403772, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1956-10-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people who were born before 1956-10-11 won oscars are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.21751002187717552, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7191696819403772, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,<,1956-10-11), movie.title),movie.title))", "inferred_question": "How many names of movies for which people who were born before 1956-10-11 won oscars are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.22117999981859707, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7191696819403772, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1956-10-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people who were born before 1956-10-11 won oscars are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.2736661367612014, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7191696819403772, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11), movie.title),movie.title))", "inferred_question": "How many names of movies for which people who were born before 1956-10-11 won oscars are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.31748259700621695, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7191696819403772, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,<=,1956-10-11), movie.title),movie.title))", "inferred_question": "How many names of movies for which people who were born before 1956-10-11 won oscars are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.31948688383712914, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7191696819403772, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,<,1956-10-11),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people who were born before 1956-10-11 won oscars are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.32576325007867, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7191696819403772, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<=,1956-10-11), movie.title),movie.title))", "inferred_question": "How many names of movies for which people who were born before 1956-10-11 won oscars are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.359581059561873, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8185046165440977, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11),movie.release_date,<=,1956-10-11), movie.title),movie.title))", "inferred_question": "How many names of movies who were released before 1956-10-11 for which people who were born before 1956-10-11 won oscars are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.3654952837267397, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11),movie.title,<=,1956-10-11), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.3788736417435346, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7191696819403772, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1956-10-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people who were born before 1956-10-11 won oscars are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.3864834453796402, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8185046165440977, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11),movie.release_date,<,1956-10-11), movie.title),movie.title))", "inferred_question": "How many names of movies who were released before 1956-10-11 for which people who were born before 1956-10-11 won oscars are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.39112001399770596, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.47794378507827473, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),person.birth_day,<,1956-10-11),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies which had people who were born before 1956-10-11 working in them are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.3923976695445069, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11),movie.title,<,1956-10-11), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.4161512534496336, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.47794378507827473, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11), movie.title),movie.title))", "inferred_question": "How many names of movies which had people who were born before 1956-10-11 working in them are there?"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "score": -0.4362773445382477, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6746178026771052, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,1956-10-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people who were born on 1956-10-11 won oscars are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 102, "beams": [{"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.1295719943248412, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a vote count of more than 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.1346946320978598, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,380),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a vote count of more than 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.1760640483419649, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies with a vote count of more than 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.24906698243927836, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>=,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a vote count of at least 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.2520950994943121, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7306223208500758, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,!=,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a vote count other than 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.2746214024470089, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,380),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies with a vote count of more than 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.293647926476479, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>=,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies with a vote count of at least 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.2973010833676866, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7959107923621778, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,!=,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies with a vote count other than 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.29935374446819485, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>=,380),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a vote count of at least 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.34620102067580416, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.9501087138911233, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a vote count of 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.35395844869310844, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7306223208500758, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,!=,380),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a vote count other than 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.39335114083766626, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.9578274832143836, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies with a vote count of 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.40058564174578054, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,>=,380), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a vote count of at least 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.40871180687748554, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,380),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), keyword.name),country.name))", "inferred_question": "What are the names of countries in which movies with a vote count of more than 380 were produced?"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "score": -0.4198512742095325, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,380),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), movie.original_language),country.name))", "inferred_question": "What are the names of countries in which movies with a vote count of more than 380 were produced?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 103, "beams": [{"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.2442877651192248, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.6484147353389849, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were born before 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.2630885005928576, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.6484147353389849, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were born before 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.28574648359790444, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.4187354804797665, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were deceased before 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.30454721907153726, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.4187354804797665, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were deceased before 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.30573716619983315, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<,1988-02-28), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.32453790167346597, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<=,1988-02-28), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.35632734606042504, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were born on 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.3977860645391047, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.4573409349926367, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were deceased on 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.4177767471410334, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.6809619525307962, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people whose name is 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.5373599440790713, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.3525419712305333, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were not born on 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.5788186625577509, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.3655014708415988, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were not deceased on 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.5988093451596797, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.34946745249707245, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people whose name is not 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.6013611013768241, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.7761840617323901, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were born after 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.6428198198555037, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.4507376991138503, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1988-02-28), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were deceased after 1988-02-28?"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "score": -0.6628105024574324, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,>,1988-02-28), person.death_day),person.death_day))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 104, "beams": [{"orig_question": "When did Lasse Petterson die?", "score": -0.0886682326963637, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": true, "beam_nubia_score": 0.45179073780535906, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "inferred_question": "What are the death days of people whose name is Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.32684809892089106, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.1923025694163889, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Lasse Petterson), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were deceased on Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.4508891244477127, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.08783555302681068, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.name))", "inferred_question": "What are the names of people whose name is Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.47338969437987544, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.20779598164352053, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Lasse Petterson), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were deceased in Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.5206032981222961, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.45179073780535906, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.name),person.death_day))", "inferred_question": "What are the death days of people whose name is Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.530059414828429, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.23017226371401445, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Lasse Petterson), person.death_day),person.death_day))", "inferred_question": "What are the death days of people whose name is not Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.5463349995261524, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<=,Lasse Petterson), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.5631347884482238, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.45179073780535906, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people whose name is Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.5832580656715436, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": true, "beam_nubia_score": 0.45179073780535906, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,Lasse Petterson),person.death_day), person.death_day))", "inferred_question": "What are the death days of people whose name is Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.5930476923531387, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.07372109268809779, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),movie.revenue))", "inferred_question": "What are the revenues of people whose name is Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.6346952793246601, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<,Lasse Petterson), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.6374669809883926, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.27231474193113026, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_place))", "inferred_question": "What are the death places of people whose name is Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.668769209558377, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.45179073780535906, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), movie.revenue),person.death_day))", "inferred_question": "What are the death days of people whose name is Lasse Petterson?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.673527372564422, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.056440693986614665, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "inferred_question": "What are the death days of movies?"}, {"orig_question": "When did Lasse Petterson die?", "score": -0.68906899067224, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.16046721882840442, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Lasse Petterson), person.death_day),person.name))", "inferred_question": "What are the names of people who were deceased on Lasse Petterson?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 105, "beams": [{"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.012462930331821553, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": true, "beam_nubia_score": 0.6522001311348669, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of at most 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.4036315279518021, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9945797557822655, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,2607), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of less than 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.6562275380565552, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5071441001721344, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a vote count of at most 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.720468226048979, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.6522001311348669, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), person.death_day),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of at most 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.7271073060546769, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.7753630916889707, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,2607), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.7415846782241715, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5891166034636246, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,2607), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of at least 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.7421182484104065, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.26911205383378733, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),person.death_day))", "inferred_question": "What are the death days of movies with a vote count of at most 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.800298216912779, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.6522001311348669, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of at most 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.8241600654291688, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.6601182909055648, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,2607), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average of at most 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.8408031723665772, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<=,2607), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.860213521096739, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.6522001311348669, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.vote_count),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of at most 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.8837339372112183, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5103989942001095, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of at most 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.9070530623866944, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.5177555160729028, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.budget))", "inferred_question": "What are the budgets of movies with a vote count of at most 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.9243814439250855, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.23441097106761644, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote count of at most 2607?"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "score": -0.926033505864325, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.29861036708812994, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),cast.person_id))", "inferred_question": "What are the person_ids of movies with a vote count of at most 2607?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 106, "beams": [{"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.13838646358340426, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),crew.person_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.23263117224496305, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),cast.person_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.2673546231120174, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),crew.movie_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.2792527810109709, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),crew.person_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.2956854780356707, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),crew.person_id,movie.id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.30854646140960856, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9005719386577365, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,has_keyword.movie_id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "What are the genders of people who starred in movies with keywords whose name is not national park?"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.3093215818659508, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": true, "beam_nubia_score": 0.925378465974336, "inferred_code": "done(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "What are the genders of people who worked in movies with keywords whose name is not national park?"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.3204261179983739, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9005719386577365, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,has_keyword.keyword_id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "What are the genders of people who starred in movies with keywords whose name is not national park?"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.3226726333169011, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),person.gender,person.id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.34919085920371784, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.3734974666911695, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),cast.person_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.38691965684479607, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9005719386577365, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,has_keyword.movie_id),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "What are the genders of people who starred in movies with keywords whose name is not national park?"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.4189199166948682, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9005719386577365, "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,has_keyword.keyword_id),keyword.name,!=,national park),language.name,!=,national park), person.gender),person.gender))", "inferred_question": "What are the genders of people who starred in movies with keywords whose name is not national park?"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.4241860139541445, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),crew.person_id,person.id),keyword.name,!=,national park), movie.popularity),person.gender))", "inferred_question": "-"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "score": -0.4370884811588325, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9175988201282352, "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,has_keyword.keyword_id),keyword.name,!=,national park),keyword.name,!=,national park), person.gender),person.gender))", "inferred_question": "What are the genders of people who starred in movies with keywords whose name is not national park and whose name is not national park?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 107, "beams": [{"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.02508669540839037, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of 140 minutes?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.43447196491615614, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6052947048214905, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,140), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose name is 140?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.49642850373493275, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,140), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of at most 140 minutes?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.5625533462371095, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8292712115628065, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,140), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a vote average of 140?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.670391744430894, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,140), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a runtime of 140 minutes?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.6745999893973931, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,140), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of at least 140 minutes?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.6814017347860499, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of 140 minutes?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.7241977454032167, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6419189170613896, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,140), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose status is 140?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.7408688069190248, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9704188469779921, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,140), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a vote count of 140?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.754998450713174, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.runtime),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of 140 minutes?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.768504445986764, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_average),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of 140 minutes?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.7692457427838235, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9070293043710602, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a runtime of 140 minutes?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.8045824170912965, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.45391323276225704, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.homepage,=,140), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose homepage is 140?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.808795571407245, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6677446283683943, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,140), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies who were released on 140?"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "score": -0.8247414073775872, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.7945483371205575, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,140), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of less than 140 minutes?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 108, "beams": [{"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.1102884082169199, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.9320305087362873, "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced in countries whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.12056729400822555, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.9320305087362873, "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Japan), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced in countries whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.1840814092123121, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.9320305087362873, "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced in countries whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.19304426530318017, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.9320305087362873, "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced in countries whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.3018335620085209, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.8866117084624419, "inferred_code": "avg(filter(merge(merge(filter(getData(country),country.name,=,Japan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Japan),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced in countries whose name is Japan and whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.33807962325592256, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.9320305087362873, "inferred_code": "avg(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Japan),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced in countries whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.36094369748959787, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.9320305087362873, "inferred_code": "avg(distinct(merge(merge(filter(getData(country),country.name,=,Japan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced in countries whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.4258388831826703, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.9320305087362873, "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),production_country.movie_id,production_country.iso_3166_1), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced in countries whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.4580847861495176, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.620293202128753, "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.original_language,=,Japan), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies whose original language is Japan which were produced in countries?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.47946343440953787, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.9320305087362873, "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.name,production_country.iso_3166_1), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced in countries whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.48443739069558384, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.9320305087362873, "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_company.company_id), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies which were produced in countries whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.48511642779330966, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(genre),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.4898249385497977, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.5882872473201476, "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.status,=,Japan), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies whose status is Japan which were produced in countries?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.49609030752799516, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.5133677015205642, "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies which were produced in countries whose name is Japan?"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "score": -0.5077813209455733, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.5133677015205642, "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Japan), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies which were produced in countries whose name is Japan?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 109, "beams": [{"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.041813717361622905, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.6629419860527341, "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with a budget of at most 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.29028100919999983, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6444478795845208, "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,>=,7000000), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with a budget of at least 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.7215608837459091, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.8450284676455128, "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,7000000), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with a budget of less than 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.7649189429163016, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6455532958502046, "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.budget)", "inferred_question": "What is the total budget of all movies with a budget of at most 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.7667626178209388, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,<=,7000000), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.8107358395983504, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.41578220020817314, "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies with a budget of at most 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.8139298905364921, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7086403734579353, "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,7000000), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with a budget of 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.8469275947296596, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6941021988495217, "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,<=,7000000), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with a revenue of at most 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.8670114336870949, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6629419860527341, "inferred_code": "sum(filter(getData(movie),movie.budget,<=,7000000),movie.revenue)", "inferred_question": "What is the total revenue of all movies with a budget of at most 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.8729442185639124, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7307441234061809, "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,!=,7000000), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with a budget other than 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.8749529974054663, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6629419860527341, "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.revenue),movie.revenue)", "inferred_question": "What is the total revenue of all movies with a budget of at most 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.8802956646609916, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.5033844336192532, "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,>,7000000), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with a budget of more than 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.8858147561644562, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.2556560920709269, "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),person.death_day)", "inferred_question": "What is the total death day of all movies with a budget of at most 7000000 dollars?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.8960217965988991, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.40199158062503904, "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<=,7000000), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies who were released before 7000000?"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "score": -0.9018475121781835, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(getData(movie),movie.title,<=,7000000), movie.id),movie.revenue)", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 110, "beams": [{"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.17677109935334567, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6920527209785445, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.1968370098787273, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6920527209785445, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.21437616248847616, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6920527209785445, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.26060171879903754, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6920527209785445, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.26790722851072907, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6186784462421395, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "What are the categories of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.2806676293244192, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6920527209785445, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.28797313903611066, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6186784462421395, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "inferred_question": "What are the categories of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.29820678193416805, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6920527209785445, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.3055122916458595, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6186784462421395, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "What are the categories of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.33904209177083133, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6920527209785445, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),person.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.34357305297754404, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,5.11281),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.3500144840603404, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6920527209785445, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.35173784795642093, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6186784462421395, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "What are the categories of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.359108002296213, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.6920527209785445, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),person.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a popularity of 5.11281?"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "score": -0.3597133878150984, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.7175711918258476, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.popularity,>=,5.11281),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a popularity of at least 5.11281?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 111, "beams": [{"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.06566452872078986, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.210829787594203, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.revenue),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.21239040726276381, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.3055471372894558, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,correspondence),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.33243455297612173, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,correspondence),getData(movie),has_keyword.movie_id,movie.id), movie.revenue),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.35920766257844905, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,<=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.36040162476544707, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.3999972565941464, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,correspondence),getData(movie),has_keyword.movie_id,movie.id), movie.vote_count),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.40827762919663607, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), person.death_day),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.41454301461000553, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.4164762196895097, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(spoken_language),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.41819308282912626, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.5228581196237649, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,!=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is not correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.4296619540202832, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.revenue)", "inferred_question": "What is the total revenue of all movies with keywords whose name is correspondence?"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.43622266249643427, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(company),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "score": -0.4379139437802708, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 112, "beams": [{"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.15193100618304906, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.5664004079931592, "inferred_code": "avg(distinct(filter(getData(movie),language.name,!=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies?"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.2772750733678436, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.6285982437657388, "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,!=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies whose original language is not American Wedding?"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.3493958812030595, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.5664004079931592, "inferred_code": "avg(distinct(filter(getData(movie),language.name,=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies?"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.35873282937987155, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.388236623142386, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.5059041514411835, "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies in which languages whose name is not American Wedding is spoken?"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.43214387562867024, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,American Wedding), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.45931119228475503, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.25330217388712295, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies for which people won oscars?"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.4616476693911847, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.40543843115441636, "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies in which languages whose name is American Wedding is spoken?"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.4655247289037512, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.5664004079931592, "inferred_code": "avg(distinct(filter(getData(movie),person.name,!=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies?"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.4675255948529882, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.4683497271338245, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.47473994838785405, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.43162855804186984, "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies whose original language is American Wedding?"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.5327222385335537, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.25330217388712295, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies for which people won oscars?"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.5840099217165714, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.5664004079931592, "inferred_code": "avg(distinct(filter(getData(movie),person.gender,!=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies?"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "score": -0.5892932672481264, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.5664004079931592, "inferred_code": "avg(distinct(filter(getData(movie),genre.name,!=,American Wedding), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 113, "beams": [{"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.25127303689645325, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(crew),oscar.id,oscar_winner.oscar_id),oscar.number,=,42),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.28238884103904494, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.popularity),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.2870688301497127, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(crew),oscar.id,oscar_winner.oscar_id),oscar.category,=,42),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.2887932938284773, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(crew),oscar.id,oscar_nominee.oscar_id),oscar.number,=,42),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.29561866631548694, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.popularity),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.3245890870817368, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(crew),oscar.id,oscar_nominee.oscar_id),oscar.category,=,Camera),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.339152712018258, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.725969156708298, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.number,=,42),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "inferred_question": "How many statuses of movies for which people won oscars with a number of 42 are there?"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.36870458835854797, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,Camera),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.popularity),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.3698265128909771, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.status),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.3706883327271787, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.725969156708298, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.popularity),movie.status))", "inferred_question": "How many statuses of movies for which people won oscars with a number of 42 are there?"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.37506368689280534, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.popularity),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.38193441363499, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,Camera),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.popularity),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.3830563381674192, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.status),movie.status))", "inferred_question": "-"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.38391817129404593, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.725969156708298, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.popularity),movie.status))", "inferred_question": "How many statuses of movies for which people won oscars with a number of 42 are there?"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "score": -0.42503244438961835, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),filter(getData(movie),person.gender,!=,42),crew.movie_id,movie.id),person.name,<,Camera), movie.status),movie.status))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 114, "beams": [{"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.24025065181600083, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6567796844151157, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "How many birth places of people who were born before 1903-02-16 who were nominated for oscars for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.28855406775752784, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.3536262146782818, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "How many birth places of people who were born before 1903-02-16 who were nominated for oscars for their contribution to movies who were nominated for those oscars for their contribution to those movies are there?"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.30793776769609854, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.3187161503366071, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6567796844151157, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),person.birth_place))", "inferred_question": "How many birth places of people who were born before 1903-02-16 who were nominated for oscars for their contribution to movies are there?"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.32573275278562397, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.3479047579975981, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.3536262146782818, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_winner.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "How many birth places of people who were born before 1903-02-16 who were nominated for oscars for their contribution to movies who were nominated for those oscars for their contribution to those movies are there?"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.3516217314915807, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.3544988821935894, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.3536262146782818, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "How many birth places of people who were born before 1903-02-16 who were nominated for oscars for their contribution to movies who were nominated for those oscars for their contribution to those movies are there?"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.3620108189833763, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.18616110732451652, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "How many birth places of people who were born before 1903-02-16 who won oscars for their contribution to movies who were nominated for those oscars for their contribution to those movies are there?"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.3672884656988686, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_winner.movie_id),getData(person),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.3679017313444226, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_place,<=,1903-02-16), oscar.category),person.birth_place))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.37100544450417205, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.37388263361111645, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_winner.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "inferred_question": "-"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.3924891769901795, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.38565716414288886, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),oscar.category))", "inferred_question": "How many categories of oscars for which people who were born before 1903-02-16 were nominated for their contribution to movies for which those people were nominated for their contribution to those movies are there?"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "score": -0.4093348352722093, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.3536262146782818, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), oscar.category),person.birth_place))", "inferred_question": "How many birth places of people who were born before 1903-02-16 who were nominated for oscars for their contribution to movies who were nominated for those oscars for their contribution to those movies are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 115, "beams": [{"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.1378319008797213, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.896283151589799, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget other than 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.14302478010947825, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7557987398903214, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,>,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget of more than 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.1599774218429702, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.896283151589799, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,!=,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget other than 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.20183754750537655, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7557987398903214, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,>,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget of more than 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.20472546384782692, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.9119116542676832, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,<,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget of less than 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.2279281495317195, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.9119116542676832, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,<,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget of less than 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.24918820031253938, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6581076436382274, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,>=,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget of at least 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.2743348499074127, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6581076436382274, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,>=,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget of at least 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.33042197257031375, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6541983794085433, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,=,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget of 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.34803328777598147, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6541983794085433, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,=,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget of 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.3940315379272961, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.5775574997502106, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,!=,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies who were not released on 6900000 are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.39922440801988573, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.5284580369346101, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,>,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies who were released after 6900000 are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.43259721915061594, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,null,6900000), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.4330940329646035, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6523571318875843, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,<=,6900000), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies with a budget of at most 6900000 dollars are there?"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "score": -0.47638178121303204, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,6900000), genre.name),person.death_place))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 116, "beams": [{"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.15378813644274378, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7377819322935106, "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1984),movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people won oscars who were awarded after 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.2183826174717926, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7377819322935106, "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,>=,1984),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people won oscars who were awarded after 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.2471154801511106, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7465936371511721, "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,1984),movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people won oscars who were awarded on 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.2736873306884785, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,>=,1984),movie.runtime),movie.runtime))", "inferred_question": "-"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.27809637628095973, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7377819322935106, "inferred_code": "done(extractValues(max(merge(merge(filter(getData(oscar),oscar.year,>=,1984),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people won oscars who were awarded after 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.3139532618227539, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6732729615326736, "inferred_code": "done(extractValues(max(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people won oscars with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.3186337721778043, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7241454745449531, "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1984),movie.runtime),movie.title))", "inferred_question": "What are the names of movies for which people won oscars who were awarded after 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.32993219299506554, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5525527272114701, "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1984),movie.runtime),movie.vote_count))", "inferred_question": "What are the vote counts of movies for which people won oscars who were awarded after 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.3389397121299715, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7241454745449531, "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,>=,1984),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime),movie.title))", "inferred_question": "What are the names of movies for which people won oscars who were awarded after 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.3411686294843342, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5116794106650526, "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,!=,1984),movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people won oscars who were not awarded on 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.3661050402399796, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7241454745449531, "inferred_code": "done(extractValues(max(merge(merge(filter(getData(oscar),oscar.year,>=,1984),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.title))", "inferred_question": "What are the names of movies for which people won oscars who were awarded after 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.36701467439684526, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7589657664120693, "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,1984),movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people won oscars whose sub-category is 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.3934601550592112, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5525527272114701, "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,>=,1984),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime),movie.vote_count))", "inferred_question": "What are the vote counts of movies for which people won oscars who were awarded after 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.3984322848389846, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7048453118689801, "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1984),movie.runtime),movie.release_date))", "inferred_question": "What are the release dates of movies for which people won oscars who were awarded after 1984 with maximum runtime?"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "score": -0.4118115398212604, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7465936371511721, "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,=,1984),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people won oscars who were awarded on 1984 with maximum runtime?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 117, "beams": [{"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.09152415357675636, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8742577835204856, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "inferred_question": "How many numbers of movies with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.1795218782964286, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": true, "beam_nubia_score": 0.8697829838828012, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.29336902307951046, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": true, "beam_nubia_score": 0.8697829838828012, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>=,2.3),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.35765394040046933, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(movie),oscar_winner.movie_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.3872694814047097, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.43638917904648356, "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with a vote average of at least 2.3 and with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.39196056809258367, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(movie),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.3971427308689865, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.7373564744496615, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars for which people were nominated for their contribution to movies with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.4020755048487481, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8697829838828012, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.41128126847805724, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8697829838828012, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,spoken_language.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.4349018671344497, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8697829838828012, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.43848534946590517, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(movie),spoken_language.movie_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.43966791992924403, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.7948139920656541, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.year))", "inferred_question": "How many years of oscars which people won for their contribution to movies with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.4491221259066808, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.648456739324159, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people won for their contribution to movies with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.4628803801497874, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8697829838828012, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), oscar.sub_category),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with a vote average of at least 2.3 are there?"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "score": -0.47055908057053597, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8697829838828012, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), keyword.name),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with a vote average of at least 2.3 are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 118, "beams": [{"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.18847657185904437, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.iso_3166_1), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is not Quick Six Entertainment were produced?"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.2386034751662995, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.company_id,country.iso_3166_1),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is not Quick Six Entertainment were produced?"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.24177275178623372, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,country.iso_3166_1),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is not Quick Six Entertainment were produced?"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.24368640597536556, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.movie_id), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is not Quick Six Entertainment were produced?"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.2574763478450383, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.6461735847609185, "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Quick Six Entertainment),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is not Quick Six Entertainment and whose name is not Quick Six Entertainment were produced?"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.27317935165766283, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,None),None,None),None,None,Quick Six Entertainment), None),None))", "inferred_question": "-"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.27878707868328434, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.6461735847609185, "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Quick Six Entertainment),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.iso_3166_1),company.name,!=,Quick Six Entertainment), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is not Quick Six Entertainment and whose name is not Quick Six Entertainment were produced?"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.2806820489722514, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,None),None,None),None,None,Quick Six Entertainment), None),None))", "inferred_question": "-"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.2926304993414534, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.company_id,production_country.iso_3166_1), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is not Quick Six Entertainment were produced?"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.2970076839366163, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.company_id,movie.id),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is not Quick Six Entertainment were produced?"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.29734169676667505, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,production_country.iso_3166_1),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_company.movie_id,production_country.iso_3166_1),company.name,None,Quick Six Entertainment), None),None))", "inferred_question": "-"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.3020871901693922, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.8924375980135215, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),getData(production_company),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.iso_3166_1), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is not Quick Six Entertainment which were produced by those companies were produced?"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.3119581820041965, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "inferred_question": "What are the names of countries in which movies which were produced by companies whose name is not Quick Six Entertainment were produced?"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.3263988792194302, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,production_country.iso_3166_1),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_company.movie_id,movie.id),company.name,None,Quick Six Entertainment), None),None))", "inferred_question": "-"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "score": -0.34536227033526723, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,production_country.iso_3166_1),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.movie_id,movie.id),company.name,None,Quick Six Entertainment), None),None))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 119, "beams": [{"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.10204253740084823, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5438936501399478, "inferred_code": "done(extractValues(max(filter(getData(movie),movie.status,=,Cymraeg),movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies whose status is Cymraeg with maximum vote average?"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.2582134573747604, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.3492412474161762, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.3647172187859627, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.3745907886246207, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),person.gender,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.3845736456295761, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),country.iso_3166_1,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.39157217088527024, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.4122194311891005, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),oscar.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.42951109614626415, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),country.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.4458387015058472, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.status,=,Cymraeg),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.4557450088273785, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.45884749467160657, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.46561855513090855, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),person.gender,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.475601412135864, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),country.iso_3166_1,spoken_language.movie_id),movie.vote_average),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "score": -0.4791124154699428, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.popularity),movie.vote_average))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 120, "beams": [{"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.00990806623485696, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of more than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.5960591804341675, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.450345701677892, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of more than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.6935564263712877, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.3319792485414501, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,97), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of less than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.6975564133481384, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.33873655253623525, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),person.death_day))", "inferred_question": "What are the death days of movies with a runtime of more than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.7093863669888378, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of more than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.7553961261164659, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,97), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of at least 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.7949402514950634, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), person.death_day),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of more than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.8158073417544074, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9806011905505949, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "inferred_question": "Are there any revenues of movies with a runtime of more than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.816261237125218, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.57167198006402, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,97), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote average of more than 97?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.8218337930902635, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.07020462521892512, "inferred_code": "done(extractValues(distinct(filter(getData(oscar),movie.runtime,>,97), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of oscars?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.8495666753606201, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.763468390102526, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies with a runtime of more than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.8643020760373474, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.6537864145767929, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.budget))", "inferred_question": "What are the budgets of movies with a runtime of more than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.8819157850102783, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.35311759642960694, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),cast.person_id))", "inferred_question": "What are the person_ids of movies with a runtime of more than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.8997693244473339, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.vote_count),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of more than 97 minutes?"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "score": -0.9015618018911482, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.4888943503625537, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,>,97), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 121, "beams": [{"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.022617313916271087, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of at least 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.5195495117441169, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,262), movie.status),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of at most 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.5386375993475667, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), country.name),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of at least 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.5721235502496711, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,262), movie.status),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.5748362749800435, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.vote_average),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of at least 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.5884551614508382, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.popularity),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of at least 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.594445980990713, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.6320316887573696, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of at least 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.6309901107088081, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,262), movie.status),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of more than 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.640171133352851, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.8327244575747677, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,262), movie.status),movie.status))", "inferred_question": "What are the statuses of movies with a vote count other than 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.6503583564408473, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.26529804016993164, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote count of at least 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.6572469681486837, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), production_country.movie_id),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of at least 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.6581635846741847, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.44557534392529863, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),country.name))", "inferred_question": "What are the names of movies with a vote count of at least 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.6702666654236964, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.4890074865884546, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),production_country.movie_id))", "inferred_question": "What are the movie_ids of movies with a vote count of at least 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.6763733400948695, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.3716000763682106, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),production_country.iso_3166_1))", "inferred_question": "What are the iso_3166_1s of movies with a vote count of at least 262?"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "score": -0.6944457501158467, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), production_country.iso_3166_1),movie.status))", "inferred_question": "What are the statuses of movies with a vote count of at least 262?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 122, "beams": [{"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.2581640338047273, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5161713825264955, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)), movie.runtime),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars whose category is not documentary (feature)?"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.25854019239739456, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5161713825264955, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)), oscar.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars whose category is not documentary (feature)?"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.28312041040373354, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5342848305488919, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,!=,documentary (feature)), movie.runtime),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars whose sub-category is not documentary (feature)?"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.2834965689964008, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5342848305488919, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,!=,documentary (feature)), oscar.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars whose sub-category is not documentary (feature)?"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.3131231946839659, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5161917142293198, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,!=,documentary (feature)), movie.runtime),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars with a number other than documentary (feature)?"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.3134993532766331, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5161917142293198, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,!=,documentary (feature)), oscar.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars with a number other than documentary (feature)?"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.32112748168438865, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.399969774021223, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.runtime),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars whose category is documentary (feature)?"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.3215036402770559, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.399969774021223, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), oscar.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars whose category is documentary (feature)?"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.3284577447154997, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,>=,documentary (feature)), movie.runtime),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.3288339033081669, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,>=,documentary (feature)), oscar.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.3460838582833949, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.41861446110728995, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,documentary (feature)), movie.runtime),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars whose sub-category is documentary (feature)?"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.34646001687606215, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.41861446110728995, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,documentary (feature)), oscar.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars whose sub-category is documentary (feature)?"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.35341411621049784, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,>=,documentary (feature)), movie.runtime),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.35379027480316505, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,>=,documentary (feature)), oscar.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "score": -0.3659305913762011, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5161713825264955, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies for which people were nominated for oscars whose category is not documentary (feature)?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 123, "beams": [{"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.01118070112715941, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a popularity of less than 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.43695572057913523, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.8411036781070839, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,6.24827), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a popularity of at most 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.7279221958451672, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies with a popularity of less than 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.7293519510858459, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5386201558341492, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),language.name))", "inferred_question": "What are the names of movies with a popularity of less than 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.7456283275241731, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.8569420538084143, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.24827), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of less than 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.7635173801536439, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5357977394488227, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,6.24827), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a popularity of more than 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.7669659856910584, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7820421089703251, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.24827), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a popularity of 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.7728450004215119, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7271878628433923, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,6.24827), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a revenue of less than 6.24827 dollars?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.7953022722358583, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.8656333416067787, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,6.24827), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a popularity other than 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.7999709977739258, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5386201558341492, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.title))", "inferred_question": "What are the names of movies with a popularity of less than 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.8026834432239411, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,6.24827), movie.original_language),movie.original_language))", "inferred_question": "-"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.8162430471711559, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.popularity),movie.original_language))", "inferred_question": "What are the original languages of movies with a popularity of less than 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.8367170993442414, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6519112395093672, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,<,6.24827), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.858662618600647, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.25463545372011587, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.budget))", "inferred_question": "What are the budgets of movies with a popularity of less than 6.24827?"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "score": -0.8602884358697338, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.revenue),movie.original_language))", "inferred_question": "What are the original languages of movies with a popularity of less than 6.24827?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 124, "beams": [{"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.10393257805162258, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8804455084571853, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.23045556612809265, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8804455084571853, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.2332311574859762, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8804455084571853, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.262824080599262, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.3861642734655476, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,!=,special achievement award), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is not special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.3226873802225636, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8514086129889235, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,special achievement award), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose sub-category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.32482625154149075, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8804455084571853, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), person.birth_day),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.3307302292989861, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8804455084571853, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award), movie.release_date),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.33771259359548417, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.9271713944204231, "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is special achievement award and whose category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.34177962146222407, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8804455084571853, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.3446959657158004, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6016810899214049, "inferred_code": "done(extractValues(distinct(filter(getData(oscar),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of oscars whose category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.35523183916401546, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5958009310475981, "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,!=,special achievement award),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is not special achievement award and whose category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.3586190182342467, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8804455084571853, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), movie.id),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.3773925514784773, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.7784163827718995, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,special achievement award), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars with a number of special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.3792756182502602, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.3861642734655476, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,special achievement award), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is not special achievement award?"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "score": -0.38205259873445946, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8804455084571853, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), movie.popularity),movie.runtime))", "inferred_question": "What are the runtimes of movies for which people were nominated for oscars whose category is special achievement award?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 125, "beams": [{"orig_question": "Do movies exist with the status Rumored?", "score": -0.2848846311972011, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.22959300891042833, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies whose status is Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.29727119163726456, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.22959300891042833, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.original_language))", "inferred_question": "Are there any original languages of movies whose status is Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.313229381601559, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.22959300891042833, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.original_language))", "inferred_question": "Are there any original languages of movies whose status is Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.37582713321899064, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.22959300891042833, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.popularity),movie.original_language))", "inferred_question": "Are there any original languages of movies whose status is Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.4212347562715877, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.17796616305292678, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,!=,Rumored), movie.original_language),movie.original_language))", "inferred_question": "Are there any original languages of movies whose status is not Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.42513822720502503, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6996199968141987, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.title))", "inferred_question": "Are there any names of movies whose status is Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.43362131671165116, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.17796616305292678, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,!=,Rumored), movie.vote_average),movie.original_language))", "inferred_question": "Are there any original languages of movies whose status is not Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.4375247876450885, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6996199968141987, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.title))", "inferred_question": "Are there any names of movies whose status is Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.4495795066759456, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.17796616305292678, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,!=,Rumored), movie.status),movie.original_language))", "inferred_question": "Are there any original languages of movies whose status is not Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.45348297760938294, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6996199968141987, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.title))", "inferred_question": "Are there any names of movies whose status is Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.48586571172927506, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.22959300891042833, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), country.name),movie.original_language))", "inferred_question": "Are there any original languages of movies whose status is Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.5121772582933772, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.17796616305292678, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,!=,Rumored), movie.popularity),movie.original_language))", "inferred_question": "Are there any original languages of movies whose status is not Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.5160807292268146, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6996199968141987, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.popularity),movie.title))", "inferred_question": "Are there any names of movies whose status is Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.518077969114529, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.22959300891042833, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.original_language))", "inferred_question": "Are there any original languages of movies whose status is Rumored?"}, {"orig_question": "Do movies exist with the status Rumored?", "score": -0.5614883522794116, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.2951868667440877, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,!=,Rumored), movie.original_language),movie.title))", "inferred_question": "Are there any names of movies whose status is not Rumored?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 126, "beams": [{"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.2366875067456039, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.2519221616502329, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.2802928956021896, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.runtime))", "inferred_question": "-"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.2955275505068186, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.runtime))", "inferred_question": "-"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.3007487405572908, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8800684865502616, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.title))", "inferred_question": "What are the names of movies with a runtime of less than 105 minutes for which people won oscars?"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.3159833954619198, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8800684865502616, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.title))", "inferred_question": "What are the names of movies with a runtime of less than 105 minutes for which people won oscars?"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.3443541294138765, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.961459100231165, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a runtime of less than 105 minutes for which people won oscars?"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.3447612018468723, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.34630827822069077, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),movie.id,oscar_winner.movie_id), movie.runtime),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.3575660159389249, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.3595887843185055, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.961459100231165, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a runtime of less than 105 minutes for which people won oscars?"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.35999585675150125, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.36154293312531977, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),movie.id,oscar_winner.oscar_id), movie.runtime),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.37280067084355384, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "score": -0.38166164207982023, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.title))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 127, "beams": [{"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.23598024521197658, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6127160115991563, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of Imagine Me & You?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.3684143749269424, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6388811479670939, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.homepage,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies whose homepage is Imagine Me & You?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.3847155896219192, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.4609113851499934, "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.year,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.4115872708352981, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.4609113851499934, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_day,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.4116298881563125, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.4609113851499934, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.44759524140681606, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.749957840988819, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a runtime of Imagine Me & You minutes?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.4626110521348892, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5828545154730915, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote average of Imagine Me & You?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.5516708520444809, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5564751941673117, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies with a revenue of Imagine Me & You dollars?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.5564006426575361, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6127160115991563, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Imagine Me & You), movie.release_date),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of Imagine Me & You?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.562909679414588, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.11168427176140105, "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.vote_count,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of people?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.5734639194997726, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.9771703902961946, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies whose name is Imagine Me & You?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.5813296594860731, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6127160115991563, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Imagine Me & You), person.birth_day),movie.runtime))", "inferred_question": "What are the runtimes of movies with a vote count of Imagine Me & You?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.5846298364194809, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.4609113851499934, "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.number,=,Imagine Me & You), movie.runtime),movie.runtime))", "inferred_question": "What are the runtimes of movies?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.6025591380166588, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.40587616200464893, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Imagine Me & You), movie.runtime),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a vote count of Imagine Me & You?"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "score": -0.6975330917095984, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.8215263515107303, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id),person.name,=,Imagine Me & You), person.birth_day),movie.runtime))", "inferred_question": "What are the runtimes of movies starring people whose name is Imagine Me & You?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 128, "beams": [{"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.3467176021455939, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(oscar_winner),person.id,oscar_winner.person_id),person.gender,=,best picture),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.3680505464957178, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.gender,=,best picture),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.3894882506203635, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),genre.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.39981608054663714, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.40170178345067714, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(oscar_winner),person.id,oscar_winner.person_id),person.gender,=,best picture),getData(movie),oscar_winner.person_id,person.id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.40395868392613804, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.412895170250771, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),genre.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.41428651385241166, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),person.death_place,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.419648832712854, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.4198308583761898, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),language.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.4232230001770446, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.4273656035565455, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.4341192764709942, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),person.gender,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.43430130213432994, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),language.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "inferred_question": "-"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "score": -0.4376934439351848, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),person.death_place,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.gender),person.gender))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 129, "beams": [{"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.25427301076880565, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.859158536802079, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "What are the categories of oscars for which people who were born before 1952-12-05 were nominated for their contribution to movies?"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.2883060329077752, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": true, "beam_nubia_score": 0.859158536802079, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "What are the categories of oscars for which people who were born before 1952-12-05 were nominated for their contribution to movies?"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.32558890069528396, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.859158536802079, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), person.name),oscar.category))", "inferred_question": "What are the categories of oscars for which people who were born before 1952-12-05 were nominated for their contribution to movies?"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.32998732260889024, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.7580709383434231, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were born before 1952-12-05 were nominated for their contribution to movies?"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.3554675253099362, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.859158536802079, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "What are the categories of oscars for which people who were born before 1952-12-05 were nominated for their contribution to movies?"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.43745665174111037, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "-"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.4456568486378749, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "-"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.45315383486962263, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), person.name),oscar.category))", "inferred_question": "-"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.45518715163927487, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.movie_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "-"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.4552343851501517, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "-"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.4587966584956444, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,movie.id), oscar.sub_category),oscar.category))", "inferred_question": "-"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.46135403176638723, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), person.name),oscar.category))", "inferred_question": "-"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.46338734853603947, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.movie_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "-"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.46343458204691623, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "-"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "score": -0.4636430364023514, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 130, "beams": [{"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.1073777597124231, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": true, "beam_nubia_score": 0.8652908292428994, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "inferred_question": "How many names of languages spoken in movies with a revenue of less than 25035950 dollars are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.12604238130435444, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": true, "beam_nubia_score": 0.8652908292428994, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "inferred_question": "How many names of languages spoken in movies with a revenue of less than 25035950 dollars are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.23012296291525808, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": true, "beam_nubia_score": 0.8652908292428994, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.revenue,<,25035950),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "inferred_question": "How many names of languages spoken in movies with a revenue of less than 25035950 dollars are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.29514994056049815, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": true, "beam_nubia_score": 0.8652908292428994, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.revenue,<,25035950), language.name),language.name))", "inferred_question": "How many names of languages spoken in movies with a revenue of less than 25035950 dollars are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.3379488348517242, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.953665835086362, "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.revenue,<,25035950),movie.revenue,<,25035950), language.name),language.name))", "inferred_question": "How many names of languages spoken in movies with a revenue of less than 25035950 dollars and with a revenue of less than 25035950 dollars are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.35040292388938116, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.8327867871120598, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "inferred_question": "How many original languages of movies with a revenue of less than 25035950 dollars in which languages is spoken are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.35117586655859856, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.7644631421841083, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_count,<,25035950), language.name),language.name))", "inferred_question": "How many names of languages spoken in movies with a vote count of less than 25035950 are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.3654117703763434, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.556015986317282, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,>,25035950), language.name),language.name))", "inferred_question": "How many names of languages spoken in movies with a revenue of more than 25035950 dollars are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.36752925407854137, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.764343904598928, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,!=,25035950), language.name),language.name))", "inferred_question": "How many names of languages spoken in movies with a revenue other than 25035950 dollars are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.3732658606618864, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.3819560147107869, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.7570868305005714, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "inferred_question": "How many names of languages spoken in movies with a revenue of at most 25035950 dollars are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.38468888940047435, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.39206736443657064, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.8327867871120598, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),movie.original_language))", "inferred_question": "How many original languages of movies with a revenue of less than 25035950 dollars in which languages is spoken are there?"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.3925632922222126, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),genre.name))", "inferred_question": "-"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "score": -0.3995119194245059, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.7644631421841083, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_count,<,25035950),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "inferred_question": "How many names of languages spoken in movies with a vote count of less than 25035950 are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 131, "beams": [{"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.19225665682037354, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.7345636507656993, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies in which languages whose name is not P?????? is spoken were produced?"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.22909497517725846, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.24771730948630277, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,>,P??????), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.27177341009574124, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.7345636507656993, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies in which languages whose name is not P?????? is spoken were produced?"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.2797230422181361, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7345636507656993, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies in which languages whose name is not P?????? is spoken were produced?"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.30338955063736517, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,>,P??????), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.31423248523686226, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),language.iso_639_1,spoken_language.iso_639_1),language.name,>,P??????), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.32218211735925706, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,>,P??????), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.3265553472323369, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,<,P??????), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.3301333945483918, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7345636507656993, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies in which languages whose name is not P?????? is spoken were produced?"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.33406936466240394, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),spoken_language.movie_id,movie.id),language.name,None,P??????), None),None))", "inferred_question": "-"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.3406990887314864, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.6576061889445122, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,P??????),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,production_country.iso_3166_1), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies in which languages whose name is P?????? is spoken were produced?"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.345854242983225, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),spoken_language.movie_id,country.iso_3166_1),language.name,None,P??????), None),None))", "inferred_question": "-"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.34644430699953965, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7345636507656993, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.movie_id),language.name,!=,P??????), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies in which languages whose name is not P?????? is spoken were produced?"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "score": -0.35366306325054575, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.7345636507656993, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "inferred_question": "Are there any names of countries in which movies in which languages whose name is not P?????? is spoken were produced?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 132, "beams": [{"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.11589954393631834, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": true, "beam_nubia_score": 0.9230139551814986, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies with a popularity of 8.58322?"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.19654492027522513, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(language),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.25994094189967915, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": true, "beam_nubia_score": 0.9230139551814986, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies with a popularity of 8.58322?"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.29003176569884515, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.9273556011224398, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.popularity,<=,8.58322), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies with a popularity of at most 8.58322?"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.3125073733564982, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(language),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.3158813945960145, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.8958943064910019, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_average,=,8.58322), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies with a vote average of 8.58322?"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.3166093898184206, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.9230139551814986, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),spoken_language.iso_639_1,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies with a popularity of 8.58322?"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.3400309111959648, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(oscar),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.352651711598581, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(movie),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.3552754198433331, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.6284590594705315, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,=,8.58322), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies whose original language is 8.58322?"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.3653830883387376, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(person),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.36606167086784075, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.36793324017153484, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.9230139551814986, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),cast.person_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies with a popularity of 8.58322?"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.37067712708602363, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(language),has_keyword.keyword_id,keyword.id),movie.popularity,<=,8.58322), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "score": -0.371372687579533, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.6739514883144984, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.revenue,=,8.58322), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies with a revenue of 8.58322 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 133, "beams": [{"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.13282127203807975, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.9803475159389803, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not born on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.14809420336724197, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6596067297312302, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not deceased on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.23594108647506018, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6596067297312302, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,!=,1886-10-12),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not deceased on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.236877608794176, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,!=,1886-10-12), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.2431344574422714, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6596067297312302, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,!=,1886-10-12), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not deceased on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.2839572395314181, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6596067297312302, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,!=,1886-10-12),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not deceased on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.29036316790306926, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.9803475159389803, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not born on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.30563609923223145, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6596067297312302, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not deceased on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.3109916887073884, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.9803475159389803, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not born on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.3226379199517449, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.9803475159389803, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not born on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.3262646200365506, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6596067297312302, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not deceased on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.33791085128090714, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6596067297312302, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not deceased on 1886-10-12?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.34184052207869375, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8231672860184103, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies which had people who were not born on 1886-10-12 working in them?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.35711345340785594, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6189897445086021, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies which had people who were not deceased on 1886-10-12 working in them?"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "score": -0.376959974661146, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6596067297312302, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,!=,1886-10-12),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies starring people who were not deceased on 1886-10-12?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 134, "beams": [{"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.059847986651892164, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.8100799715069913, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which were produced by companies whose name is Aloha Pictures?"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.17622873807605877, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.8100799715069913, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.runtime),movie.runtime)", "inferred_question": "What is the total runtime of all movies which were produced by companies whose name is Aloha Pictures?"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.32936716537953487, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.8100799715069913, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.runtime)", "inferred_question": "What is the total runtime of all movies which were produced by companies whose name is Aloha Pictures?"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.3577229474894348, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.8100799715069913, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.release_date),movie.runtime)", "inferred_question": "What is the total runtime of all movies which were produced by companies whose name is Aloha Pictures?"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.36280809208787157, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.8100799715069913, "inferred_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which were produced by companies whose name is Aloha Pictures?"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.38577563998682934, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(genre),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.3911247825519968, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.8100799715069913, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),oscar_nominee.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which were produced by companies whose name is Aloha Pictures?"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.40270718933105737, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.8100799715069913, "inferred_code": "sum(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Aloha Pictures),getData(movie),production_company.movie_id,movie.id), movie.runtime),movie.runtime)", "inferred_question": "What is the total runtime of all movies which were produced by companies whose name is Aloha Pictures?"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.4055490301843715, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(country),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.4135470398219259, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.8100799715069913, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_country.iso_3166_1), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which were produced by companies whose name is Aloha Pictures?"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.42265171297525034, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(oscar),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.42322797108691596, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(company),movie.title,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.4268551755688434, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.8100799715069913, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), oscar.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which were produced by companies whose name is Aloha Pictures?"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.4346259887918775, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.8100799715069913, "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies which were produced by companies whose name is Aloha Pictures?"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "score": -0.43486364331902366, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 135, "beams": [{"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.018826362538675312, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": true, "beam_nubia_score": 0.6772466416620574, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "inferred_question": "How many runtimes of movies whose status is not Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.5216308877352276, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.7197288406958373, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,Released), movie.runtime),movie.runtime))", "inferred_question": "How many runtimes of movies who were not released on Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.5512390440344461, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,>=,Released), movie.runtime),movie.runtime))", "inferred_question": "-"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.6702620220385143, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5411284873190039, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.release_date))", "inferred_question": "How many release dates of movies whose status is not Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.674861983723531, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6772466416620574, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), person.birth_day),movie.runtime))", "inferred_question": "How many runtimes of movies whose status is not Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.68122125123773, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5280337514265754, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,!=,Released), movie.runtime),movie.runtime))", "inferred_question": "How many runtimes of movies with a popularity other than Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.7073796224794933, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.359115632510544, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.title))", "inferred_question": "How many names of movies whose status is not Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.7098959249924519, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6772466416620574, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime))", "inferred_question": "How many runtimes of movies whose status is not Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.7134682101677754, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6772466416620574, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.runtime))", "inferred_question": "How many runtimes of movies whose status is not Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.7145032927874126, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6955804043289566, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,!=,Released), movie.runtime),movie.runtime))", "inferred_question": "How many runtimes of movies whose name is not Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.7489065235495218, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,>,Released), movie.runtime),movie.runtime))", "inferred_question": "-"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.75741605283838, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.32751159397587726, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),person.birth_day))", "inferred_question": "How many birth days of movies whose status is not Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.7600089952829876, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.5151915485895365, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,Released), movie.runtime),movie.runtime))", "inferred_question": "How many runtimes of movies whose original language is not Released are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.7965777561548748, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.4769656639646499, "inferred_code": "count(extractValues(distinct(filter(getData(movie),person.gender,!=,Released), movie.runtime),movie.runtime))", "inferred_question": "How many runtimes of movies are there?"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "score": -0.824883477158437, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "is_correct_ot": false, "beam_nubia_score": 0.6772466416620574, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.title),movie.runtime))", "inferred_question": "How many runtimes of movies whose status is not Released are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 136, "beams": [{"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.040919859696671605, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 0.9362200086084613, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity of at least 50?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.3623610019779909, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.9157194167133559, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>,50), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity of more than 50?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.39618254001575776, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.8350108240377713, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,50), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity of at most 50?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.6548152502348917, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6044370368125918, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies with a popularity of at least 50?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.6980948097699531, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.45833763883484524, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies with a popularity of at least 50?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.7086652002236089, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6393787912124885, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,!=,50), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity other than 50?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.7111391798296534, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.9157194167133559, "inferred_code": "avg(filter(getData(movie),movie.popularity,>,50),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity of more than 50?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.8503784353141824, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.4315810406453856, "inferred_code": "avg(distinct(filter(getData(movie),person.gender,>=,50), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.8904521965499422, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,>=,50), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.8907562702994483, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,null,50), movie.id),movie.revenue)", "inferred_question": "-"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.8910483036788589, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.2838282421448093, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,50), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity of less than 50?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.894953897735745, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.338703559524531, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies with a popularity of at least 50?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.8966910003541346, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.9362200086084613, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.revenue),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity of at least 50?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.9009528860673627, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.911489050341934, "inferred_code": "avg(distinct(filter(getData(movie),movie.revenue,>=,50), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a revenue of at least 50 dollars?"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "score": -0.9475387789575768, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7785714348356306, "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>=,50), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a vote average of at least 50?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 137, "beams": [{"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.2306207782675746, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8142249890953955, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people were nominated for their contribution to movies with a vote average of at least 6.2?"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.24248686669265465, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8142249890953955, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.oscar_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people were nominated for their contribution to movies with a vote average of at least 6.2?"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.2736296504669863, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.movie_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "-"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.28549573889206636, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "-"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.30276024822998776, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": true, "beam_nubia_score": 0.8142249890953955, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people were nominated for their contribution to movies with a vote average of at least 6.2?"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.3146263366550678, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8142249890953955, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.oscar_id,movie.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people were nominated for their contribution to movies with a vote average of at least 6.2?"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.34066318905345844, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "-"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.34576912042939945, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.movie_id,movie.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "-"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.35698542098414165, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8142249890953955, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.movie_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people were nominated for their contribution to movies with a vote average of at least 6.2?"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.3576351992135753, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,movie.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "-"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.36885151082700174, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8142249890953955, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.oscar_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people were nominated for their contribution to movies with a vote average of at least 6.2?"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.3814725861083548, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8142249890953955, "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people were nominated for their contribution to movies with a vote average of at least 6.2?"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.38771523327620444, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5015220953500171, "inferred_code": "sum(distinct(merge(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people were nominated for their contribution to movies?"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.4044977938950437, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8057685477898237, "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,6.2),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people were nominated for their contribution to movies with a vote average of more than 6.2?"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "score": -0.4075648769751125, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5015220953500171, "inferred_code": "sum(distinct(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "inferred_question": "What is the total number of all oscars for which people were nominated for their contribution to movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 138, "beams": [{"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.12184057558958752, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.2883528006049567, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,<=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies who were released before Released?"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.20221914376806935, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.48645558980027304, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,<=,2016-01-13), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies who were released before 2016-01-13?"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.20974303149737408, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.2883528006049567, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,<=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies who were released before Released?"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.23836205036086414, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),movie.release_date,<=,2016-01-13),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.2639807038512055, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),person.birth_day,<=,2016-01-13),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.30210039124417004, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),person.birth_day,<=,2016-01-13),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.31983466226250723, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.2883528006049567, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,<=,Released),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies who were released before Released?"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.3218303170671747, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,<=,Released),getData(cast),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.32301273268213443, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.2883528006049567, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,<=,Released), person.death_place),genre.name))", "inferred_question": "What are the names of genres comprising movies who were released before Released?"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.3485160684757505, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.21210295503399035, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),person.birth_day,<=,Released), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies?"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.3515254313521024, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.48645558980027304, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,cast.movie_id),movie.release_date,<=,2016-01-13),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies who were released before 2016-01-13?"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.35432750596312257, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,has_genre.movie_id),movie.release_date,<=,2016-01-13),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.3799278422169784, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.48645558980027304, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,<=,2016-01-13),getData(has_genre),movie.id,cast.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies who were released before 2016-01-13?"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.3805021647782892, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,2016-01-13),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "score": -0.3838070642323404, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.48645558980027304, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.release_date,<=,2016-01-13), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies who were released before 2016-01-13?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 139, "beams": [{"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.11872160997829523, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 0.7775376371452393, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "inferred_question": "How many death places of people who won oscars whose category is special effects for their contribution to movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.16565737805818448, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 0.7775376371452393, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,special effects), person.death_place),person.death_place))", "inferred_question": "How many death places of people who won oscars whose category is special effects for their contribution to movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.2143913069528509, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.2996886956733934, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.birth_place))", "inferred_question": "How many birth places of people who won oscars whose category is special effects for their contribution to movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.24692906229825756, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.4325753286130043, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "inferred_question": "How many death places of people who starred in movies who won oscars whose category is special effects for their contribution to those movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.2646026396257285, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),company.name))", "inferred_question": "-"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.2992467923014249, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.4325753286130043, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "inferred_question": "How many death places of people who starred in movies who won oscars whose category is special effects for their contribution to those movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.3076653372492904, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.4325753286130043, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.death_place))", "inferred_question": "How many death places of people who starred in movies who won oscars whose category is special effects for their contribution to those movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.3084271375543909, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.19543085905886382, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),cast.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "inferred_question": "How many death places of people who were nominated for oscars whose category is special effects for their contribution to movies who won those oscars for their contribution to those movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.3091737045986447, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.3277843789029235, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 0.7775376371452393, "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects), person.death_place),person.death_place))", "inferred_question": "How many death places of people who won oscars whose category is special effects for their contribution to movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.33251793020303777, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 0.7775376371452393, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "inferred_question": "How many death places of people who won oscars whose category is special effects for their contribution to movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.3453285428941871, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.2996886956733934, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,special effects), person.death_place),person.birth_place))", "inferred_question": "How many birth places of people who won oscars whose category is special effects for their contribution to movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.348474283861355, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.3504183215045311, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.4325753286130043, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_winner.movie_id,movie.id),oscar.category,=,special effects), person.death_place),person.death_place))", "inferred_question": "How many death places of people who starred in movies who won oscars whose category is special effects for their contribution to those movies are there?"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "score": -0.35123463663489907, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7775376371452393, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.death_place))", "inferred_question": "How many death places of people who won oscars whose category is special effects for their contribution to movies are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 140, "beams": [{"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.15982361619542318, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.30826353858455025, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,>=,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.18203666579173255, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.30826353858455025, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,>,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.18931397543625203, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.18918365786536873, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>=,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a runtime of at least 2000-01-01 minutes are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.21044585780403335, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.30826353858455025, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>=,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.2115270250325614, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.2182351799196658, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a runtime of more than 2000-01-01 minutes are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.23265890740034273, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.30826353858455025, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.2836074510979569, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.16523449117937838, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>=,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of at least 2000-01-01 dollars are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.30582050069426625, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.22478794763917465, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a revenue of more than 2000-01-01 dollars are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.3081717009534867, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.45844568835683674, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies who were released after 2000-01-01 are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.3303847505497961, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.45844568835683674, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies who were released after 2000-01-01 are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.3425746930884768, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,>=,2000-01-01), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.36062430877887847, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.30826353858455025, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,<=,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies are there?"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.3647877337552818, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,>,2000-01-01), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.3720650433998013, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>=,2000-01-01), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "score": -0.3901146590902029, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.1723464416871604, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,<=,2000-01-01), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a runtime of at most 2000-01-01 minutes are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 141, "beams": [{"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.006462776771513745, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies whose status is Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.7317849062092137, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.6009418919453184, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Post Production), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a vote average of Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.7554904225689825, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.3603445726608717, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),language.name))", "inferred_question": "What are the names of movies whose status is Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.7786837696039584, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.popularity),movie.original_language))", "inferred_question": "What are the original languages of movies whose status is Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.7978376153332647, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.3603445726608717, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.title))", "inferred_question": "What are the names of movies whose status is Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.8005215405428316, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.revenue),movie.original_language))", "inferred_question": "What are the original languages of movies whose status is Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.8232123854977544, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.17518485319329735, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.budget))", "inferred_question": "What are the budgets of movies whose status is Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.8256388782465365, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies whose status is Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.8271744131052401, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.budget),movie.original_language))", "inferred_question": "What are the original languages of movies whose status is Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.8373053673130926, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.17490223737522337, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.revenue))", "inferred_question": "What are the revenues of movies whose status is Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.845216538727982, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.8105968624275359, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Post Production), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a popularity of Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.8653514049656224, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.9369801296254873, "inferred_code": "done(extractValues(distinct(filter(getData(movie),production_country.movie_id,=,Post Production), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.8698729279858526, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.15634981028709138, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose status is Post Production?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.8847899697429966, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.9369801296254873, "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Post Production), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies?"}, {"orig_question": "What are the original languages of movies with status Post Production?", "score": -0.9029056690342259, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.9389844624834475, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Post Production), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies whose name is Post Production?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 142, "beams": [{"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.02526853277894521, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.21861557337261509, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.2551849175050966, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,<,1940-04-05),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.2928759295873602, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6964316149394442, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.365975916915083, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.3871686796489572, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,<,1940-04-05), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.39730636556469373, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.4018029355464209, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1940-04-05),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.4037325617795918, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.4186996053204973, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4381503415430652, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.budget))", "inferred_question": "What are the budgets of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.4268007140421544, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1940-04-05), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.4298161477074144, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.936504380269224, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born after 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.43421753657000134, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.movie_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 won oscars?"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.4363416038781335, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "score": -0.4497026334779806, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 1940-04-05 were nominated for oscars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 143, "beams": [{"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.16526595928509147, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.733534513045123, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is expiration for which people were nominated for oscars are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.22071724441520824, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6680027878109602, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.category))", "inferred_question": "How many categories of oscars for which people were nominated for their contribution to movies with keywords whose name is expiration are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.22914821621972378, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6383795507641393, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.number))", "inferred_question": "How many numbers of oscars for which people were nominated for their contribution to movies with keywords whose name is expiration are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.25614499847476824, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.733534513045123, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,has_keyword.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is expiration for which people were nominated for oscars are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.2576120866306086, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.733534513045123, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,production_company.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is expiration for which people were nominated for oscars are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.25814824404716014, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(production_company),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.28117711168967013, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),company.name))", "inferred_question": "-"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.29844779330977017, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.733534513045123, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is expiration for which people were nominated for oscars are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.30239933516279016, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.733534513045123, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,movie.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is expiration for which people were nominated for oscars are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.3033317557371667, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.64743596666056, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,oscar_nominee.oscar_id), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is expiration for which people won oscars are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.3102302498924831, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.64743596666056, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is expiration for which people won oscars are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.311596283604885, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6680027878109602, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,has_keyword.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.category))", "inferred_question": "How many categories of oscars for which people were nominated for their contribution to movies with keywords whose name is expiration are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.31306337176072535, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6680027878109602, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,production_company.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.category))", "inferred_question": "How many categories of oscars for which people were nominated for their contribution to movies with keywords whose name is expiration are there?"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.3135995291772769, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(production_company),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.category))", "inferred_question": "-"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "score": -0.3200272554094006, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.6383795507641393, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,has_keyword.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.number))", "inferred_question": "How many numbers of oscars for which people were nominated for their contribution to movies with keywords whose name is expiration are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 144, "beams": [{"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.05481723339225459, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.3889602432140846, "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with genres whose name is TV Movie with maximum revenue?"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.17606303862224512, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.3889602432140846, "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with genres whose name is TV Movie with maximum revenue?"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.26278886415127783, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.3889602432140846, "inferred_code": "done(extractValues(max(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,TV Movie),movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with genres whose name is TV Movie with maximum revenue?"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.26770688714025853, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.3889602432140846, "inferred_code": "done(extractValues(max(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,TV Movie),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with genres whose name is TV Movie with maximum revenue?"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.2909357072133608, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,<,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.38892895690170365, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(genre),person.death_place,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.3944681725673377, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,<=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.395217500583469, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.3889602432140846, "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),has_genre.movie_id,has_genre.genre_id),movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with genres whose name is TV Movie with maximum revenue?"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.39817447496158015, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,TV Movie),merge(getData(genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.4132428809569107, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.4279503895090984, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(genre),has_genre.genre_id,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.4289425217338643, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,<,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.43809872988973386, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.3889602432140846, "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.name,has_genre.genre_id),movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with genres whose name is TV Movie with maximum revenue?"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.4407866522081873, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.3889602432140846, "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,spoken_language.iso_639_1),movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with genres whose name is TV Movie with maximum revenue?"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "score": -0.4806809003889592, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.3046440318176613, "inferred_code": "done(extractValues(max(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with genres with maximum revenue?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 145, "beams": [{"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.0957388475921749, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": true, "beam_nubia_score": 0.7755157837432198, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were not deceased in Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.20137295902903107, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": true, "beam_nubia_score": 0.7755157837432198, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were not deceased in Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.24334947656017142, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.6801818588951032, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.number))", "inferred_question": "How many numbers of oscars which people who were not deceased in Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.27959663591096245, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7670612194217782, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were not deceased on Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.29515571895464426, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7295909852843581, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were not born in Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.2962763455929074, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.617236310279315, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.gender,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people whose gender is not Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.2994701930051041, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.6634257859922561, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.year))", "inferred_question": "How many years of oscars which people who were not deceased in Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.30500361390691544, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7755157837432198, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.number),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were not deceased in Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.3081087934146747, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7670612194217782, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_day,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were not deceased on Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.31713079019758844, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7755157837432198, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.year),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were not deceased in Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.34666196054908016, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.2906996743395085, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were not deceased in Ventura, Kalifornien won for their contribution to movies which those people won for their contribution to those movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.3475376141026634, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.6801818588951032, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.number))", "inferred_question": "How many numbers of oscars which people who were not deceased in Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.3678246572301277, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.728548293221656, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.category))", "inferred_question": "How many categories of oscars which people who were not deceased in Ventura, Kalifornien won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.38061348958589514, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.6575860605322448, "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.number,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars with a number other than Ventura, Kalifornien which people won for their contribution to movies are there?"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "score": -0.3832087547583979, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.8495178094166864, "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(person),person.death_place,!=,Ventura, Kalifornien),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "inferred_question": "How many sub-categories of oscars which people who were not deceased in Ventura, Kalifornien and who were not deceased in Ventura, Kalifornien won for their contribution to movies are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 146, "beams": [{"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.12850868823807104, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "inferred_question": "What are the statuses of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.3125374776391254, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.5337099274610488, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.runtime))", "inferred_question": "What are the runtimes of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.36430688324253424, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.6944587900421287, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.title))", "inferred_question": "What are the names of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.4284536999730335, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.5406024896052233, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.release_date))", "inferred_question": "What are the release dates of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.4374803167847858, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.4670796955574674, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.4439733189610706, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.3130774702616588, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),person.birth_place))", "inferred_question": "What are the birth places of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.4969007236031757, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.5694261136693581, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.popularity))", "inferred_question": "What are the popularities of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.5006009259341226, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.vote_average),movie.status))", "inferred_question": "What are the statuses of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.5125518602399097, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.4747840046171019, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),production_country.iso_3166_1))", "inferred_question": "What are the iso_3166_1s of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.5768658083943592, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.20395435158956354, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.original_language))", "inferred_question": "What are the original languages of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.581955925848888, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.6493248085955643, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),oscar.sub_category))", "inferred_question": "What are the sub-categories of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.5844781434243487, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.9502171660253255, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,139000000), movie.status),movie.status))", "inferred_question": "What are the statuses of movies with a revenue of more than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.5867746633557545, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.6279847455387129, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),oscar_winner.movie_id))", "inferred_question": "What are the movie_ids of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.5898020428685413, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.38457012005435753, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),person.birth_day))", "inferred_question": "What are the birth days of movies with a revenue other than 139000000 dollars?"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "score": -0.5977822703389393, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "is_correct_ot": false, "beam_nubia_score": 0.6279847455387129, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),production_country.movie_id))", "inferred_question": "What are the movie_ids of movies with a revenue other than 139000000 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 147, "beams": [{"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.005417802145530004, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.8480453730409286, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "inferred_question": "What are the names of movies whose status is Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.7171898686865461, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.44896637486605784, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Post Production), movie.title),movie.title))", "inferred_question": "What are the names of movies with a vote average of Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.7987605798480217, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.1802320141173377, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.budget))", "inferred_question": "What are the budgets of movies whose status is Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.8119583008883637, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8480453730409286, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.budget),movie.title))", "inferred_question": "What are the names of movies whose status is Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.8319992029646528, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6241310492739951, "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Post Production), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.8579963052252424, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6241310492739951, "inferred_code": "done(extractValues(distinct(filter(getData(movie),production_country.movie_id,=,Post Production), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.8600016115306062, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8480453730409286, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), company.name),movie.title))", "inferred_question": "What are the names of movies whose status is Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.8653913009402459, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.17970170147394915, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.original_language))", "inferred_question": "What are the original languages of movies whose status is Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.8662818276861799, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6575106654492572, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Post Production), movie.title),movie.title))", "inferred_question": "What are the names of movies with a popularity of Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.8739988672969048, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8480453730409286, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),company.name))", "inferred_question": "What are the names of movies whose status is Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.8933893048742902, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7900064658210076, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Post Production), movie.title),movie.title))", "inferred_question": "What are the names of movies whose name is Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.932174073481292, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.16481686765981107, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.vote_count))", "inferred_question": "What are the vote counts of movies whose status is Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.9467402881055023, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.03584383400660218, "inferred_code": "done(extractValues(distinct(filter(getData(country),movie.status,=,Post Production), movie.title),movie.title))", "inferred_question": "What are the names of countries?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.9488206384776277, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8480453730409286, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.title))", "inferred_question": "What are the names of movies whose status is Post Production?"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "score": -0.9630542600134504, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5579233329704394, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Post Production), movie.title),movie.title))", "inferred_question": "What are the names of movies whose original language is Post Production?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 148, "beams": [{"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.1035101073545041, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6858150550021498, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were nominated for oscars for their contribution to movies who were released on Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.17203968179162546, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.3280435005626223, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people who were nominated for oscars for their contribution to movies who were released on Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.2108828189150198, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.5712130783829625, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.name))", "inferred_question": "What are the names of people who were nominated for oscars for their contribution to movies who were released on Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.2572823513213965, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6598073130380157, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_place))", "inferred_question": "What are the birth places of people who were nominated for oscars for their contribution to movies who were released on Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.25952711964066344, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6858150550021498, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),person.birth_day))", "inferred_question": "What are the birth days of people who were nominated for oscars for their contribution to movies who were released on Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.2737700607385439, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": true, "beam_nubia_score": 0.5756250652559936, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were nominated for oscars for their contribution to movies whose status is Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.2749489746141669, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.5832336021629602, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were nominated for oscars for their contribution to movies whose name is Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.2841463121139087, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.7068659490496934, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,<=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were nominated for oscars for their contribution to movies who were released before Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.2952756344213976, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.6858150550021498, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.name),person.birth_day))", "inferred_question": "What are the birth days of people who were nominated for oscars for their contribution to movies who were released on Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.3280566940777848, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.3280435005626223, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),person.death_day))", "inferred_question": "What are the death days of people who were nominated for oscars for their contribution to movies who were released on Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.33610987216376265, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.7068659490496934, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,<,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of people who were nominated for oscars for their contribution to movies who were released before Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.3422996351756652, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.24065624684258358, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people who were nominated for oscars for their contribution to movies whose status is Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.3434785490512883, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.2700590079545062, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people who were nominated for oscars for their contribution to movies whose name is Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.34427091312547226, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.47348042446870164, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),oscar.year))", "inferred_question": "What are the years of oscars for which people were nominated for their contribution to movies who were released on Released?"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "score": -0.35267588655103005, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "is_correct_ot": false, "beam_nubia_score": 0.33074361836385835, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,<=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.death_day))", "inferred_question": "What are the death days of people who were nominated for oscars for their contribution to movies who were released before Released?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 149, "beams": [{"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.07988853066049106, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.1443339783361712, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.23284053581545552, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,germany), movie.id),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.23447752160689905, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.3388053586272, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,<=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.3563141060956228, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.35842795817556344, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,germany),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.3829813317531291, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.40302863790346427, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), oscar.id),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.4032508063028801, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,<=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.4095883363531208, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), keyword.id),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.41292145502293315, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,germany), movie.vote_average),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.4413680362564385, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.44742678878615744, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "score": -0.447491390500414, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9077226917033635, "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), oscar.sub_category),movie.vote_average)", "inferred_question": "What is the total vote average of all movies with keywords whose name is germany?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 150, "beams": [{"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.06470319334323507, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5882286088310724, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Dennis Gordon), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose gender is Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.19389362310183073, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5882286088310724, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,Dennis Gordon), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose gender is Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.2598358853259253, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.746559612057057, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Dennis Gordon),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose name is Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.2682891780730919, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.746559612057057, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,Dennis Gordon), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose name is Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.30297757278503296, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5882286088310724, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Dennis Gordon), movie.runtime),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose gender is Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.3177776543384476, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.6271481370319314, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,=,Dennis Gordon), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born in Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.3334985301667496, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.601381867472045, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,=,Dennis Gordon), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born on Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.3501065796467923, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5882286088310724, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,=,Dennis Gordon),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose gender is Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.38183821057884504, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.6385385166782549, "inferred_code": "avg(distinct(filter(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,Dennis Gordon), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose name is Dennis Gordon and whose gender is Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.38901113337077803, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.601381867472045, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,=,Dennis Gordon), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born on Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.39178634998570017, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.746559612057057, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Dennis Gordon),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.runtime),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose name is Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.3948807018899002, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.6271481370319314, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,=,Dennis Gordon), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people who were born in Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.4030167488398517, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5882286088310724, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Dennis Gordon), movie.release_date),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose gender is Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.41642510600398575, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5882286088310724, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_nominee.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Dennis Gordon), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose gender is Dennis Gordon working in them?"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "score": -0.42413875008280155, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.746559612057057, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.name,=,Dennis Gordon), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies which had people whose name is Dennis Gordon working in them?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 151, "beams": [{"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.028421514380170265, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of less than 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.2846227015288605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6436896643719856, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,156), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of at most 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.3880941892894043, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.47196445726475644, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,156), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of more than 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.7179001878866984, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of less than 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.7324051584037079, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.590295708206255, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,156), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of at least 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.8059825391428603, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5544825883556588, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.title))", "inferred_question": "What are the names of movies with a runtime of less than 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.8454611028464569, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,null,156), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.8562653373846842, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.title),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of less than 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.8572046607187076, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8684889183032658, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,156), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a vote average of less than 156?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.8693653058180644, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), person.death_day),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of less than 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.870637031915976, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,156), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime other than 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.9088680457243754, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.budget),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of less than 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.9315875154970854, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a runtime of less than 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.9376208276407851, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9689679799879577, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a runtime of less than 156 minutes?"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "score": -0.9467033594301029, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<,156), movie.vote_count),movie.vote_count))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 152, "beams": [{"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.12556426076449842, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.6264480733514407, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Gerard Johnstone), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people whose gender is Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.16196003978403561, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.6556311749689647, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,=,Gerard Johnstone), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people who were born in Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.22108292922825187, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.4933140019128942, "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Gerard Johnstone),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people who were deceased in Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.24967848505544818, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.4933140019128942, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_place,=,Gerard Johnstone), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people who were deceased in Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.255495602498804, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.8754260696970622, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people whose name is Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.2659187946353636, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.6358858910996203, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,=,Gerard Johnstone), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people who were born on Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.27624298840375866, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.4942917288799553, "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,=,Gerard Johnstone),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people who were deceased on Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.28613255082086586, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.8754260696970622, "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.name,=,Gerard Johnstone),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people whose name is Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.30401228017606297, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.6381015020012054, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.release_date,=,Gerard Johnstone), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies who were released on Gerard Johnstone which had people working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.31594918915718184, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.4933140019128942, "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,Gerard Johnstone),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people who were deceased in Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.32223083978446976, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.39792978105664667, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),oscar.category,=,Gerard Johnstone), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.3250930140446785, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.8754260696970622, "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people whose name is Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.3372733016426615, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.8754260696970622, "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,=,Gerard Johnstone),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people whose name is Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.362428566794866, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.6358858910996203, "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.birth_day,=,Gerard Johnstone),getData(movie),crew.movie_id,movie.id), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies which had people who were born on Gerard Johnstone working in them?"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "score": -0.3799961213754236, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.5477841628748102, "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.homepage,=,Gerard Johnstone), movie.id),movie.popularity)", "inferred_question": "What is the total popularity of all movies whose homepage is Gerard Johnstone which had people working in them?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 153, "beams": [{"orig_question": "Which movies have been translated to Polski?", "score": -0.27223934351750373, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.29196198008091995, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.30313253371747495, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.3081093460748553, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.32285517028089117, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.3272234295745398, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.3278319826382715, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.3390025362748265, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.3469460661379561, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Polski),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.358112787701916, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,movie.id), language.name),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.35811661977451104, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.3587251728382428, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.36026898261525947, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.19852594289922165, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Polski),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies in which languages whose name is Polski is spoken?"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.36309344760277695, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "inferred_question": "-"}, {"orig_question": "Which movies have been translated to Polski?", "score": -0.3778354397362178, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,movie.id), language.name),movie.title))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 154, "beams": [{"orig_question": "What is the language of the movie Sky High?", "score": -0.24943590155614473, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.3887157744511843, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Sky High), language.name),language.name))", "inferred_question": "What are the names of languages whose name is Sky High spoken in movies?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.26879628079768736, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 0.5245460971583448, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies whose name is Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.2813665427529486, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5542512671898117, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sky High), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies whose original language is Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.3020970978104742, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.21498140901824803, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),language.name))", "inferred_question": "What are the names of movies whose name is Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.31466735976573545, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.4442820734324523, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sky High), movie.original_language),language.name))", "inferred_question": "What are the names of movies whose original language is Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.3590020098054083, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5245460971583448, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies whose name is Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.3667269495374837, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.18269101657452103, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Sky High), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies in which languages whose name is Sky High is spoken?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.37157227176066954, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5542512671898117, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sky High), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies whose original language is Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.38103124588323134, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.3073795231014693, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,=,Sky High), language.name),language.name))", "inferred_question": "What are the names of languages spoken in movies with a vote average of Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.39230282681819517, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.21498140901824803, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), language.name),language.name))", "inferred_question": "What are the names of movies whose name is Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.4048730887734564, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.4442820734324523, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sky High), language.name),language.name))", "inferred_question": "What are the names of movies whose original language is Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.4355885021826985, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Sky High), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.43886554114870197, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.4079509526019647, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.original_language,=,Sky High), language.name),language.name))", "inferred_question": "What are the names of languages spoken in movies whose original language is Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.4637488176929823, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.3800159237726707, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,=,Sky High), language.name),language.name))", "inferred_question": "What are the names of languages spoken in movies with a popularity of Sky High?"}, {"orig_question": "What is the language of the movie Sky High?", "score": -0.46718827451503164, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.3887157744511843, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),language.name,=,Sky High), language.name),language.name))", "inferred_question": "What are the names of languages whose name is Sky High spoken in movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 155, "beams": [{"orig_question": "How many movies in africaans exist?", "score": -0.28732347032928374, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5733047120964557, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.title),movie.title))", "inferred_question": "How many names of movies whose original language is af are there?"}, {"orig_question": "How many movies in africaans exist?", "score": -0.3435498355975142, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.11509255994809398, "inferred_code": "count(extractValues(distinct(filter(getData(genre),movie.original_language,=,af), movie.title),movie.title))", "inferred_question": "How many names of genres are there?"}, {"orig_question": "How many movies in africaans exist?", "score": -0.38705413333082106, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.05792646478658958, "inferred_code": "count(extractValues(distinct(filter(getData(person),movie.original_language,=,af), movie.title),movie.title))", "inferred_question": "How many names of people are there?"}, {"orig_question": "How many movies in africaans exist?", "score": -0.426031458293437, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.057487283544503276, "inferred_code": "count(extractValues(distinct(filter(getData(country),movie.original_language,=,af), movie.title),movie.title))", "inferred_question": "How many names of countries are there?"}, {"orig_question": "How many movies in africaans exist?", "score": -0.4718895471742144, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.39324941660818935, "inferred_code": "count(extractValues(distinct(filter(getData(movie),genre.name,=,af), movie.title),movie.title))", "inferred_question": "How many names of movies are there?"}, {"orig_question": "How many movies in africaans exist?", "score": -0.5205876397070431, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),genre.name,=,af), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies in africaans exist?", "score": -0.5217646752025734, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),genre.name,=,af), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies in africaans exist?", "score": -0.5251507920106776, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,af), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies in africaans exist?", "score": -0.5263278275062078, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,af), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies in africaans exist?", "score": -0.5358876126213153, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.47150573285745534, "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),genre.name,=,af), movie.title),movie.title))", "inferred_question": "How many names of movies in which languages is spoken are there?"}, {"orig_question": "How many movies in africaans exist?", "score": -0.5370646481168456, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),genre.name,=,af), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies in africaans exist?", "score": -0.537375644066178, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),genre.name,=,af), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies in africaans exist?", "score": -0.5404507708779528, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.15768921913791834, "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,af), movie.title),movie.title))", "inferred_question": "How many names of movies in which languages whose name is af is spoken are there?"}, {"orig_question": "How many movies in africaans exist?", "score": -0.541627806373483, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,af), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies in africaans exist?", "score": -0.5419388023228154, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,af), movie.title),movie.title))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 156, "beams": [{"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.1154012756596785, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.641437895113731, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies whose original language is not Algeria?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.14206666519748978, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4356674704293224, "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.3140603380452376, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6529379790580745, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies whose name is not Algeria?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.3403223921514234, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.728801208244489, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies which were produced in countries whose name is not Algeria?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.43902171423542313, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4356674704293224, "inferred_code": "done(extractValues(distinct(filter(getData(movie),genre.name,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.5263367371808272, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4356674704293224, "inferred_code": "done(extractValues(distinct(filter(getData(movie),company.name,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.5310340483080482, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5102689267063965, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.original_language,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies whose original language is not Algeria which were produced in countries?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.5341422634373885, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.610410809649058, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies whose status is not Algeria?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.5683384614239912, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4356674704293224, "inferred_code": "done(extractValues(distinct(filter(getData(movie),keyword.name,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.5872619033005401, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.20602541491365411, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),genre.name,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies which were produced in countries?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.6041105466138106, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4356674704293224, "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.category,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.6125598470389377, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.30059173490654745, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies whose original language is Algeria?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.6249244289647322, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4356674704293224, "inferred_code": "done(extractValues(distinct(filter(getData(movie),production_country.movie_id,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.639225236576749, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4356674704293224, "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "score": -0.6786376314412337, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4356674704293224, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_place,!=,Algeria), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 157, "beams": [{"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.07773327502218308, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": true, "beam_nubia_score": 0.8327666504767673, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.31504821079579415, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.8327666504767673, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), person.birth_day),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.32369368570653023, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.653214777821755, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),person.birth_day))", "inferred_question": "What are the birth days of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.4558937070032698, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.2932101338180535, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,9.3582), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of less than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.4724618722757441, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.1829998973602215, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.budget))", "inferred_question": "What are the budgets of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.4940625359377009, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.5842903297270315, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.runtime))", "inferred_question": "What are the runtimes of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.5610086214801413, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.653214777821755, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), person.birth_day),person.birth_day))", "inferred_question": "What are the birth days of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.5960255791505915, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.8327666504767673, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.runtime),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.6034934935232741, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.7064605567629356, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,9.3582), movie.release_date),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity other than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.6164468755087, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.2920900132037525, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.revenue))", "inferred_question": "What are the revenues of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.6279654731115443, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.18283469104625127, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),person.death_day))", "inferred_question": "What are the death days of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.6409267117342097, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.8327666504767673, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.budget),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.6780599583944422, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.44065389949637124, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),crew.movie_id))", "inferred_question": "What are the movie_ids of movies with a popularity of more than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.6932086427768809, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.2932101338180535, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,9.3582), person.birth_day),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of less than 9.3582?"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "score": -0.6945778061708552, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "is_correct_ot": false, "beam_nubia_score": 0.8327666504767673, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), crew.person_id),movie.release_date))", "inferred_question": "What are the release dates of movies with a popularity of more than 9.3582?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 158, "beams": [{"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.06608149841486011, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.4354445061733835, "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.popularity),movie.popularity))", "inferred_question": "How many popularities of keywords whose name is cgi are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.2315693349556312, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": true, "beam_nubia_score": 0.79983578351479, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "How many popularities of movies with keywords whose name is cgi are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.34648368841481714, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": true, "beam_nubia_score": 0.79983578351479, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,cgi), movie.popularity),movie.popularity))", "inferred_question": "How many popularities of movies with keywords whose name is cgi are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.36969427717087455, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": true, "beam_nubia_score": 0.79983578351479, "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "inferred_question": "How many popularities of movies with keywords whose name is cgi are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.45989516995905433, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.16794010064726916, "inferred_code": "count(extractValues(distinct(filter(getData(genre),keyword.name,=,cgi), movie.popularity),movie.popularity))", "inferred_question": "How many popularities of genres are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.4708802677084137, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.5800350356440496, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "How many popularities of movies in which languages is spoken with keywords whose name is cgi are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.48524050173655175, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "-"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.4870314063882688, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.07021405573451256, "inferred_code": "count(extractValues(distinct(filter(getData(company),keyword.name,=,cgi), movie.popularity),movie.popularity))", "inferred_question": "How many popularities of companies are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.49139761581269503, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6803571292619166, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.status))", "inferred_question": "How many statuses of movies with keywords whose name is cgi are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.4982847850259046, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),person.gender))", "inferred_question": "-"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.5154880943001464, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.5800350356440496, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "inferred_question": "How many popularities of movies in which languages is spoken with keywords whose name is cgi are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.5271172460693602, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.3970828947690218, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.release_date))", "inferred_question": "How many release dates of movies with keywords whose name is cgi are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.558110186495469, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.23970580617265846, "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.popularity),movie.release_date))", "inferred_question": "How many release dates of keywords whose name is cgi are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.5586732715746621, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.2772288016704344, "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.popularity),movie.revenue))", "inferred_question": "How many revenues of keywords whose name is cgi are there?"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "score": -0.55915588928448, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.5245151345798889, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.revenue))", "inferred_question": "How many revenues of movies with keywords whose name is cgi are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 159, "beams": [{"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.08563820812338745, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8253542264081588, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.15708041911110882, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8253542264081588, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.1618155938180563, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8253542264081588, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.24782293682113807, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8919808573018344, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "What are the categories of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.25965130891251526, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8699373708474257, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "What are the sub-categories of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.31926514780885945, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8919808573018344, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "inferred_question": "What are the categories of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.3240003225158069, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": true, "beam_nubia_score": 0.8919808573018344, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "What are the categories of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.3310935199002366, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8699373708474257, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.sub_category))", "inferred_question": "What are the sub-categories of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.3358286946071841, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8699373708474257, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "inferred_question": "What are the sub-categories of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.3460958160862828, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8253542264081588, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),person.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.36616392119312313, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8253542264081588, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.3681479385692379, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8253542264081588, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.3768893073527077, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8253542264081588, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.4047150593686841, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),company.name))", "inferred_question": "-"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "score": -0.4092726252635991, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "is_correct_ot": false, "beam_nubia_score": 0.8253542264081588, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), keyword.name),oscar.number))", "inferred_question": "What are the numbers of oscars which people won for their contribution to movies with a revenue of at most 13391174 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 160, "beams": [{"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.09328338426644235, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.name),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.20230520057985202, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,<=,550000), person.name),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.226503521836153, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9969546334056323, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,>=,550000), person.name),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at least 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.22812087576327966, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.name),person.name))", "inferred_question": "Are there any names of people who won oscars for their contribution to movies with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.24266659268251545, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.2943584776134827, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id),movie.budget,<=,550000), person.name),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.29668154862839186, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9219913560840058, "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,<=,550000),movie.budget,<=,550000), person.name),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at most 550000 dollars and with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.3034732638522578, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,spoken_language.movie_id),movie.budget,<=,550000), person.name),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.3355253381495627, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9969546334056323, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,>=,550000), person.name),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at least 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.33714269207668934, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,<=,550000), person.name),person.name))", "inferred_question": "Are there any names of people who won oscars for their contribution to movies with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.35168840899592513, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.35713855552913726, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9219913560840058, "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,<=,550000),movie.budget,<=,550000), person.gender),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at most 550000 dollars and with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.3613410133329903, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9674569041971542, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,>=,550000), person.name),person.name))", "inferred_question": "Are there any names of people who won oscars for their contribution to movies with a budget of at least 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.36912670610662107, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.budget,<=,550000), person.name),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at most 550000 dollars?"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "score": -0.3758867302522261, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.9969546334056323, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,>=,550000), person.gender),person.gender))", "inferred_question": "Are there any genders of people who won oscars for their contribution to movies with a budget of at least 550000 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 161, "beams": [{"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.15736240899950055, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": true, "beam_nubia_score": 0.5198784725008176, "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "inferred_question": "What are the vote averages of movies which were produced in countries whose name is Morocco with maximum popularity?"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.18479294934598645, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": true, "beam_nubia_score": 0.5198784725008176, "inferred_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_average))", "inferred_question": "What are the vote averages of movies which were produced in countries whose name is Morocco with maximum popularity?"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.21188578233554117, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.270468505876557, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.5500913818377637, "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_count))", "inferred_question": "What are the vote counts of movies which were produced in countries whose name is Morocco with maximum popularity?"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.3326400393438062, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.5500913818377637, "inferred_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_count))", "inferred_question": "What are the vote counts of movies which were produced in countries whose name is Morocco with maximum popularity?"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.3343239483976538, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.34749370551435316, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.46017884666677966, "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.runtime))", "inferred_question": "What are the runtimes of movies which were produced in countries whose name is Morocco with maximum popularity?"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.35973287233336093, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.3600626488929678, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(crew),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.37505173882652176, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),country.name,=,Morocco),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.3825756467726744, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.5198784725008176, "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "inferred_question": "What are the vote averages of movies which were produced in countries whose name is Morocco with maximum popularity?"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.3833065924694716, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.3887386006499552, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(filter(merge(getData(genre),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_average))", "inferred_question": "-"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.3894394248375581, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.5198784725008176, "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(production_country),getData(movie),oscar_winner.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "inferred_question": "What are the vote averages of movies which were produced in countries whose name is Morocco with maximum popularity?"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "score": -0.3935789282253846, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(genre),country.name,=,Morocco),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 162, "beams": [{"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.030598865159499233, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose name is not Warrior?"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.20456566243824473, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,!=,Warrior), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose name is not Warrior?"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.2999401305163396, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Warrior),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose name is not Warrior?"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.34326501479186033, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.34941247231714334, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,!=,Warrior),movie.title,!=,Warrior), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose name is not Warrior and whose name is not Warrior?"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.3496532285588837, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,!=,Warrior),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose name is not Warrior and whose name is not Warrior?"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.36377608197454797, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.7408090874176526, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,!=,Warrior), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose original language is not Warrior?"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.4008499179547447, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),company.name,!=,Warrior), company.name),company.name))", "inferred_question": "What are the names of companies whose name is not Warrior which produced movies?"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.40173458202443163, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,>=,Warrior), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.4054688147317474, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,oscar_nominee.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose name is not Warrior?"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.412169836034743, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.4127302459868818, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(production_company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose name is not Warrior which produced those movies?"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.41485739146694245, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose name is not Warrior?"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.4153849614165795, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),person.birth_place))", "inferred_question": "-"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "score": -0.41665124917776636, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.9900489115787111, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.status,!=,Warrior), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies whose status is not Warrior?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 163, "beams": [{"orig_question": "How many countries have movies in the genre War?", "score": -0.23204098113588784, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.34579261056636534, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "How many names of countries in which movies with genres whose name is War were produced are there?"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.2404351603531348, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,War),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.name,=,War), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.26471017287321014, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.34579261056636534, "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "inferred_question": "How many names of countries in which movies with genres whose name is War were produced are there?"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.2696334074238574, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.27686635923223696, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.34579261056636534, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.id,production_country.movie_id), country.name),country.name))", "inferred_question": "How many names of countries in which movies with genres whose name is War were produced are there?"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.2769710101844343, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.34579261056636534, "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "inferred_question": "How many names of countries in which movies with genres whose name is War were produced are there?"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.2795150325862047, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.34579261056636534, "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(getData(has_genre),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "inferred_question": "How many names of countries in which movies with genres whose name is War were produced are there?"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.28593839288781253, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.34579261056636534, "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "inferred_question": "How many names of countries in which movies with genres whose name is War were produced are there?"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.2992772526070558, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.34579261056636534, "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_country),movie.id,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "inferred_question": "How many names of countries in which movies with genres whose name is War were produced are there?"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.30348159085592014, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.34579261056636534, "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_genre.genre_id,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "inferred_question": "How many names of countries in which movies with genres whose name is War were produced are there?"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.30466925781970683, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.34579261056636534, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_genre.genre_id,production_country.movie_id), country.name),country.name))", "inferred_question": "How many names of countries in which movies with genres whose name is War were produced are there?"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.31662156102012995, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.31765740505677836, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),oscar.category))", "inferred_question": "-"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.3207539578468761, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.34579261056636534, "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.name,=,War), country.name),country.name))", "inferred_question": "How many names of countries in which movies with genres whose name is War were produced are there?"}, {"orig_question": "How many countries have movies in the genre War?", "score": -0.3251704167255373, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(country),has_genre.genre_id,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 164, "beams": [{"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.17660735615810283, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.2491815525301185, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.2577095995889168, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.26194545302165845, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.30566054118183794, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.31587084830834106, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.32607221762390715, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.3372879531684145, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_nominee.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.3416158858553295, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),cast.movie_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.3445169198647428, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.34513257746584713, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 0.8306354631322531, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who were deceased on 1975-10-25?"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.34585173928807106, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.movie_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.34875277814295197, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.35875870067648985, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),oscar_nominee.person_id,person.id),person.id,cast.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "Where died the person which died on 1975-10-25?", "score": -0.36283593274620485, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,<=,1975-10-25), person.death_place),person.death_place))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 165, "beams": [{"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.0709797897462273, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.5867021822203834, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "inferred_question": "How many names of companies which produced movies whose name is Sardaarji are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.1482961117175623, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.46453919963520984, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,=,Sardaarji), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a runtime of Sardaarji minutes are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.23647440833209024, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.5867021822203834, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "How many names of companies which produced movies whose name is Sardaarji are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.267518499921027, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.410185018379554, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,=,Sardaarji), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a vote count of Sardaarji are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.2822790587784515, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.47277043425609977, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,=,Sardaarji), company.name),company.name))", "inferred_question": "How many names of companies which produced movies who were released on Sardaarji are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.29108254781825665, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.39004630910735594, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_average,=,Sardaarji), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a vote average of Sardaarji are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.2948976263896366, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5094034177098128, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Sardaarji), company.name),company.name))", "inferred_question": "How many names of companies which produced movies whose status is Sardaarji are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.31264116709017253, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.5867021822203834, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Sardaarji),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "inferred_question": "How many names of companies which produced movies whose name is Sardaarji are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.32770516500313435, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.43345346847723765, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.homepage,=,Sardaarji), company.name),company.name))", "inferred_question": "How many names of companies which produced movies whose homepage is Sardaarji are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.34306541165692434, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),person.birth_place))", "inferred_question": "-"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.35397824456726934, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.4480036323671417, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.budget,=,Sardaarji), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with a budget of Sardaarji dollars are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.37058794827246294, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.5867021822203834, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,=,Sardaarji), company.name),company.name))", "inferred_question": "How many names of companies which produced movies whose name is Sardaarji are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.37895936632929816, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,<=,Sardaarji), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.39143493422628445, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5010760700211725, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.original_language,=,Sardaarji), company.name),company.name))", "inferred_question": "How many names of companies which produced movies whose original language is Sardaarji are there?"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "score": -0.3990137601474891, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),person.death_place))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 166, "beams": [{"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.12846905684307308, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.12908070302788605, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.2874854776617943, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.32215728301376506, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.35841236483764366, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.8714138194631561, "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.3814250872695654, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.3824262252026935, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.4147492081374697, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.41536085432228265, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.4546414023004365, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.8714138194631561, "inferred_code": "done(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.45857324714390924, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.4591848933287222, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.4608196589918307, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,theatre audience), movie.vote_average),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.483880214941159, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9156161551923512, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.runtime),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with keywords whose name is theatre audience?"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "score": -0.48433409921250226, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 167, "beams": [{"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.007292765309102833, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of less than 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.6228551000822335, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5869772679325068, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,1100000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of at most 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.7390169885475188, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.4978969446197584, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),language.name))", "inferred_question": "What are the names of movies with a budget of less than 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.7472065419424325, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5143670412991501, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,1100000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of more than 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.7736032620305195, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,1100000), movie.original_language),movie.original_language))", "inferred_question": "-"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.7860370889538899, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.7635935181566791, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,1100000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a revenue of less than 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.7866995349759236, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<,1100000), movie.original_language),movie.original_language))", "inferred_question": "-"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.7902103557717055, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of less than 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.8096546318847686, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5749613308195661, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.budget))", "inferred_question": "What are the budgets of movies with a budget of less than 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.8146252527367324, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.popularity),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of less than 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.8267897262703627, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.revenue),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of less than 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.8295537617523223, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.38675387983243803, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.revenue))", "inferred_question": "What are the revenues of movies with a budget of less than 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.843470872961916, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.5056632763928737, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,1100000), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies who were released before 1100000?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.8576187279541045, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 0.4978969446197584, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.title))", "inferred_question": "What are the names of movies with a budget of less than 1100000 dollars?"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "score": -0.8610998287331313, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.budget),movie.original_language))", "inferred_question": "What are the original languages of movies with a budget of less than 1100000 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 168, "beams": [{"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.07765434341622948, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.927673156179454, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a runtime of at least 160 minutes?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.15770668547787908, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6209413807824673, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>=,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a vote average of at least 160?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.20121997152407275, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.927673156179454, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,>=,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a runtime of at least 160 minutes?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.26644632169882865, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.status,>=,160), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.27216539433498044, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.9226412686554504, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a runtime of more than 160 minutes?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.2790341618469857, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.46025175889110803, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,>=,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies who were released after 160?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.28930688081015826, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.639732492911832, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>=,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a popularity of at least 160?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.3382833989715487, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.8853421387501063, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<=,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a runtime of at most 160 minutes?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.33947849045336936, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6209413807824673, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,>=,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a vote average of at least 160?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.342027286272889, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.49051501627634275, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.year,>=,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.34804890360020674, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.5463170574740049, "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,>=,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a runtime of at least 160 minutes and with a runtime of at least 160 minutes?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.35221773639663, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.645522793345976, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a vote average of more than 160?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.3553714402169153, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.homepage,>=,160), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.37782143192875123, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.49051501627634275, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),person.birth_day,>=,160), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies?"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "score": -0.3861130269521254, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>=,160), genre.name),genre.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 169, "beams": [{"orig_question": "What are the different popularities for released movies?", "score": -0.024012865989789134, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": true, "beam_nubia_score": 0.491031697404667, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies whose status is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.37172205329625285, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.5376147294651643, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies who were released on Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.40349016667096294, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.49682227663663303, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Released), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with a popularity of Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.6275598248721508, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.18922735207596997, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies whose status is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.6394184073687939, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.17981016571549957, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.release_date))", "inferred_question": "What are the release dates of movies whose status is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.6768643101931957, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.12762156572351901, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),person.gender))", "inferred_question": "What are the genders of movies whose status is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.6901452350684849, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7397331065143495, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,Released), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.7413035743193177, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.491031697404667, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.release_date),movie.popularity))", "inferred_question": "What are the popularities of movies whose status is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.7435890278102306, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.2806671278181373, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.status))", "inferred_question": "What are the statuses of movies whose status is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.7552968701602367, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.1075618306677506, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.original_language))", "inferred_question": "What are the original languages of movies whose status is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.764187704797223, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.491031697404667, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.popularity))", "inferred_question": "What are the popularities of movies whose status is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.7860592445613293, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.27098362762640527, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.vote_average))", "inferred_question": "What are the vote averages of movies whose status is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.7985566663810459, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.3290087040377897, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Released), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies whose original language is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.8294682312080113, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.5320284210560151, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Released), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies whose name is Released?"}, {"orig_question": "What are the different popularities for released movies?", "score": -0.8374186156688666, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>,Released), movie.popularity),movie.popularity))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 170, "beams": [{"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.0760148836125154, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": true, "beam_nubia_score": 0.7646583333410282, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "inferred_question": "What are the names of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.2672390488733072, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.5133422799944045, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.death_place))", "inferred_question": "What are the death places of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.4491223094810266, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.30755633346034295, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.death_day))", "inferred_question": "What are the death days of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.5158413749013562, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7646583333410282, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.birth_place),person.name))", "inferred_question": "What are the names of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.5294970113609452, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.26846333489883345, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Duarte, Kalifornien), person.name),person.name))", "inferred_question": "What are the names of people who were not deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.5357504485000391, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.2969014442203667, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.birth_place))", "inferred_question": "What are the birth places of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.543487144226674, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7399026998482892, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "inferred_question": "Are there any names of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.5456211071286816, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7646583333410282, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.death_day),person.name))", "inferred_question": "What are the names of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.5680975716386456, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7646583333410282, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.death_place),person.name))", "inferred_question": "What are the names of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.6419174319889862, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.16636962606620254, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Duarte, Kalifornien), person.name),person.name))", "inferred_question": "What are the names of people who were born in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.6686969644215424, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.19741070704801478, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Duarte, Kalifornien), person.name),person.name))", "inferred_question": "What are the names of people whose gender is Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.7051612537179608, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.7646583333410282, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.birth_day),person.name))", "inferred_question": "What are the names of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.707065540162148, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.5133422799944045, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.birth_place),person.death_place))", "inferred_question": "What are the death places of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.7142749128688592, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.42636330792043065, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),cast.person_id))", "inferred_question": "What are the person_ids of people who were deceased in Duarte, Kalifornien?"}, {"orig_question": "Who died in Duarte, Kalifornien?", "score": -0.7176139003422577, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.6831859978093081, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Duarte, Kalifornien), person.name),person.name))", "inferred_question": "What are the names of people who were deceased on Duarte, Kalifornien?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 171, "beams": [{"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.10640335367661094, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.2715174980867578, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.category))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.2796971335992788, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.year,=,1995), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.29711740875498177, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.30474079885625155, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.movie_id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.32630648347091457, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.3394035722871231, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.sub_category))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.3589012833560091, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,!=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.3626148590738761, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.person_id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.36714225653427235, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.38551802667869917, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars who were awarded on 1995 which people won for their contribution to movies are there?"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.3798704006553866, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.3863656280309059, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.38782959831609565, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,1995), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.38936745842466847, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.year,=,1995), oscar.category),oscar.number))", "inferred_question": "-"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "score": -0.3990872513987217, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 172, "beams": [{"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.12983092609451635, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_day,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.2425619464969438, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_day,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.28198360837134234, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_day,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.2857350452614357, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.5381873582851602, "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.year,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies for which people were nominated for oscars who were awarded after 63?"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.29252145244029565, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.5381873582851602, "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies for which people were nominated for oscars who were awarded after 63?"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.2932731163125915, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.5381873582851602, "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies for which people were nominated for oscars who were awarded after 63?"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.31650010761087954, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.5381873582851602, "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.year,>=,63),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies for which people were nominated for oscars who were awarded after 63?"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.3277677390467393, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_day,<=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.331871503915615, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.name,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.34371701297997886, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": true, "beam_nubia_score": 0.826091537980648, "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies for which people were nominated for oscars with a number of at least 63?"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.34759254588779914, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_day,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.36113579212651536, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.576302416766353, "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(getData(movie),movie.vote_count,>,63),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies with a vote count of more than 63 for which people were nominated for oscars who were awarded after 63?"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.36180781442183635, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.576302416766353, "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(getData(movie),movie.vote_count,>,63),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies with a vote count of more than 63 for which people were nominated for oscars who were awarded after 63?"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.36392109312136595, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(filter(getData(oscar),person.death_day,>=,63),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.vote_count)", "inferred_question": "-"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "score": -0.3677896767779575, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)", "is_correct_ot": false, "beam_nubia_score": 0.6181199030877811, "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(getData(movie),movie.runtime,>,63),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "inferred_question": "What is the total vote count of all movies with a runtime of more than 63 minutes for which people were nominated for oscars who were awarded after 63?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 173, "beams": [{"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.17738891502449405, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9808759462813171, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of more than 238 minutes?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.28801129888233845, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9183175420641778, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.vote_count),movie.vote_count))", "inferred_question": "How many vote counts of movies with a runtime of more than 238 minutes are there?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.3101983640117396, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": true, "beam_nubia_score": 0.9496247489953599, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of at least 238 minutes?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.4315420700186223, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8835291238634062, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "inferred_question": "How many vote counts of movies with a runtime of at least 238 minutes are there?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.5175575289649714, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8250518681845181, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,238), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of at most 238 minutes?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.5615188453120936, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5658867775979752, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,238), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of less than 238 minutes?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.5782031981798355, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8920140703935004, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.vote_count),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a runtime of more than 238 minutes?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.6250624006388534, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9808759462813171, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of more than 238 minutes?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.65007111560044, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.7666115354569784, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<=,238), movie.vote_count),movie.vote_count))", "inferred_question": "How many vote counts of movies with a runtime of at most 238 minutes are there?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.6735288988747925, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9183175420641778, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.revenue),movie.vote_count))", "inferred_question": "How many vote counts of movies with a runtime of more than 238 minutes are there?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.6840552402609319, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5108242203785458, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,238), movie.vote_count),movie.vote_count))", "inferred_question": "How many vote counts of movies with a runtime of less than 238 minutes are there?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.7107750151080836, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8653205048536636, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,238), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of 238 minutes?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.7294625422509853, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8524481478453432, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "inferred_question": "Are there any vote counts of movies with a runtime of at least 238 minutes?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.7413175079745997, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.8904918845236404, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,238), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime other than 238 minutes?"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "score": -0.7453903799651016, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.9808759462813171, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.vote_average),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of more than 238 minutes?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 174, "beams": [{"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.04676822079570784, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of more than 184376254 dollars were produced?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.20806725230087636, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.990308492730262, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,!=,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue other than 184376254 dollars were produced?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.2629075691834722, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>=,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of at least 184376254 dollars were produced?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.2878646955738654, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of more than 184376254 dollars were produced?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.2973994476821005, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.8736402627485037, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of less than 184376254 dollars were produced?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.3206949861817501, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.9336121722259415, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "How many names of countries in which movies with a revenue of more than 184376254 dollars were produced are there?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.384154559845193, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of more than 184376254 dollars were produced?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.38451411014786846, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,has_genre.movie_id),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of more than 184376254 dollars were produced?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.40542080564275756, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(genre),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.41177684793299, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of more than 184376254 dollars were produced?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.4154897026452907, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of more than 184376254 dollars were produced in which those movies were produced?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.4289052642440918, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),production_country.iso_3166_1))", "inferred_question": "-"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.4487699844514626, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of more than 184376254 dollars were produced?"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.45206171923589356, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "score": -0.4565420789050581, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,production_country.movie_id),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of more than 184376254 dollars were produced?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 175, "beams": [{"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.19287388963051388, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.626953230788729, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),genre.name,!=,Documentary), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with genres whose name is not Documentary are there?"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.21541038965446516, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.626953230788729, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),has_genre.movie_id,has_genre.genre_id),getData(company),production_company.company_id,company.id),genre.name,!=,Documentary), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with genres whose name is not Documentary are there?"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.23585294806092838, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.7311759510200948, "inferred_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,!=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),genre.name,!=,Documentary), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with genres whose name is not Documentary and whose name is not Documentary are there?"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.24687283157372136, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.626953230788729, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,!=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.company_id), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with genres whose name is not Documentary are there?"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.248221510413871, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),has_genre.movie_id,movie.id),genre.name,None,Documentary), None),None))", "inferred_question": "-"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.2500325928329939, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.19565108112129947, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),country.name,!=,Documentary), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with genres are there?"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.257140048518036, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),genre.name,!=,Documentary), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.26662099076592005, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Documentary),getData(company),production_company.company_id,company.id),genre.name,!=,Documentary), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.2675268919548972, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),has_genre.movie_id,has_genre.genre_id),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),has_genre.movie_id,movie.id),genre.name,None,Documentary), None),None))", "inferred_question": "-"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.270456442245306, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.492656587175887, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),company.name,!=,Documentary), company.name),company.name))", "inferred_question": "How many names of companies whose name is not Documentary which produced movies with genres are there?"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.2707077678012619, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5839062461693374, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),has_genre.movie_id,movie.id),genre.name,!=,Documentary), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with genres whose name is not Documentary which produced those movies are there?"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.2725690788636574, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.19565108112129947, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),has_genre.movie_id,has_genre.genre_id),getData(company),production_company.company_id,company.id),country.name,!=,Documentary), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with genres are there?"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.27348228125804425, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.626953230788729, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,!=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "How many names of companies which produced movies with genres whose name is not Documentary are there?"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.2823405330209657, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.514817642404474, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),movie.original_language,!=,Documentary), company.name),company.name))", "inferred_question": "How many names of companies which produced movies whose original language is not Documentary with genres are there?"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "score": -0.30345752255504926, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),production_company.movie_id,movie.id),genre.name,None,Documentary), None),None))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 176, "beams": [{"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.3616363448048808, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.765049555964393, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the average number of all oscars which people whose name is Heather Fielding won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.3706658569018285, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.765049555964393, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the average number of all oscars which people whose name is Heather Fielding won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.37383932498687, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.49846195764875534, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the average number of all oscars which people who were deceased on Heather Fielding won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.3825606865637112, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.765049555964393, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "inferred_question": "What is the average number of all oscars which people whose name is Heather Fielding won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.38286883708381775, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.49846195764875534, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the average number of all oscars which people who were deceased on Heather Fielding won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.39023975645519116, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.3682648610312532, "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the average number of all oscars which people won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.391590198660659, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": true, "beam_nubia_score": 0.765049555964393, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "inferred_question": "What is the average number of all oscars which people whose name is Heather Fielding won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.39476366674570046, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.49846195764875534, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "inferred_question": "What is the average number of all oscars which people who were deceased on Heather Fielding won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.4037931788426482, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.49846195764875534, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "inferred_question": "What is the average number of all oscars which people who were deceased on Heather Fielding won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.4050547101603284, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.3682648610312532, "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the average number of all oscars which people won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.4136900868644295, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.3682648610312532, "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "inferred_question": "What is the average number of all oscars which people won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.41552276099604984, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.765049555964393, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the average number of all oscars which people whose name is Heather Fielding won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.42065403220388276, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.3941724844627461, "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the average number of all oscars for which people were nominated for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.4245522345293807, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.765049555964393, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the average number of all oscars which people whose name is Heather Fielding won for their contribution to movies?"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "score": -0.46220049010750025, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.3682648610312532, "inferred_code": "avg(distinct(merge(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "inferred_question": "What is the average number of all oscars which people won for their contribution to movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 177, "beams": [{"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.05201469950336112, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies who were released on 2013-01-14?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.46221048291744327, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7571558859953638, "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,<,2013-01-14), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies who were released before 2013-01-14?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.6008869645473427, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7571558859953638, "inferred_code": "avg(filter(getData(movie),movie.release_date,<=,2013-01-14),movie.revenue)", "inferred_question": "What is the average revenue of all movies who were released before 2013-01-14?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.6135771765874338, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6120786325031371, "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,!=,2013-01-14), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies who were not released on 2013-01-14?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.6479462146508888, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7571558859953638, "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,<=,2013-01-14), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies who were released before 2013-01-14?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.6768033377303975, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.8828322035846092, "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,=,2013-01-14), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a budget of 2013-01-14 dollars?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.6818957792651076, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.45406649020799184, "inferred_code": "avg(distinct(filter(getData(movie),person.gender,=,2013-01-14), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.6955472762205396, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.45406649020799184, "inferred_code": "avg(distinct(filter(getData(movie),person.birth_day,=,2013-01-14), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.699330572404447, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7421671866763522, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,2013-01-14), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a popularity of 2013-01-14?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.7069307718463314, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.5229700872748255, "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies who were released on 2013-01-14?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.7270181505651675, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.7571558859953638, "inferred_code": "avg(filter(getData(movie),movie.release_date,<,2013-01-14),movie.revenue)", "inferred_question": "What is the average revenue of all movies who were released before 2013-01-14?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.7964980182933703, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6496584498797688, "inferred_code": "avg(filter(getData(movie),movie.release_date,>=,2013-01-14),movie.revenue)", "inferred_question": "What is the average revenue of all movies who were released after 2013-01-14?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.8516734087251432, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.6524581626491874, "inferred_code": "avg(distinct(filter(getData(movie),movie.homepage,=,2013-01-14), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies whose homepage is 2013-01-14?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.8525996199895337, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.9349552991097005, "inferred_code": "avg(distinct(filter(getData(movie),movie.revenue,=,2013-01-14), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies with a revenue of 2013-01-14 dollars?"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "score": -0.8578395211424389, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "is_correct_ot": false, "beam_nubia_score": 0.34164908134078775, "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies who were released on 2013-01-14?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 178, "beams": [{"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.08576852382482388, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8399987262496935, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.19128076914814696, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8399987262496935, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.20666769298409515, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8399987262496935, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), person.death_day),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.27012100391971117, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.7269091829235751, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.category))", "inferred_question": "What are the categories of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.28653930466889155, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8399987262496935, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,person.id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.3002727257287449, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5443447396074321, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.sub_category))", "inferred_question": "What are the sub-categories of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.31921861086807957, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": true, "beam_nubia_score": 0.8399987262496935, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.3358078939420894, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8715346024537327, "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.death_day,<,1999-03-07),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were deceased before 1999-03-07 and who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.3675902100663748, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,<,1999-03-07), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.3736674115072696, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8399987262496935, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,<,1999-03-07), person.death_day),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.37605901768098066, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8399987262496935, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.3852857173532413, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.7269091829235751, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,<,1999-03-07), oscar.number),oscar.category))", "inferred_question": "What are the categories of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.39102017307898246, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.7269091829235751, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), person.death_day),oscar.category))", "inferred_question": "What are the categories of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.39574581661288516, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.8399987262496935, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar_nominee.movie_id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "score": -0.4022541857507526, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "is_correct_ot": true, "beam_nubia_score": 0.8399987262496935, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "inferred_question": "What are the numbers of oscars for which people who were deceased before 1999-03-07 were nominated for their contribution to movies?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 179, "beams": [{"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.03722026899150364, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a budget of at least 200000 dollars were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.21810175123001244, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a budget of at least 200000 dollars were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.2787593138835226, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,has_genre.movie_id),movie.budget,>=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a budget of at least 200000 dollars were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.2962697852019542, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.95599170688186, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,<=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a budget of at most 200000 dollars were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.3193319689236259, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a budget of more than 200000 dollars were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.35436665967469155, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,>=,200000), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.35876954717116005, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.6619593000253434, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,>=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies who were released after 200000 were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.3761954252101721, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.8171835327534566, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,!=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a budget other than 200000 dollars were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.3892566354160579, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a budget of at least 200000 dollars were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.3935733655161928, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,spoken_language.movie_id),movie.budget,>=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a budget of at least 200000 dollars were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.3963106155246048, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>=,200000), country.name),production_country.iso_3166_1))", "inferred_question": "-"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.3976757830800756, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id),movie.budget,>=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a budget of at least 200000 dollars were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.3986863410484336, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>=,200000), country.name),genre.name))", "inferred_question": "-"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.39887918677917317, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id),movie.budget,>=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a budget of at least 200000 dollars were produced?"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "score": -0.4002036180739161, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.8977488149961191, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>=,200000), country.name),country.name))", "inferred_question": "What are the names of countries in which movies with a revenue of at least 200000 dollars were produced?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 180, "beams": [{"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.1848767409774161, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5765988719631757, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "Are there any categories of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.19950988895873234, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5345213574342971, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.2094608378678891, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5605208747204502, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "Are there any numbers of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.23646598949235567, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5765988719631757, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "inferred_question": "Are there any categories of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.2510991374736719, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5345213574342971, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.26105008638282867, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5605208747204502, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "inferred_question": "Are there any numbers of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.27740981122051395, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5765988719631757, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "inferred_question": "Are there any categories of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.2920429592018302, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5345213574342971, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.301993908110987, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5605208747204502, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "inferred_question": "Are there any numbers of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.3143216147669952, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5765988719631757, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "Are there any categories of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.3289547627483115, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5345213574342971, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.333852760669273, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),person.birth_day,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "-"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.3389057116574682, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.5605208747204502, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "Are there any numbers of oscars which people won for their contribution to movies who were released after 2016-03-17?"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.34848590865058926, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),person.birth_day,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "-"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "score": -0.358436857559746, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),person.birth_day,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 181, "beams": [{"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.2679040402515091, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7428638771098204, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at most 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.27281603963540324, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7428638771098204, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at most 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.273075047871553, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7428638771098204, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at most 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.27798704725544715, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7428638771098204, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at most 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.31192905523673475, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.35586375208828724, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(oscar),oscar_winner.oscar_id,person.id), person.name),person.name))", "inferred_question": "What are the names of people who won oscars for their contribution to movies with a vote count of at most 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.36311430494798125, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7428638771098204, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at most 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.36628327705055996, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.35586375208828724, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(oscar),oscar_winner.oscar_id,oscar.id), person.name),person.name))", "inferred_question": "What are the names of people who won oscars for their contribution to movies with a vote count of at most 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.3680263043318754, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7428638771098204, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at most 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.3682853125680252, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7428638771098204, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at most 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.3690921820337633, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6718951190515778, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at least 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.3731973119519193, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7428638771098204, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at most 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.37400418141765746, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6718951190515778, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at least 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.3742631896538073, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6718951190515778, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at least 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.37917516688699276, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6718951190515778, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,2808), person.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at least 2808?"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "score": -0.3871056555204094, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.7428638771098204, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), keyword.name),person.death_place))", "inferred_question": "What are the death places of people who won oscars for their contribution to movies with a vote count of at most 2808?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 182, "beams": [{"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.10824348887181609, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": true, "beam_nubia_score": 0.7709329580529536, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "Are there any names of keywords for movies who were released after 1995-11-22?"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.2574246872552167, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(language),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.25874065199534896, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(spoken_language),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.264789075266942, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.6831737944797922, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies who were released after 1995-11-22?"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.2896093102854993, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.7709329580529536, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,spoken_language.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "Are there any names of keywords for movies who were released after 1995-11-22?"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.3244067237471796, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.7709329580529536, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,1995-11-22), keyword.name),keyword.name))", "inferred_question": "Are there any names of keywords for movies who were released after 1995-11-22?"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.3289318147709872, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.7709329580529536, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>=,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "Are there any names of keywords for movies who were released after 1995-11-22?"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.34374614059726594, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(cast),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.3559280712246309, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.7709329580529536, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,cast.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "Are there any names of keywords for movies who were released after 1995-11-22?"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.36073133637334337, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": true, "beam_nubia_score": 0.7709329580529536, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "inferred_question": "Are there any names of keywords for movies who were released after 1995-11-22?"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.3772423713232909, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(oscar),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.38044917810079776, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.458744522780543, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "Are there any names of keywords for movies?"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.382412894950351, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "inferred_question": "-"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.39005823640388493, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),language.name))", "inferred_question": "-"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "score": -0.396512551550332, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "is_correct_ot": false, "beam_nubia_score": 0.6831737944797922, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,1995-11-22), keyword.name),keyword.name))", "inferred_question": "What are the names of keywords for movies who were released after 1995-11-22?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 183, "beams": [{"orig_question": "In how many countries are unreleased movies produced?", "score": -0.17091954392800063, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.1765900649125901, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.18935007333782183, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose status is not Released were produced are there?"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.19216281777940036, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": true, "beam_nubia_score": 0.18935007333782183, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose status is not Released were produced are there?"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.19969300593816294, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.2653273277008265, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.34679857336795594, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose status is Released were produced are there?"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.28766041420233723, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),movie.status,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.2884302687263993, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.3023399020869579, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.31076335522791004, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.3235831759383576, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.16867293209796974, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose name is not Released were produced are there?"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.3274816047904607, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.16867293209796974, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "inferred_question": "How many names of countries in which movies whose name is not Released were produced are there?"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.3387057305366917, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),country.name,!=,Released), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.34650393498235166, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),country.iso_3166_1,production_country.movie_id),movie.status,!=,Released), country.name),country.name))", "inferred_question": "-"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.3599489865117773, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.1711623724067124, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),country.name,!=,Released), country.name),country.name))", "inferred_question": "How many names of countries whose name is not Released in which movies were produced are there?"}, {"orig_question": "In how many countries are unreleased movies produced?", "score": -0.36260440348513456, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.movie_id),movie.status,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 184, "beams": [{"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.1116301865649492, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.44399882339984587, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people won oscars whose sub-category is documentary (feature)?"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.15888013340764773, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4285505356987944, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people won oscars whose category is documentary (feature)?"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.22102151878485232, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.43243313620155244, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people won oscars who were awarded on documentary (feature)?"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.24236634709129012, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.44399882339984587, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,documentary (feature)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people won oscars whose sub-category is documentary (feature)?"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.2633639074607394, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,<=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.27528908922423606, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.434021916415554, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people won oscars with a number of documentary (feature)?"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.2986371942930575, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.runtime,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.3084005001191669, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar_winner.oscar_id,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.31061385430343796, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.3129638805751004, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,<,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.31935293676603954, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.44399882339984587, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,documentary (feature)), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people won oscars whose sub-category is documentary (feature)?"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.32254755329129126, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,>=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.3397799304231346, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.4285505356987944, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,documentary (feature)), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people won oscars whose category is documentary (feature)?"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.34131642318836397, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,<=,documentary (feature)), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "score": -0.3425268013841823, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,>,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 185, "beams": [{"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.03293321334422217, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue of more than 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.26574279979467974, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.31533841657628936, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,182016617), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue of less than 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.44381480530500994, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7346357530399629, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,182016617), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue other than 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.664596876657015, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.9191704122550617, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,182016617), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue of at least 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.6923098507722898, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.release_date),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue of more than 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.7297125337681791, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.08960541792044352, "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.revenue,>,182016617), movie.budget),movie.budget))", "inferred_question": "What are the budgets of people?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.7550900522073789, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.revenue),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue of more than 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.7649778942031844, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.5822479634250908, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.title))", "inferred_question": "What are the names of movies with a revenue of more than 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.7669291110396443, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7860991020517171, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,182016617), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue of at most 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.7691737025197654, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.5740054465773339, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,182016617), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote count of more than 182016617?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.8048947397073789, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), person.death_place),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue of more than 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.8087510088844283, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.5124289922370764, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.release_date))", "inferred_question": "What are the release dates of movies with a revenue of more than 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.817135475055693, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.22093817009743066, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),person.death_place))", "inferred_question": "What are the death places of movies with a revenue of more than 182016617 dollars?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.8258117049153952, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.44495067363474106, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_day,>,182016617), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies?"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "score": -0.8291748705705686, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.title),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue of more than 182016617 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 186, "beams": [{"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.11267920458626472, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9952925838450292, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people whose gender is not m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.12046284888140893, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9952925838450292, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people whose gender is not m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.16120830444898032, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9952925838450292, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people whose gender is not m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.23437099600086525, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9952925838450292, "inferred_code": "avg(distinct(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people whose gender is not m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.3034202008249584, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(merge(merge(getData(person),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.34168792270571025, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(merge(merge(getData(person),getData(person),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.3496050988104525, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.3559244583006777, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9952925838450292, "inferred_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,!=,m),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people whose gender is not m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.388257741802812, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.6016675821303885, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_place,!=,m), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people who were not deceased in m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.40564182227297885, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "avg(filter(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people whose gender is not m and whose gender is not m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.42526807617216195, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9952925838450292, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people whose gender is not m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.4578479524095686, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.6016675821303885, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,!=,m), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people who were not deceased in m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.4584916736645016, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.8654013707450177, "inferred_code": "avg(distinct(merge(filter(getData(person),person.gender,=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people whose gender is m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.45949689183453635, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.8654013707450177, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,m), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people whose gender is m were nominated for oscars?"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "score": -0.4614020587061732, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9952925838450292, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.status),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people whose gender is not m were nominated for oscars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 187, "beams": [{"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.2402943279927596, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6837387310934384, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people whose name is Paul Hirsch won oscars are there?"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.25456002229855695, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.6837387310934384, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people whose name is Paul Hirsch won oscars are there?"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.2720177765690108, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6837387310934384, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people whose name is Paul Hirsch won oscars are there?"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.2941349889093101, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.3166052913208226, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.3166945154600545, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6837387310934384, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people whose name is Paul Hirsch won oscars are there?"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.3180616173261575, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6837387310934384, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people whose name is Paul Hirsch won oscars are there?"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.33087098562662, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.3388117278003538, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.3401788296664568, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.oscar_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.34061201226997734, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6837387310934384, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people whose name is Paul Hirsch won oscars are there?"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.3548777065757747, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6837387310934384, "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.person_id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people whose name is Paul Hirsch won oscars are there?"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.362738399411083, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.6837387310934384, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies for which people whose name is Paul Hirsch won oscars are there?"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.38485562559557523, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "score": -0.38516808349167797, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 188, "beams": [{"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.10413935706597624, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9359459677268133, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_place,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people who were deceased in Falmouth, Massachusetts were nominated for oscars?"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.12106676594976779, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": true, "beam_nubia_score": 0.9359459677268133, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_place,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people who were deceased in Falmouth, Massachusetts were nominated for oscars?"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.14149030757530168, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.22956449691090855, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.24004780604342982, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.2731402414916084, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.2988809601442848, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,oscar_nominee.person_id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.3029816286761356, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,person.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.34380835522705827, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.351132092733765, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.3545056609867426, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.36121443082721527, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.3723894502631931, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9359459677268133, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_place,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.status),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people who were deceased in Falmouth, Massachusetts were nominated for oscars?"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.3764011762550828, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.9069819919672923, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average)", "inferred_question": "What is the average vote average of all movies for which people who were deceased on Falmouth, Massachusetts were nominated for oscars?"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "score": -0.3816033853488942, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,person.id), movie.id),movie.vote_average)", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 189, "beams": [{"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.03914207466822572, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.7896611746802468, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a revenue of 35841901 dollars?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.2144973936975886, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.7896611746802468, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,35841901),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a revenue of 35841901 dollars?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.2167810327076954, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.7971231385327671, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,35841901), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a revenue of at most 35841901 dollars?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.27948957360705096, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.7896611746802468, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,=,35841901), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a revenue of 35841901 dollars?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.33217991621021276, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.8425536692392657, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>=,35841901), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a revenue of at least 35841901 dollars?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.3325184808428315, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6542254980964708, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a revenue of 35841901 dollars?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.33709489264934833, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6812716552517377, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<,35841901), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a revenue of less than 35841901 dollars?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.3790426913703271, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.570623942140317, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,=,35841901), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a vote count of 35841901?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.4088940454169187, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.7169259180935574, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),movie.title))", "inferred_question": "Are there any names of movies with a revenue of 35841901 dollars which were produced by companies?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.41062325793073223, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.2542286418136368, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,=,35841901), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.41089197260740895, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.6437316289662911, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.budget,=,35841901), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a budget of 35841901 dollars?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.4265908313296468, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),production_company.company_id))", "inferred_question": "-"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.4280916115456473, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.7539316547835868, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(production_company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a revenue of 35841901 dollars which produced those movies?"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.43517602070564426, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),person.birth_place))", "inferred_question": "-"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "score": -0.44759644266996346, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.7971231385327671, "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,35841901), company.name),company.name))", "inferred_question": "Are there any names of companies which produced movies with a revenue of at most 35841901 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 190, "beams": [{"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.023012027220984152, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": true, "beam_nubia_score": 0.8898144319868977, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with genres whose name is Adventure?"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.32191211748833937, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(has_genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "-"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.32828102028954, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "-"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.3336825261591101, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.25999033700454566, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.release_date))", "inferred_question": "What are the release dates of movies with genres whose name is Adventure?"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.34859806314175734, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8898144319868977, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,has_genre.genre_id), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with genres whose name is Adventure?"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.36487905923857794, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "-"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.36713271885229376, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.7323450075993964, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.status))", "inferred_question": "What are the statuses of movies with genres whose name is Adventure?"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.38109773057870244, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),person.gender))", "inferred_question": "-"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.3814408007541483, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.533646764084508, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies with genres whose name is Adventure?"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.4003787877814328, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(country),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "-"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.4195866897769186, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8898144319868977, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.movie_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with genres whose name is Adventure?"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.42190315772498854, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.8898144319868977, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,spoken_language.iso_639_1),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with genres whose name is Adventure?"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.42743579241508506, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6800745948056138, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.id,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "What are the popularities of movies with genres whose id is Adventure?"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.4318755715014709, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "-"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "score": -0.4342125624964233, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),person.death_place,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 191, "beams": [{"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.22975900971579324, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.24044586275787663, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.25344087723228925, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.26412773027437264, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.32067424979152864, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6052559831664444, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "inferred_question": "How many death places of people who worked in movies whose original language is af are there?"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.3213626052132846, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id), person.death_day),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.329338251388874, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.33136110283361203, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6052559831664444, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "inferred_question": "How many death places of people who worked in movies whose original language is af are there?"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.33204945825536797, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.3400251044309574, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.34504447272978056, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id), person.death_day),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.35302011890537, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.35573132577186395, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.3637069719474534, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "score": -0.3805557910771646, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.movie_id), person.death_day),person.death_place))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 192, "beams": [{"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.15089008753420785, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.7864221354583578, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of movies with a vote count of at most 1183 are there?"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.30041313712717965, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.7883878635683406, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,=,1183), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of movies with a vote count of 1183 are there?"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.3443916271789931, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.8321384576048271, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of at most 1183?"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.47766344057163224, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.8475380774568435, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,1183), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a vote count of 1183?"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.5046774640795775, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.07610992414614492, "inferred_code": "count(extractValues(distinct(filter(getData(keyword),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of keywords are there?"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.5647225434076972, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": true, "beam_nubia_score": 0.8442397770285239, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of movies with a vote count of at least 1183 are there?"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.6109459103559306, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.6163729358664578, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,has_keyword.keyword_id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.6200042698795114, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),keyword.id,oscar_nominee.oscar_id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.6239611253258772, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.22112469013427816, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1183), movie.revenue),person.death_day))", "inferred_question": "How many death days of movies with a vote count of at most 1183 are there?"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.6254313347075463, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.6542005136725493, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.07610992414614492, "inferred_code": "count(extractValues(distinct(filter(getData(keyword),movie.vote_count,=,1183), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of keywords are there?"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.6597031250712462, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.08653116585534659, "inferred_code": "count(extractValues(distinct(filter(getData(oscar),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of oscars are there?"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.6811421409365721, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.3470101619519831, "inferred_code": "count(extractValues(distinct(filter(getData(oscar_nominee),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "inferred_question": "How many revenues of movies for which people were nominated for oscars are there?"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "score": -0.7135321954847313, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.7864221354583578, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1183), person.death_day),movie.revenue))", "inferred_question": "How many revenues of movies with a vote count of at most 1183 are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 193, "beams": [{"orig_question": "What is the average rating of german movies?", "score": -0.07900395187430048, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.15164682336503865, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose status is de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.3189348313577782, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.17488467160334586, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,de), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose name is de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.33832796230253565, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.19811045910275438, "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,de), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with a vote average of de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.4473999270841406, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.15236648013119036, "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,de), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose original language is de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.4711711871271242, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.15164682336503865, "inferred_code": "avg(filter(getData(movie),movie.status,=,de),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose status is de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.5917719818282807, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.15088883500634742, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies whose status is de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.6904167424627073, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.16518333468111912, "inferred_code": "avg(distinct(filter(getData(movie),country.name,=,de), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.7035620148747748, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.17488467160334586, "inferred_code": "avg(filter(getData(movie),movie.title,=,de),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose name is de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.7152071732664825, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.16518333468111912, "inferred_code": "avg(distinct(filter(getData(movie),production_country.movie_id,=,de), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.7414479483966081, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.19811045910275438, "inferred_code": "avg(filter(getData(movie),movie.vote_average,=,de),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with a vote average of de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.7784043727122352, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.17500725291440433, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,de), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with a popularity of de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.7824809456696011, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.08520162965030542, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies whose status is de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.8122833429563142, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.15088883500634742, "inferred_code": "avg(filter(getData(movie),movie.status,=,de),movie.popularity)", "inferred_question": "What is the average popularity of all movies whose status is de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.8317028613117584, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.1623288923477677, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,de), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies whose name is de?"}, {"orig_question": "What is the average rating of german movies?", "score": -0.8510959922565159, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "is_correct_ot": false, "beam_nubia_score": 0.1897362220654797, "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,de), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies with a vote average of de?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 194, "beams": [{"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.11806718256779117, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.5887926188200885, "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies whose original language is not The Object of My Affection?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.3288790051124158, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.5084646534032825, "inferred_code": "avg(distinct(filter(getData(movie),language.name,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.40365838101429324, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": true, "beam_nubia_score": 0.7918666419939825, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies whose name is not The Object of My Affection?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.4116659950847976, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.5593084924149898, "inferred_code": "avg(distinct(filter(getData(movie),movie.homepage,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies whose homepage is not The Object of My Affection?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.42767878335824067, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.7352231214017355, "inferred_code": "avg(distinct(filter(getData(movie),movie.tagline,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies whose tag line is not The Object of My Affection?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.48124867203405836, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.5084646534032825, "inferred_code": "avg(distinct(filter(getData(movie),genre.name,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.48417626287015536, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.9223370235510044, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies with a popularity other than The Object of My Affection?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.526647475512465, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.5084646534032825, "inferred_code": "avg(distinct(filter(getData(movie),person.gender,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.5400505300135982, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "-"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.5444352987203593, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.6375352959616991, "inferred_code": "avg(distinct(filter(getData(movie),movie.revenue,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies with a revenue other than The Object of My Affection dollars?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.5740498794676702, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.6195027218833602, "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies with a budget other than The Object of My Affection dollars?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.6042074191878739, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "-"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.6241546596244838, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.5887926188200885, "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,!=,The Object of My Affection), movie.popularity),movie.popularity)", "inferred_question": "What is the average popularity of all movies whose original language is not The Object of My Affection?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.630686838075428, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.5084646534032825, "inferred_code": "avg(distinct(filter(getData(movie),has_genre.movie_id,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies?"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "score": -0.6573179925558098, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "is_correct_ot": false, "beam_nubia_score": 0.690708314635395, "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies with a vote average other than The Object of My Affection?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 195, "beams": [{"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.01558348210528493, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.9459559053392643, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "inferred_question": "What are the names of movies with a budget other than 260000000 dollars?"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.5243149190419297, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),getData(movie),cast.movie_id,movie.id),movie.budget,!=,260000000), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.5293762540181854, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.budget,!=,260000000), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.5444744030208982, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),getData(movie),spoken_language.movie_id,movie.id),movie.budget,!=,260000000), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.596166346596083, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,!=,260000000), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.601440213301937, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(movie),movie.id,cast.movie_id),getData(movie),cast.movie_id,movie.id),movie.budget,!=,260000000), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.6134847942865599, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.budget,!=,260000000), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.6215996972809055, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(movie),movie.id,cast.movie_id),getData(movie),spoken_language.movie_id,movie.id),movie.budget,!=,260000000), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.6710903347702697, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6274739972032737, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.budget))", "inferred_question": "What are the budgets of movies with a budget other than 260000000 dollars?"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.6735886330716312, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6906168771627643, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,260000000), movie.title),movie.title))", "inferred_question": "What are the names of movies whose name is not 260000000?"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.6766716237179935, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.39847955595570494, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,260000000), movie.title),movie.title))", "inferred_question": "What are the names of movies whose original language is not 260000000?"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.677292210610176, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7233416537284554, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "inferred_question": "Are there any names of movies with a budget other than 260000000 dollars?"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.6953823580406606, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6077096157265138, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,260000000), movie.title),movie.title))", "inferred_question": "What are the names of movies with a budget of at least 260000000 dollars?"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.7558994288556278, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6651982457283496, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,260000000), movie.title),movie.title))", "inferred_question": "What are the names of movies who were not released on 260000000?"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "score": -0.7592725767754018, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5231042442796032, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,260000000), movie.title),movie.title))", "inferred_question": "What are the names of movies with a budget of more than 260000000 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 196, "beams": [{"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.06459445611274632, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.9085266896165688, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies who were released after 2012-08-06?"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.1800627145271947, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.9085266896165688, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>=,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies who were released after 2012-08-06?"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.2569361782405062, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.9085266896165688, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies who were released after 2012-08-06?"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.2887310218960297, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,>,2012-08-06), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.30537556940571614, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.9085266896165688, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,2012-08-06), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies who were released after 2012-08-06?"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.3196119450335551, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5322109898856276, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>,2012-08-06), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime of more than 2012-08-06 minutes?"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.3215309452494804, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.9085266896165688, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>,2012-08-06), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies who were released after 2012-08-06?"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.3240641711720366, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5322109898856276, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,>,2012-08-06), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime of more than 2012-08-06 minutes?"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.3371704130612397, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,>=,2012-08-06), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.34241460219249475, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,>,2012-08-06), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.3603887423943294, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),person.birth_day,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.36805134533593237, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.5637894375083521, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>=,2012-08-06), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies with a runtime of at least 2012-08-06 minutes?"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.37229116829104925, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,>,2012-08-06),movie.title,>,2012-08-06), company.name),company.name))", "inferred_question": "-"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.3765866947154498, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": true, "beam_nubia_score": 0.9085266896165688, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06),getData(company),production_company.company_id,company.id), company.name),company.name))", "inferred_question": "What are the names of companies which produced movies who were released after 2012-08-06?"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "score": -0.3810799889870025, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),person.birth_place))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 197, "beams": [{"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.10272443101837958, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": true, "beam_nubia_score": 0.7937004636093014, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,86),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "inferred_question": "What are the names of languages spoken in movies with a runtime of 86 minutes?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.1726482553147489, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": true, "beam_nubia_score": 0.7937004636093014, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "inferred_question": "What are the names of languages spoken in movies with a runtime of 86 minutes?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.19056489135625623, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.6724043975392643, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,86),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of 86 minutes in which languages is spoken?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.20354264608312853, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.6724043975392643, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of 86 minutes in which languages is spoken?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.21805433263262344, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": true, "beam_nubia_score": 0.7937004636093014, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,=,86),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "inferred_question": "What are the names of languages spoken in movies with a runtime of 86 minutes?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.3009681432593311, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,86),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "inferred_question": "-"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.30793875847071556, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.6724043975392643, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,=,86),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of 86 minutes in which languages is spoken?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.3570349361037793, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),genre.name))", "inferred_question": "-"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.3639162506486405, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.6288788665647476, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,!=,86),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "inferred_question": "What are the names of languages spoken in movies with a runtime other than 86 minutes?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.37078106967136737, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.7937004636093014, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,86),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),language.name))", "inferred_question": "What are the names of languages spoken in movies with a runtime of 86 minutes?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.38277935111391614, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.7620248299188549, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,<,86),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "inferred_question": "What are the names of languages spoken in movies with a runtime of less than 86 minutes?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.3880902999482337, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.7937004636093014, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),language.name))", "inferred_question": "What are the names of languages spoken in movies with a runtime of 86 minutes?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.40736085979521186, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.6288788665647476, "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,86), language.name),language.name))", "inferred_question": "What are the names of languages spoken in movies with a runtime other than 86 minutes?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.4189846907166133, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.6724043975392643, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of 86 minutes in which languages is spoken?"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "score": -0.4191911356388693, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,=,86),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 198, "beams": [{"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.0318868768226821, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.7104950249499651, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),person.gender))", "inferred_question": "How many genders of movies who were released after 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.4048759260040242, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.7104950249499651, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), movie.popularity),person.gender))", "inferred_question": "How many genders of movies who were released after 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.5145097396161873, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.3434380176303309, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),person.name))", "inferred_question": "How many names of movies who were released after 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.518836311326595, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.7104950249499651, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.name),person.gender))", "inferred_question": "How many genders of movies who were released after 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.577443423011573, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.18260541278410958, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),movie.popularity))", "inferred_question": "How many popularities of movies who were released after 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.5791957318142522, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.30171105221551997, "inferred_code": "count(extractValues(distinct(filter(getData(person),movie.release_date,>,2002-01-25), person.gender),person.gender))", "inferred_question": "How many genders of people are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.6809016609622631, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.4780418177465049, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2002-01-25), person.gender),person.gender))", "inferred_question": "How many genders of movies who were not released on 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.6844103479816113, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.7104950249499651, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2002-01-25), person.gender),person.gender))", "inferred_question": "How many genders of movies who were released after 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.7141351721074898, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.09767394425247311, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),person.death_place))", "inferred_question": "How many death places of movies who were released after 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.7358384051185567, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.7104950249499651, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), movie.revenue),person.gender))", "inferred_question": "How many genders of movies who were released after 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.760195388837019, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.453952210619454, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,<,2002-01-25), person.gender),person.gender))", "inferred_question": "How many genders of movies who were released before 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.7690830848005135, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.36654954301990905, "inferred_code": "count(extractValues(distinct(filter(getData(movie),person.birth_day,>,2002-01-25), person.gender),person.gender))", "inferred_question": "How many genders of movies are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.7880250730377156, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.7104950249499651, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.death_place),person.gender))", "inferred_question": "How many genders of movies who were released after 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.8007355353620369, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.38380678437272475, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),cast.person_id))", "inferred_question": "How many person_ids of movies who were released after 2002-01-25 are there?"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "score": -0.8048883595329244, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.7104950249499651, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), movie.original_language),person.gender))", "inferred_question": "How many genders of movies who were released after 2002-01-25 are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 199, "beams": [{"orig_question": "What is the movie vote average of the released movies?", "score": -0.07728297207105564, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.6697772041309027, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Released), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose status is Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.4363245720688517, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.6697772041309027, "inferred_code": "avg(filter(getData(movie),movie.status,=,Released),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose status is Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.45092913287953706, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": true, "beam_nubia_score": 0.6081488714547331, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies whose status is Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.5531454200648057, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.6675922001095664, "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,Released), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies who were released on Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.5718154645850894, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.6697772041309027, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose status is Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.5864752099305222, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.6937527412110627, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Released), movie.id),movie.vote_count)", "inferred_question": "What is the average vote count of all movies whose status is Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.6032680919812837, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(filter(getData(movie),movie.status,>=,Released),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.6151458331891947, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.6280364981524761, "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Released), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose name is Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.6997895968363919, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,>=,Released), movie.id),movie.vote_average)", "inferred_question": "-"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.7458888268113841, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.43381949995947167, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,Released), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies with a popularity of Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.8144598448346116, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.5195328249680535, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Released), movie.id),movie.popularity)", "inferred_question": "What is the average popularity of all movies whose status is Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.8772098603480533, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.4425245282450059, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Released), movie.id),movie.revenue)", "inferred_question": "What is the average revenue of all movies whose status is Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.8848165944512668, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.3248842226740247, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose status is not Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.8856022536468809, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.3248842226740247, "inferred_code": "avg(filter(getData(movie),movie.status,!=,Released),movie.vote_average)", "inferred_question": "What is the average vote average of all movies whose status is not Released?"}, {"orig_question": "What is the movie vote average of the released movies?", "score": -0.8863972997014196, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(getData(movie),movie.status,>,Released), movie.id),movie.vote_average)", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 200, "beams": [{"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.07040287911039562, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.9535010820585047, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people who were deceased before 1975-05-30 were nominated for their contribution to movies?"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.20717701481654294, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "-"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.23665737855009714, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7178807676854533, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.year))", "inferred_question": "Are there any years of oscars for which people who were deceased before 1975-05-30 were nominated for their contribution to movies?"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.2735414704525319, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.9535010820585047, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people who were deceased before 1975-05-30 were nominated for their contribution to movies?"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.3142333688486995, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.9535010820585047, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<=,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people who were deceased before 1975-05-30 were nominated for their contribution to movies?"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.3236841813375723, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.7112438587953998, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "inferred_question": "Are there any numbers of oscars for which people who were deceased before 1975-05-30 were nominated for their contribution to movies?"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.3519686080990283, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.9535010820585047, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people who were deceased before 1975-05-30 were nominated for their contribution to movies?"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.3531773576337095, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.9535010820585047, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people who were deceased before 1975-05-30 were nominated for their contribution to movies?"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.37343151425624443, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.year))", "inferred_question": "-"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.3760118419994245, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "-"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.38135709540016144, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.8768784876256414, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "inferred_question": "Are there any categories of oscars for which people who were deceased before 1975-05-30 were nominated for their contribution to movies?"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.38324061113479385, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.6392682475649691, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people who were born before 1975-05-30 were nominated for their contribution to movies?"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.38609888221351324, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1975-05-30),oscar.id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "-"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.38767508391941935, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.9535010820585047, "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<=,1975-05-30),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "Are there any sub-categories of oscars for which people who were deceased before 1975-05-30 were nominated for their contribution to movies?"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "score": -0.4204441416562078, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),oscar.id,oscar.id), oscar.sub_category),oscar.sub_category))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 201, "beams": [{"orig_question": "Who was born on December 16th 1938?", "score": -0.3775009753298946, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.4353302814740273, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.name), person.death_day))", "inferred_question": "What are the names of people whose name is 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.4220912696910091, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.4353302814740273, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.name), person.name))", "inferred_question": "What are the names of people whose name is 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.46675550445797853, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.4353302814740273, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,1938-12-16), person.name),person.name))", "inferred_question": "What are the names of people whose name is 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.5131450171757024, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.15722116951478304, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,1938-12-16), person.name),person.death_day))", "inferred_question": "What are the death days of people whose name is 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.5374211350572295, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.5841792129958397, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.birth_day), person.death_day))", "inferred_question": "What are the birth days of people whose name is 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.5654366294038482, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.14122740606534723, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.death_day))", "inferred_question": "What are the names of people who were deceased on 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.582011429418344, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.5841792129958397, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.birth_day), person.name))", "inferred_question": "What are the birth days of people whose name is 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.6009573208284564, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.2584783752531472, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,!=,1938-12-16),person.name), person.death_day))", "inferred_question": "What are the names of people whose name is not 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.6070055605960079, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.4353302814740273, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.name), person.birth_day))", "inferred_question": "What are the names of people whose name is 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.6100269237649627, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.14122740606534723, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.name))", "inferred_question": "What are the names of people who were deceased on 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.6243607315409463, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.4353302814740273, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,1938-12-16), person.birth_day),person.name))", "inferred_question": "What are the names of people whose name is 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.6264204408216756, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.14122740606534723, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1938-12-16), person.name),person.name))", "inferred_question": "What are the names of people who were deceased on 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.6316718326997943, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,<=,1938-12-16),person.name), person.death_day))", "inferred_question": "-"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.6455476151895709, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.2584783752531472, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,!=,1938-12-16),person.name), person.name))", "inferred_question": "What are the names of people whose name is not 1938-12-16?"}, {"orig_question": "Who was born on December 16th 1938?", "score": -0.6534666286897846, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,<,1938-12-16),person.name), person.death_day))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 202, "beams": [{"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.1159737964044325, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "inferred_question": "What are the genders of people who were born on 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.2234170247684233, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.665003260060049, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1980-03-27), person.gender),person.gender))", "inferred_question": "What are the genders of people who were born before 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.4094143469701521, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.665003260060049, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1980-03-27), person.gender),person.gender))", "inferred_question": "What are the genders of people who were born before 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.42176591948373243, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.34081950788449566, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1980-03-27), person.gender),person.gender))", "inferred_question": "What are the genders of people who were not born on 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.4636963863740675, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.7535766999318297, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1980-03-27), person.gender),person.gender))", "inferred_question": "What are the genders of people who were born after 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.489245502918493, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.2952187098180502, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1980-03-27), person.gender),person.gender))", "inferred_question": "What are the genders of people who were deceased on 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.5119427044264739, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,=,1980-03-27),person.gender), person.gender))", "inferred_question": "What are the genders of people who were born on 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.5596496646176092, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.name),person.gender))", "inferred_question": "What are the genders of people who were born on 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.5966887312824838, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.30964997800620375, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,1980-03-27), person.gender),person.gender))", "inferred_question": "What are the genders of people who were deceased before 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.6307642419706099, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.7535766999318297, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1980-03-27), person.gender),person.gender))", "inferred_question": "What are the genders of people who were born after 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.6366664629749721, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.665003260060049, "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,<,1980-03-27),person.gender), person.gender))", "inferred_question": "What are the genders of people who were born before 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.6467623223434202, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.49838301151443654, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.name))", "inferred_question": "What are the names of people who were born on 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.6572105844388716, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,null,1980-03-27), person.gender),person.gender))", "inferred_question": "What are the genders of people who were born on 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.6670928776147775, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.665003260060049, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1980-03-27), person.name),person.gender))", "inferred_question": "What are the genders of people who were born before 1980-03-27?"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "score": -0.7306710590492003, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "is_correct_ot": false, "beam_nubia_score": 0.27698795403336474, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),movie.popularity))", "inferred_question": "What are the popularities of people who were born on 1980-03-27?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 203, "beams": [{"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.25150311855686125, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8075908899209729, "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.id),oscar.number)", "inferred_question": "What is the average number of all oscars which people won for their contribution to movies whose original language is cn?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.30305641792205373, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5430684672020027, "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.id),movie.title)", "inferred_question": "What is the average name of all movies whose original language is cn for which people won oscars?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.32776627773449163, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5841050526444329, "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.id),movie.runtime)", "inferred_question": "What is the average runtime of all movies whose original language is cn for which people won oscars?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.344557931596122, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8075908899209729, "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.status),oscar.number)", "inferred_question": "What is the average number of all oscars which people won for their contribution to movies whose original language is cn?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.3545872098175092, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5533459786564818, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "inferred_question": "How many names of movies whose original language is cn for which people won oscars are there?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.36370019619400523, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8075908899209729, "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.status),oscar.number)", "inferred_question": "What is the average number of all oscars which people won for their contribution to movies whose original language is cn?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.38204863059886524, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5533459786564818, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.status),movie.title))", "inferred_question": "How many names of movies whose original language is cn for which people won oscars are there?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.4003959691429907, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5533459786564818, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.title),movie.title))", "inferred_question": "How many names of movies whose original language is cn for which people won oscars are there?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.4126704661895774, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5841050526444329, "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.status),movie.runtime)", "inferred_question": "What is the average runtime of all movies whose original language is cn for which people won oscars?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.41268349161828466, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.8075908899209729, "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.id),oscar.number)", "inferred_question": "What is the average number of all oscars which people won for their contribution to movies whose original language is cn?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.41525349555919777, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5430684672020027, "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.status),movie.title)", "inferred_question": "What is the average name of all movies whose original language is cn for which people won oscars?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.4161864220414348, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": true, "beam_nubia_score": 0.8075908899209729, "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), oscar.id),oscar.number)", "inferred_question": "What is the average number of all oscars which people won for their contribution to movies whose original language is cn?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.41895351869410846, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5533459786564818, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),movie.title))", "inferred_question": "How many names of movies whose original language is cn for which people won oscars are there?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.42234377729373845, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.5533459786564818, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.status),movie.title))", "inferred_question": "How many names of movies whose original language is cn for which people won oscars are there?"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "score": -0.45373219127780706, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.4989335142995299, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.runtime))", "inferred_question": "How many runtimes of movies whose original language is cn for which people won oscars are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 204, "beams": [{"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.026090404942806344, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.6321102063749109, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "inferred_question": "What are the names of movies with a popularity of 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.4842753201736857, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5708313228927946, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.id),movie.title)", "inferred_question": "What is the average name of all movies with a popularity of 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.5516578934660432, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.1603021395087214, "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies with a popularity of 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.5641391391327488, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6569834841315723, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,10.4764), movie.title),movie.title))", "inferred_question": "What are the names of movies with a popularity of at most 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.6021859126558411, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6321102063749109, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.release_date),movie.title))", "inferred_question": "What are the names of movies with a popularity of 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.6957181768884766, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6321102063749109, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.runtime),movie.title))", "inferred_question": "What are the names of movies with a popularity of 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.7073499674370396, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7138825151615167, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,10.4764), movie.title),movie.title))", "inferred_question": "What are the names of movies with a popularity of at least 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.7127661185731995, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6321102063749109, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.status),movie.title))", "inferred_question": "What are the names of movies with a popularity of 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.744270812945615, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.3367743509705138, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,10.4764), movie.title),movie.title))", "inferred_question": "What are the names of movies with a popularity of less than 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.7809772493710625, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.23941911213790157, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,10.4764), movie.title),movie.title))", "inferred_question": "What are the names of movies?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.7890186423828709, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.2682935740659591, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,10.4764), movie.title),movie.title))", "inferred_question": "What are the names of movies with a popularity other than 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.7932315471043694, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5405215284739913, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,10.4764), movie.title),movie.title))", "inferred_question": "What are the names of movies whose status is 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.8031210530243698, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6321102063749109, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.budget),movie.title))", "inferred_question": "What are the names of movies with a popularity of 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.8263567092290032, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6713293084666284, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,10.4764), movie.title),movie.title))", "inferred_question": "What are the names of movies with a vote average of 10.4764?"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "score": -0.826892510165635, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6321102063749109, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),company.name))", "inferred_question": "What are the names of movies with a popularity of 10.4764?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 205, "beams": [{"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.040014663885813206, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.2683874705689959, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,69), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of at most 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.3306320050614886, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.9817585645570825, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,69), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of less than 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.614109487447422, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.28920528291106706, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.6247288921731524, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,69), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of at least 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.6500081132980995, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.19439943132527815, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),person.death_day))", "inferred_question": "What are the death days of movies with a runtime of 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.6810685733216815, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.6290595113227593, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,69), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime other than 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.6884688475984149, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,69), movie.revenue),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of more than 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.7041526052053086, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.popularity),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.7409354659612291, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), person.death_day),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.7502754667657427, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,null,69), movie.revenue),movie.revenue))", "inferred_question": "-"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.7982519578072242, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.21630135580487297, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),cast.person_id))", "inferred_question": "What are the person_ids of movies with a runtime of 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.8279031824204139, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.7152620811407078, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.budget))", "inferred_question": "What are the budgets of movies with a runtime of 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.8424822941306047, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.36240592206346134, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,69), movie.revenue),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a runtime of at most 69 minutes?"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "score": -0.842725427064579, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "is_correct_ot": false, "beam_nubia_score": 0.22120117873806444, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.original_language))", "inferred_question": "What are the original languages of movies with a runtime of 69 minutes?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 206, "beams": [{"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.12571890481463993, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.41814883809662373, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with genres whose name is Action?"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.13448817601431245, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.9074385831537267, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with genres whose name is not Action?"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.22732379333990968, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.2816491077354458, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.2880083906254644, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.2995374180317742, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.3058695560186739, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.30711303735102596, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.3118260452910398, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.3279337689514508, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.3313648223975731, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.41814883809662373, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.release_date),movie.runtime)", "inferred_question": "What is the total runtime of all movies with genres whose name is Action?"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.3359460912029496, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id), movie.release_date),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.3388088786370561, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.3401340935972456, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.9074385831537267, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action), movie.release_date),movie.runtime)", "inferred_question": "What is the total runtime of all movies with genres whose name is not Action?"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "score": -0.34124559328837945, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.id),movie.runtime)", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 207, "beams": [{"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.2640244624614803, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),oscar.number))", "inferred_question": "-"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.2731352733846684, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.39274113120566667, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), movie.title),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with genres whose name is Documentary are there?"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.27823043320896473, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id), movie.title),oscar.number))", "inferred_question": "-"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.32403614667951475, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),oscar.number))", "inferred_question": "-"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.3287635766248064, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),oscar.category))", "inferred_question": "-"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.33148585333930936, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.38533822013665253, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), movie.title),oscar.category))", "inferred_question": "How many categories of oscars which people won for their contribution to movies with genres whose name is Documentary are there?"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.35110563194824623, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), oscar.number),oscar.number))", "inferred_question": "-"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.3529293529524352, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), oscar.category),oscar.number))", "inferred_question": "-"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.3532740880434983, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.38368774506207415, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "How many names of movies with genres whose name is Documentary are there?"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.35868581709230996, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), genre.name),oscar.number))", "inferred_question": "-"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.35974020439764065, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.4800791595052437, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), movie.title),movie.title))", "inferred_question": "How many names of movies with genres whose name is Documentary for which people won oscars are there?"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.36767427843543415, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.4649781814117968, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), movie.title),movie.runtime))", "inferred_question": "How many runtimes of movies with genres whose name is Documentary for which people won oscars are there?"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.37365872836237496, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.39274113120566667, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), oscar.number),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with genres whose name is Documentary are there?"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.3739196657111444, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.38368774506207415, "inferred_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))", "inferred_question": "How many names of movies with genres whose name is Documentary are there?"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "score": -0.37606604778896063, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)", "is_correct_ot": false, "beam_nubia_score": 0.39274113120566667, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), oscar.category),oscar.number))", "inferred_question": "How many numbers of oscars which people won for their contribution to movies with genres whose name is Documentary are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 208, "beams": [{"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.0077474631725635845, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": true, "beam_nubia_score": 0.7997381037073222, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.5939010151087132, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7997381037073222, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.revenue),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.6637268558733922, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.46998266643727815, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,75000000), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue of at least 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.7407198956243519, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.4712878996677925, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,75000000), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a vote count other than 75000000?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.7707913883386937, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7997381037073222, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.title),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.7847420938669529, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7997381037073222, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), person.death_place),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.802276400023402, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.41913612329244754, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.title))", "inferred_question": "What are the names of movies with a revenue other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.8036442764459935, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7997381037073222, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.release_date),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.8096679218469944, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7997381037073222, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.original_language),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.8159118565854442, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.3373290145449357, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.release_date))", "inferred_question": "What are the release dates of movies with a revenue other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.8198060664471996, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.48109837126297184, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.revenue))", "inferred_question": "What are the revenues of movies with a revenue other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.8330434372655873, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.813307516759735, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,75000000), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies with a budget other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.8576736262075428, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.3899734968991204, "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_day,!=,75000000), movie.budget),movie.budget))", "inferred_question": "What are the budgets of movies?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.8588766225038853, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7997381037073222, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.vote_count),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue other than 75000000 dollars?"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "score": -0.8619760640322056, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "is_correct_ot": false, "beam_nubia_score": 0.7997381037073222, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), person.death_day),movie.budget))", "inferred_question": "What are the budgets of movies with a revenue other than 75000000 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 209, "beams": [{"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.019620188701082952, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 0.9910750369195453, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who were born after 1939-12-17?"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.4538638719386654, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.44670382265263353, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1939-12-17), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who were deceased after 1939-12-17?"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.46369530139782, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.9910750369195453, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1939-12-17), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who were born after 1939-12-17?"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.5322956916204822, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.6177846282987922, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.6260132926545339, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6205559064624953, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1939-12-17), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who were born before 1939-12-17?"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.6288074416370364, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.9910750369195453, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_day),person.death_place))", "inferred_question": "What are the death places of people who were born after 1939-12-17?"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.6724549506754511, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,>,1939-12-17), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.6998347466492295, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>=,1939-12-17), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.7253771115761468, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_nominee.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.7482902918272885, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.8489255187906692, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_day))", "inferred_question": "What are the death days of people who were born after 1939-12-17?"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.7731560009560781, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6205559064624953, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1939-12-17), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who were born before 1939-12-17?"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.7947271007142263, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.5357424892515674, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1939-12-17), person.death_place),person.death_place))", "inferred_question": "What are the death places of people who were not born on 1939-12-17?"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.8029133242816897, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.9910750369195453, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.birth_place),person.death_place))", "inferred_question": "What are the death places of people who were born after 1939-12-17?"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "score": -0.8165335782832699, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,>,1939-12-17), person.death_place),person.death_place))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 210, "beams": [{"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.15738697350374312, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.8800904520274595, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is not jewelry store are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.16928378223890905, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.47701983832691164, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is not jewelry store and whose name is not jewelry store are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.2255684829724487, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5363102337464867, "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of keywords whose name is not jewelry store are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.3152380072280287, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5677404600736433, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),keyword.name,=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is not jewelry store and whose name is jewelry store are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.34769302116990436, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.541734833391156, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(has_keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords with those keywords are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.34875711255424957, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.8800904520274595, "inferred_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is not jewelry store are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.3583656387752477, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(merge(getData(language),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,keyword.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.36277485731638065, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(merge(getData(language),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.36507150276774264, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,keyword.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.3773957987116624, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8800904520274595, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),company.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is not jewelry store are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.403689583051606, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.8800904520274595, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),genre.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of movies with keywords whose name is not jewelry store are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.4077757767809089, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.09467014346862013, "inferred_code": "count(extractValues(distinct(filter(getData(person),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of people are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.4126785270345863, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.06708817429320302, "inferred_code": "count(extractValues(distinct(filter(getData(oscar),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of oscars are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.4144914619100746, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0843383303017895, "inferred_code": "count(extractValues(distinct(filter(getData(genre),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of genres are there?"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "score": -0.42237253705388866, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.059314093381585775, "inferred_code": "count(extractValues(distinct(filter(getData(language),keyword.name,!=,jewelry store), movie.title),movie.title))", "inferred_question": "How many names of languages are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 211, "beams": [{"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.07125443586846814, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.8830647850270698, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "inferred_question": "What are the names of people who were born after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.26139813096961007, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.1998963033633413, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.name),person.name))", "inferred_question": "What are the names of people who were deceased after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.46586715610465035, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": true, "beam_nubia_score": 0.8830647850270698, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "inferred_question": "What are the names of people who were born after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.500038343569031, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.9270932369795633, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "inferred_question": "Are there any names of people who were born after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.5178781835711561, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.8830647850270698, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.birth_day),person.name))", "inferred_question": "What are the names of people who were born after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.5207615531398915, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.5918022530834581, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.birth_day))", "inferred_question": "What are the birth days of people who were born after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.5530457419719446, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,>,1957-08-15), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.5601376927806996, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.26569210313407177, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.death_day))", "inferred_question": "What are the death days of people who were born after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.5672223902656697, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.41945891148509395, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.birth_place))", "inferred_question": "What are the birth places of people who were born after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.5924002857961798, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1957-08-15), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.6295418021590965, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.death_day,>,1957-08-15), person.name),person.name))", "inferred_question": "-"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.6388748078024946, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.8830647850270698, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.birth_place),person.name))", "inferred_question": "What are the names of people who were born after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.642036292643752, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.5744984432197207, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),oscar.year))", "inferred_question": "What are the years of people who were born after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.6560108512057923, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.1998963033633413, "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>=,1957-08-15), person.name),person.name))", "inferred_question": "What are the names of people who were deceased after 1957-08-15?"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "score": -0.6888902942591812, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "is_correct_ot": false, "beam_nubia_score": 0.18452385087960943, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.name),person.name))", "inferred_question": "Are there any names of people who were deceased after 1957-08-15?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 212, "beams": [{"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.14616464131905943, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.4866928741151745, "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies in which languages whose name is 6.6 is spoken?"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.17652910695649923, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.25516171910276064, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.29484890735839264, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.2978440085074297, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.3039832603189007, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.4866928741151745, "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies in which languages whose name is 6.6 is spoken?"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.3282084741448695, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.2835772019646102, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies for which people won oscars?"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.3311188453565399, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.2981262344274168, "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),person.name,=,6.6), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies in which languages is spoken?"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.3343477259563405, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.34014118575497526, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.4866928741151745, "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies in which languages whose name is 6.6 is spoken?"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.36148331099397973, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),person.name,=,6.6), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.3705056513924151, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.38248304802644806, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "-"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.40152715792511856, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.4522498790463003, "inferred_code": "avg(distinct(filter(getData(movie),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies?"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "score": -0.4018189135746548, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)", "is_correct_ot": false, "beam_nubia_score": 0.4866928741151745, "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),oscar.id,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "inferred_question": "What is the average budget of all movies in which languages whose name is 6.6 is spoken?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 213, "beams": [{"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.23867941323288025, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.4508269078375067, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.birth_day),person.name))", "inferred_question": "How many names of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.24688209531176578, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6444433827525133, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.birth_day),person.death_day))", "inferred_question": "How many death days of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.25563263529763336, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.37722123257464446, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.birth_day),person.birth_day))", "inferred_question": "How many birth days of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.2886683882321269, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.4508269078375067, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.death_day),person.name))", "inferred_question": "How many names of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.29687107031101245, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6444433827525133, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.death_day),person.death_day))", "inferred_question": "How many death days of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.2995874781638955, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.4508269078375067, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,movie.id), person.birth_day),person.name))", "inferred_question": "How many names of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.30562161029688006, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.37722123257464446, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.death_day),person.birth_day))", "inferred_question": "How many birth days of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.30762763163319196, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.4548251640313882, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.birth_day),person.birth_place))", "inferred_question": "How many birth places of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.30779016024278105, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6444433827525133, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,movie.id), person.birth_day),person.death_day))", "inferred_question": "How many death days of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.31654070022864866, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.37722123257464446, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,movie.id), person.birth_day),person.birth_day))", "inferred_question": "How many birth days of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.32474601159664995, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.4508269078375067, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.name))", "inferred_question": "How many names of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.33294869367553553, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.6444433827525133, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.death_day))", "inferred_question": "How many death days of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.39183949084826425, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.4508269078375067, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.birth_day),person.name))", "inferred_question": "How many names of people who were nominated for oscars whose category is writing for their contribution to movies are there?"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.4084574290022072, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),merge(getData(oscar),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id),oscar_nominee.movie_id,oscar_nominee.oscar_id), person.death_day),person.death_day))", "inferred_question": "-"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "score": -0.4169534244485417, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),merge(getData(oscar),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id),oscar_nominee.movie_id,oscar_nominee.oscar_id), person.death_day),person.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 214, "beams": [{"orig_question": "How many movies were produced in the Philippines?", "score": -0.20881519468093757, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.2627195911756056, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Philippines), movie.release_date),movie.release_date))", "inferred_question": "How many release dates of movies whose name is Philippines are there?"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.2977041378762806, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.34565804113210485, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Philippines), movie.release_date),movie.title))", "inferred_question": "How many names of movies whose name is Philippines are there?"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.36466536672378425, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.34162329602137376, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Philippines), movie.release_date),movie.status))", "inferred_question": "How many statuses of movies whose name is Philippines are there?"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.3982400745298946, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.2627195911756056, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Philippines), movie.status),movie.release_date))", "inferred_question": "How many release dates of movies whose name is Philippines are there?"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.41242216297525014, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,Philippines), movie.release_date),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.4225768186613613, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),movie.title,=,Philippines), movie.release_date),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.4432091715382755, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,Philippines), movie.release_date),movie.release_date))", "inferred_question": "-"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.4533638272243867, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),movie.title,=,Philippines), movie.release_date),movie.release_date))", "inferred_question": "-"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.45462006907840646, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.title,=,Philippines), movie.release_date),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.47101010509126956, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,Philippines), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.4719914700869406, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),company.name,=,Philippines), movie.release_date),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.47283128304863425, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.title,=,Philippines), movie.release_date),movie.release_date))", "inferred_question": "-"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.47432874641070877, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Philippines), movie.release_date),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.48116476077738074, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),movie.title,=,Philippines), movie.title),movie.title))", "inferred_question": "-"}, {"orig_question": "How many movies were produced in the Philippines?", "score": -0.4844832204610091, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.title,=,Philippines), movie.release_date),movie.title))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 215, "beams": [{"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.18476610628660262, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "inferred_question": "How many death places of people who worked in movies with a runtime of less than 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.19685160380389505, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.9883474448047794, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "inferred_question": "How many death places of people who starred in movies with a runtime of less than 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.23581041192781743, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(person),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.24714308393595275, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.9847589680203176, "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,25), person.death_place),person.death_place))", "inferred_question": "How many death places of movies with a runtime of less than 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.26491215249102007, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,cast.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "inferred_question": "How many death places of people who worked in movies with a runtime of less than 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.2769976500083125, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.9883474448047794, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "inferred_question": "How many death places of people who starred in movies with a runtime of less than 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.29444160832963273, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": true, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,25),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "inferred_question": "How many death places of people who worked in movies with a runtime of less than 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.2952405179382204, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,25),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "inferred_question": "How many death places of people who worked in movies with a runtime of less than 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.3159564581322349, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(person),movie.id,cast.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "inferred_question": "-"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.3305765593461611, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<=,25), person.death_place),person.death_place))", "inferred_question": "How many death places of people who worked in movies with a runtime of at most 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.3320937920702263, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 1.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),cast.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "inferred_question": "How many death places of people who worked in movies with a runtime of less than 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.3426620568634535, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.8919208381302361, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<=,25), person.death_place),person.death_place))", "inferred_question": "How many death places of people who starred in movies with a runtime of at most 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.3441792941214919, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.9883474448047794, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,crew.movie_id),getData(person),cast.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "inferred_question": "How many death places of people who starred in movies with a runtime of less than 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.3489138593551522, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.9883474448047794, "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.runtime,<,25), person.death_place),person.death_place))", "inferred_question": "How many death places of people who starred in movies with a runtime of less than 25 minutes are there?"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "score": -0.43714095827712834, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "is_correct_ot": false, "beam_nubia_score": 0.9429800312988784, "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.runtime,<,25),person.death_place,=,25), person.death_place),person.death_place))", "inferred_question": "How many death places of people who were deceased in 25 who starred in movies with a runtime of less than 25 minutes are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 216, "beams": [{"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.1191581899911398, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": true, "beam_nubia_score": 0.9968331202757627, "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "inferred_question": "What are the popularities of movies with a runtime of at least 59 minutes with maximum runtime?"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.406532727429294, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.947530663339942, "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,<=,59),movie.runtime),movie.popularity))", "inferred_question": "What are the popularities of movies with a runtime of at most 59 minutes with maximum runtime?"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.5015659782366129, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.9231880787810558, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,59), movie.runtime),movie.popularity))", "inferred_question": "What are the popularities of movies with a runtime of at least 59 minutes?"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.5655928480118746, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.9907849028289224, "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>,59),movie.runtime),movie.popularity))", "inferred_question": "What are the popularities of movies with a runtime of more than 59 minutes with maximum runtime?"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.5785825213097269, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.5982274020712139, "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.vote_average),movie.popularity))", "inferred_question": "What are the popularities of movies with a runtime of at least 59 minutes with maximum vote average?"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.6247033702820772, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.5689925662944948, "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,!=,59),movie.runtime),movie.popularity))", "inferred_question": "What are the popularities of movies with a runtime other than 59 minutes with maximum runtime?"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.6389695739053423, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.41950074430129913, "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.release_date))", "inferred_question": "What are the release dates of movies with a runtime of at least 59 minutes with maximum runtime?"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.6961025821656222, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.9640682842220101, "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,=,59),movie.runtime),movie.popularity))", "inferred_question": "What are the popularities of movies with a runtime of 59 minutes with maximum runtime?"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.6986304854654009, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6364597532499381, "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.revenue))", "inferred_question": "What are the revenues of movies with a runtime of at least 59 minutes with maximum runtime?"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.7459119793141173, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.runtime,>=,59),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.runtime),movie.popularity))", "inferred_question": "-"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.7477970932223782, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.runtime,>=,59),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.runtime),movie.popularity))", "inferred_question": "-"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.7717571667173202, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.runtime,>=,59),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,movie.revenue),movie.runtime),movie.popularity))", "inferred_question": "-"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.7736422853326066, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.runtime,>=,59),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,movie.revenue),movie.runtime),movie.popularity))", "inferred_question": "-"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.8030462014867226, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.6821175711156731, "inferred_code": "done(extractValues(max(filter(getData(movie),movie.vote_count,>=,59),movie.runtime),movie.popularity))", "inferred_question": "What are the popularities of movies with a vote count of at least 59 with maximum runtime?"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "score": -0.8091012428776594, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "is_correct_ot": false, "beam_nubia_score": 0.9047549471341497, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,59), movie.runtime),movie.popularity))", "inferred_question": "What are the popularities of movies with a runtime of at most 59 minutes?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 217, "beams": [{"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.21079629254498755, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.31069739901603877, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "How many names of languages whose name is not ar spoken in movies are there?"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.21385115467997937, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.2148971152578481, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.31069739901603877, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "How many names of languages whose name is not ar spoken in movies are there?"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.26340000364445093, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.31069739901603877, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "How many names of languages whose name is not ar spoken in movies are there?"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.2675008263573115, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.31069739901603877, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "How many names of languages whose name is not ar spoken in movies are there?"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.2981558616626643, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.3026341061580071, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar),language.name,!=,ar), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.3104593790804197, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.3145602017932802, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.3259020630726109, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,ar),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.3262000209522877, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.32667216032318386, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.3441705447776097, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "inferred_question": "-"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.35041693876589675, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),person.name))", "inferred_question": "-"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "score": -0.36862993737062344, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,!=,ar), language.name),language.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 218, "beams": [{"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.06962038294850807, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.8523285660707043, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with genres whose name is Family?"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.193083606980933, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.24874704179423152, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.26766078457898157, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.2798352436232121, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": true, "beam_nubia_score": 0.8523285660707043, "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with genres whose name is Family?"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.29761335363569574, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.2977614829618483, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.2987744726177111, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.31242208003366534, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.3236169077566995, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(movie),cast.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.33905391482416575, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.35823201367472257, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.8523285660707043, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),cast.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with genres whose name is Family?"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.37138063088680956, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.runtime),movie.runtime)", "inferred_question": "-"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.37307351113486736, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.8523285660707043, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.release_date),movie.runtime)", "inferred_question": "What is the total runtime of all movies with genres whose name is Family?"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "score": -0.3759001615849977, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)", "is_correct_ot": false, "beam_nubia_score": 0.5110440426799823, "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),person.death_place,=,Family), movie.id),movie.runtime)", "inferred_question": "What is the total runtime of all movies with genres?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 219, "beams": [{"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.030182499951479258, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": true, "beam_nubia_score": 0.9444912520314089, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a revenue of at least 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.4048598991248582, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9264050764378804, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,160583018), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a revenue of more than 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.4380245493266557, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.8131040091063398, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,160583018), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a revenue of at most 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.5046470917441184, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.8914823949550698, "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "inferred_question": "Are there any vote averages of movies with a revenue of at least 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.6072493109859352, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9215242709001803, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_count))", "inferred_question": "What are the vote counts of movies with a revenue of at least 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.6864665181383316, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9444912520314089, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), oscar.year),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a revenue of at least 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.7044829640544776, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.6566361706835891, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.popularity))", "inferred_question": "What are the popularities of movies with a revenue of at least 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.7644885809168045, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9444912520314089, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.popularity),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a revenue of at least 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.7725610421512101, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.5385065479815129, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,160583018), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a revenue other than 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.774605694507045, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9444912520314089, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_count),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a revenue of at least 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.7818084273494605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.6650131963309347, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),oscar.year))", "inferred_question": "What are the years of movies with a revenue of at least 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.7878047582817089, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.8615211517893882, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,160583018), movie.vote_average),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a vote count of at least 160583018?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.8014505419887428, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.7743809937038573, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.status))", "inferred_question": "What are the statuses of movies with a revenue of at least 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.8319586429752235, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.6611079746153266, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.runtime))", "inferred_question": "What are the runtimes of movies with a revenue of at least 160583018 dollars?"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "score": -0.8406636149629776, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "is_correct_ot": false, "beam_nubia_score": 0.9444912520314089, "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.runtime),movie.vote_average))", "inferred_question": "What are the vote averages of movies with a revenue of at least 160583018 dollars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 220, "beams": [{"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.2154416174189971, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7454489289619564, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.2235914614062327, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7454489289619564, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.22629759112156145, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6154478775827864, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.23531261056861338, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7454489289619564, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,<=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.24616858427117774, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6154478775827864, "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.25650939472145995, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6154478775827864, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.2636704419685701, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": true, "beam_nubia_score": 0.7454489289619564, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.29314505867372775, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7454489289619564, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<=,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.30139920352104044, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7454489289619564, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<=,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.3260630009184594, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6154478775827864, "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were born before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.3566480274438653, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5914134797754003, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "inferred_question": "What is the average name of all movies for which people who were born before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.3719105860080614, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6681099284950885, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "inferred_question": "What is the average name of all movies for which people who were deceased before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.3757990802339599, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.7454489289619564, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<=,2016-11-20), movie.title),movie.title))", "inferred_question": "What are the names of movies for which people who were deceased before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.4035972508666982, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.5914134797754003, "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,<=,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "inferred_question": "What is the average name of all movies for which people who were born before 2016-11-20 were nominated for oscars?"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "score": -0.4248209502660542, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))", "is_correct_ot": false, "beam_nubia_score": 0.6681099284950885, "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<=,2016-11-20), movie.id),movie.title)", "inferred_question": "What is the average name of all movies for which people who were deceased before 2016-11-20 were nominated for oscars?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 221, "beams": [{"orig_question": "To which genres do movies in post production belong to?", "score": -0.024591919136346025, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.7485538125201263, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies whose status is Post Production?"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.3187602081047485, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.7485538125201263, "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies whose status is Post Production?"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.3291312354854359, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.3435539231105923, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6787913189315585, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(has_genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies whose status is Post Production comprising those movies?"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.34636179594648336, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7485538125201263, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.name), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies whose status is Post Production?"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.3568764889739762, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7221259777212226, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.popularity,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a popularity of Post Production?"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.3664381350254936, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7485538125201263, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,has_genre.movie_id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies whose status is Post Production?"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.3669288393971539, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),person.death_place))", "inferred_question": "-"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.3802475230719645, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.40068573523233514, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.5078316794056323, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies with a vote average of Post Production?"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.404588883636856, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.4067076490344328, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7485538125201263, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,production_company.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies whose status is Post Production?"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.4093726384473454, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.7485538125201263, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.movie_id,genre.id), genre.name),genre.name))", "inferred_question": "What are the names of genres comprising movies whose status is Post Production?"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.41070895581234557, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "To which genres do movies in post production belong to?", "score": -0.41929247668621455, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),company.name))", "inferred_question": "-"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 222, "beams": [{"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.10403406662182214, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6719362481816091, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies for which people won oscars whose sub-category is writing (story and screenplay--based on material not previously published or produced)?"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.20302807699845907, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5859528929314214, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies for which people won oscars whose sub-category is not writing (story and screenplay--based on material not previously published or produced)?"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.20670380442886618, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5859528929314214, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies for which people won oscars whose sub-category is not writing (story and screenplay--based on material not previously published or produced)?"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.24067088494111535, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,>=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.2454107696025613, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.5859528929314214, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies for which people won oscars whose sub-category is not writing (story and screenplay--based on material not previously published or produced)?"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.2546956848273837, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,>=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.291715862311559, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),movie.id,movie.id),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.296286556368729, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6719362481816091, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies for which people won oscars whose sub-category is writing (story and screenplay--based on material not previously published or produced)?"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.31483832158513586, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6719362481816091, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies for which people won oscars whose sub-category is writing (story and screenplay--based on material not previously published or produced)?"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.31582226518874024, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.3303400819283828, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),movie.id,movie.id),oscar_winner.movie_id,movie.id),oscar.sub_category,>=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.3405616463822894, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.3412304822513943, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,>=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.34782714786038516, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "-"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "score": -0.35634118433541523, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))", "is_correct_ot": false, "beam_nubia_score": 0.6719362481816091, "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "inferred_question": "What are the vote counts of movies for which people won oscars whose sub-category is writing (story and screenplay--based on material not previously published or produced)?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 223, "beams": [{"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.15538559801848636, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.774808830667202, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(movie),spoken_language.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies in which languages whose name is Magyar is spoken are there?"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.18542359563900168, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.20036802469522352, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": true, "beam_nubia_score": 0.774808830667202, "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Magyar),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies in which languages whose name is Magyar is spoken are there?"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.22633487220153722, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.774808830667202, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,has_genre.genre_id), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies in which languages whose name is Magyar is spoken are there?"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.2518722471453199, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.2599527029638971, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.774808830667202, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,genre.id), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies in which languages whose name is Magyar is spoken are there?"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.26067003126311594, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.774808830667202, "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies in which languages whose name is Magyar is spoken are there?"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.2849935691542464, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.774808830667202, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,has_genre.genre_id), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies in which languages whose name is Magyar is spoken are there?"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.2865116459907128, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.774808830667202, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,genre.id), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies in which languages whose name is Magyar is spoken are there?"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.2903228047790321, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.3094237792951134, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.6046642630740806, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(getData(has_genre),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),spoken_language.movie_id,has_genre.genre_id), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies in which languages whose name is Magyar is spoken comprising those movies are there?"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.3099017423352959, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.774808830667202, "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Magyar),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),language.iso_639_1,has_genre.movie_id), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies in which languages whose name is Magyar is spoken are there?"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.3153910343220147, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),language.name,=,Magyar),genre.id,has_genre.genre_id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.31745074811848795, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.0, "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),language.name,=,Magyar),has_genre.movie_id,has_genre.genre_id), genre.name),genre.name))", "inferred_question": "-"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "score": -0.32874609155956985, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "is_correct_ot": false, "beam_nubia_score": 0.4274373077023066, "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),language.name,=,Magyar),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,has_genre.movie_id), genre.name),genre.name))", "inferred_question": "How many names of genres comprising movies in which languages whose name is Magyar and whose name is Magyar is spoken are there?"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
